
small_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800b76c  0800b76c  0001b76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b4  0800b9b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9b4  0800b9b4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9b4  0800b9b4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038dc  20000084  0800ba40  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003960  0800ba40  00023960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbb7  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a91  00000000  00000000  0003dc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  00042700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  00044208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e20  00000000  00000000  00045b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020685  00000000  00000000  0006c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e035f  00000000  00000000  0008d02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d38c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a34  00000000  00000000  0016d3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00174e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00174e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b754 	.word	0x0800b754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800b754 	.word	0x0800b754

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
    ws2812b_show(strip_mask);
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fe2b 	bl	8002714 <ws2812b_show>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ac6:	b590      	push	{r4, r7, lr}
 8000ac8:	b087      	sub	sp, #28
 8000aca:	af02      	add	r7, sp, #8
 8000acc:	4604      	mov	r4, r0
 8000ace:	4608      	mov	r0, r1
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	80fb      	strh	r3, [r7, #6]
 8000ad8:	4603      	mov	r3, r0
 8000ada:	80bb      	strh	r3, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d11c      	bne.n	8000b24 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e015      	b.n	8000b1c <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000af0:	88ba      	ldrh	r2, [r7, #4]
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fbc8 	bl	800228c <ws2812_pixel_is_in_strip_range>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d009      	beq.n	8000b16 <animate_led_set_pixel+0x50>
 8000b02:	78bc      	ldrb	r4, [r7, #2]
 8000b04:	78fa      	ldrb	r2, [r7, #3]
 8000b06:	88b9      	ldrh	r1, [r7, #4]
 8000b08:	7bf8      	ldrb	r0, [r7, #15]
 8000b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	4623      	mov	r3, r4
 8000b12:	f001 fbd5 	bl	80022c0 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d9e6      	bls.n	8000af0 <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip();
}
 8000b22:	e020      	b.n	8000b66 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000b24:	2301      	movs	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
 8000b28:	e01a      	b.n	8000b60 <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000b2a:	88fa      	ldrh	r2, [r7, #6]
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d012      	beq.n	8000b5a <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000b34:	88ba      	ldrh	r2, [r7, #4]
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fba6 	bl	800228c <ws2812_pixel_is_in_strip_range>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d009      	beq.n	8000b5a <animate_led_set_pixel+0x94>
 8000b46:	78bc      	ldrb	r4, [r7, #2]
 8000b48:	78fa      	ldrb	r2, [r7, #3]
 8000b4a:	88b9      	ldrh	r1, [r7, #4]
 8000b4c:	7bb8      	ldrb	r0, [r7, #14]
 8000b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4623      	mov	r3, r4
 8000b56:	f001 fbb3 	bl	80022c0 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	73bb      	strb	r3, [r7, #14]
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d9e1      	bls.n	8000b2a <animate_led_set_pixel+0x64>
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
	...

08000b70 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	717b      	strb	r3, [r7, #5]
 8000b86:	460b      	mov	r3, r1
 8000b88:	713b      	strb	r3, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <animate_led_set_all_pixels+0xd0>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	88fa      	ldrh	r2, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d122      	bne.n	8000be2 <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	75fb      	strb	r3, [r7, #23]
 8000ba0:	e01b      	b.n	8000bda <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fb0d 	bl	80021c4 <ws2812_get_strip_size>
 8000baa:	4603      	mov	r3, r0
 8000bac:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	82bb      	strh	r3, [r7, #20]
 8000bb2:	e00b      	b.n	8000bcc <animate_led_set_all_pixels+0x5c>
 8000bb4:	793c      	ldrb	r4, [r7, #4]
 8000bb6:	797a      	ldrb	r2, [r7, #5]
 8000bb8:	8ab9      	ldrh	r1, [r7, #20]
 8000bba:	7df8      	ldrb	r0, [r7, #23]
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	4623      	mov	r3, r4
 8000bc2:	f001 fb7d 	bl	80022c0 <ws2812b_set_led>
 8000bc6:	8abb      	ldrh	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	82bb      	strh	r3, [r7, #20]
 8000bcc:	8aba      	ldrh	r2, [r7, #20]
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3ef      	bcc.n	8000bb4 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	75fb      	strb	r3, [r7, #23]
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d9e0      	bls.n	8000ba2 <animate_led_set_all_pixels+0x32>
 8000be0:	e026      	b.n	8000c30 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000be2:	2301      	movs	r3, #1
 8000be4:	74fb      	strb	r3, [r7, #19]
 8000be6:	e020      	b.n	8000c2a <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000be8:	88fa      	ldrh	r2, [r7, #6]
 8000bea:	7cfb      	ldrb	r3, [r7, #19]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d018      	beq.n	8000c24 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000bf2:	7cfb      	ldrb	r3, [r7, #19]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fae5 	bl	80021c4 <ws2812_get_strip_size>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	823b      	strh	r3, [r7, #16]
 8000c02:	e00b      	b.n	8000c1c <animate_led_set_all_pixels+0xac>
 8000c04:	793c      	ldrb	r4, [r7, #4]
 8000c06:	797a      	ldrb	r2, [r7, #5]
 8000c08:	8a39      	ldrh	r1, [r7, #16]
 8000c0a:	7cf8      	ldrb	r0, [r7, #19]
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	4623      	mov	r3, r4
 8000c12:	f001 fb55 	bl	80022c0 <ws2812b_set_led>
 8000c16:	8a3b      	ldrh	r3, [r7, #16]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	823b      	strh	r3, [r7, #16]
 8000c1c:	8a3a      	ldrh	r2, [r7, #16]
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3ef      	bcc.n	8000c04 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	3301      	adds	r3, #1
 8000c28:	74fb      	strb	r3, [r7, #19]
 8000c2a:	7cfb      	ldrb	r3, [r7, #19]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d9db      	bls.n	8000be8 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff3a 	bl	8000aac <animate_led_show_strip>
}
 8000c38:	bf00      	nop
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	20000426 	.word	0x20000426

08000c44 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_spell)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <animate_led_solid_custom_color+0x40>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	81bb      	strh	r3, [r7, #12]
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_solid_rgb);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f000 fd59 	bl	8001718 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000c66:	7b39      	ldrb	r1, [r7, #12]
 8000c68:	7b7a      	ldrb	r2, [r7, #13]
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	88f8      	ldrh	r0, [r7, #6]
 8000c6e:	f7ff ff7f 	bl	8000b70 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff19 	bl	8000aac <animate_led_show_strip>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	0800b76c 	.word	0x0800b76c

08000c88 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff6c 	bl	8000b70 <animate_led_set_all_pixels>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	ed2d 8b02 	vpush	{d8}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fac8 	bl	8002248 <ws2812_led_get_max_strip_size>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <animate_led_only_spell_word+0xbc>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	81bb      	strh	r3, [r7, #12]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6838      	ldr	r0, [r7, #0]
 8000cce:	f000 fd23 	bl	8001718 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e034      	b.n	8000d42 <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8000cd8:	f000 fdac 	bl	8001834 <task_button_press_interrupt_occurred>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00d      	beq.n	8000cfe <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	1c9a      	adds	r2, r3, #2
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	1c59      	adds	r1, r3, #1
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fe02 	bl	80018fc <task_button_press_check_interrupts>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d126      	bne.n	8000d4c <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	b299      	uxth	r1, r3
 8000d02:	7b3a      	ldrb	r2, [r7, #12]
 8000d04:	7b7c      	ldrb	r4, [r7, #13]
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	88f8      	ldrh	r0, [r7, #6]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	f7ff feda 	bl	8000ac6 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fec9 	bl	8000aac <animate_led_show_strip>
		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000d24:	f001 f950 	bl	8001fc8 <task_led_ctrl_speed>
 8000d28:	eeb0 7a40 	vmov.f32	s14, s0
 8000d2c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d34:	ee17 0a90 	vmov	r0, s15
 8000d38:	f001 f81c 	bl	8001d74 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	8a7b      	ldrh	r3, [r7, #18]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	dbc6      	blt.n	8000cd8 <animate_led_only_spell_word+0x3c>
 8000d4a:	e000      	b.n	8000d4e <animate_led_only_spell_word+0xb2>
                return;
 8000d4c:	bf00      	nop
	}
}
 8000d4e:	371c      	adds	r7, #28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	ecbd 8b02 	vpop	{d8}
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	0800b76c 	.word	0x0800b76c

08000d5c <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 8000d68:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <animate_led_fade_in_fade_out+0x27c>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	823b      	strh	r3, [r7, #16]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f000 fccd 	bl	8001718 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	e08b      	b.n	8000e9c <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8000d84:	f000 fd56 	bl	8001834 <task_button_press_interrupt_occurred>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00e      	beq.n	8000dac <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	1c9a      	adds	r2, r3, #2
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	1c59      	adds	r1, r3, #1
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fdac 	bl	80018fc <task_button_press_check_interrupts>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 810f 	bne.w	8000fca <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8000dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dae:	f7ff fbb1 	bl	8000514 <__aeabi_i2d>
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b89      	ldr	r3, [pc, #548]	; (8000fdc <animate_led_fade_in_fade_out+0x280>)
 8000db8:	f7ff fd40 	bl	800083c <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	7c3b      	ldrb	r3, [r7, #16]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fba4 	bl	8000514 <__aeabi_i2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	f7ff fc08 	bl	80005e8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fe14 	bl	8000a0c <__aeabi_d2f>
 8000de4:	4603      	mov	r3, r0
 8000de6:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8000de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dea:	f7ff fb93 	bl	8000514 <__aeabi_i2d>
 8000dee:	f04f 0200 	mov.w	r2, #0
 8000df2:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <animate_led_fade_in_fade_out+0x280>)
 8000df4:	f7ff fd22 	bl	800083c <__aeabi_ddiv>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4614      	mov	r4, r2
 8000dfe:	461d      	mov	r5, r3
 8000e00:	7c7b      	ldrb	r3, [r7, #17]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fb86 	bl	8000514 <__aeabi_i2d>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	4629      	mov	r1, r5
 8000e10:	f7ff fbea 	bl	80005e8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fdf6 	bl	8000a0c <__aeabi_d2f>
 8000e20:	4603      	mov	r3, r0
 8000e22:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8000e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e26:	f7ff fb75 	bl	8000514 <__aeabi_i2d>
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <animate_led_fade_in_fade_out+0x280>)
 8000e30:	f7ff fd04 	bl	800083c <__aeabi_ddiv>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4614      	mov	r4, r2
 8000e3a:	461d      	mov	r5, r3
 8000e3c:	7cbb      	ldrb	r3, [r7, #18]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb68 	bl	8000514 <__aeabi_i2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4620      	mov	r0, r4
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	f7ff fbcc 	bl	80005e8 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f7ff fdd8 	bl	8000a0c <__aeabi_d2f>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8000e60:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e68:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e6c:	793b      	ldrb	r3, [r7, #4]
 8000e6e:	b2d9      	uxtb	r1, r3
 8000e70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e78:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e88:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	89f8      	ldrh	r0, [r7, #14]
 8000e92:	f7ff fe6d 	bl	8000b70 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	3301      	adds	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	f77f af70 	ble.w	8000d84 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8000ea4:	23ff      	movs	r3, #255	; 0xff
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	e08a      	b.n	8000fc0 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8000eaa:	f000 fcc3 	bl	8001834 <task_button_press_interrupt_occurred>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00d      	beq.n	8000ed0 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	1c9a      	adds	r2, r3, #2
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	1c59      	adds	r1, r3, #1
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fd19 	bl	80018fc <task_button_press_check_interrupts>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d17e      	bne.n	8000fce <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8000ed0:	6a38      	ldr	r0, [r7, #32]
 8000ed2:	f7ff fb1f 	bl	8000514 <__aeabi_i2d>
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <animate_led_fade_in_fade_out+0x280>)
 8000edc:	f7ff fcae 	bl	800083c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4614      	mov	r4, r2
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	7c3b      	ldrb	r3, [r7, #16]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fb12 	bl	8000514 <__aeabi_i2d>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	f7ff fb76 	bl	80005e8 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fd82 	bl	8000a0c <__aeabi_d2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8000f0c:	6a38      	ldr	r0, [r7, #32]
 8000f0e:	f7ff fb01 	bl	8000514 <__aeabi_i2d>
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <animate_led_fade_in_fade_out+0x280>)
 8000f18:	f7ff fc90 	bl	800083c <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4614      	mov	r4, r2
 8000f22:	461d      	mov	r5, r3
 8000f24:	7c7b      	ldrb	r3, [r7, #17]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_i2d>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fb58 	bl	80005e8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fd64 	bl	8000a0c <__aeabi_d2f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8000f48:	6a38      	ldr	r0, [r7, #32]
 8000f4a:	f7ff fae3 	bl	8000514 <__aeabi_i2d>
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <animate_led_fade_in_fade_out+0x280>)
 8000f54:	f7ff fc72 	bl	800083c <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	461d      	mov	r5, r3
 8000f60:	7cbb      	ldrb	r3, [r7, #18]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fad6 	bl	8000514 <__aeabi_i2d>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	4629      	mov	r1, r5
 8000f70:	f7ff fb3a 	bl	80005e8 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fd46 	bl	8000a0c <__aeabi_d2f>
 8000f80:	4603      	mov	r3, r0
 8000f82:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8000f84:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f90:	793b      	ldrb	r3, [r7, #4]
 8000f92:	b2d9      	uxtb	r1, r3
 8000f94:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fa0:	793b      	ldrb	r3, [r7, #4]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fac:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	89f8      	ldrh	r0, [r7, #14]
 8000fb6:	f7ff fddb 	bl	8000b70 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	3b02      	subs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f6bf af71 	bge.w	8000eaa <animate_led_fade_in_fade_out+0x14e>
 8000fc8:	e002      	b.n	8000fd0 <animate_led_fade_in_fade_out+0x274>
                return;
 8000fca:	bf00      	nop
 8000fcc:	e000      	b.n	8000fd0 <animate_led_fade_in_fade_out+0x274>
                return;
 8000fce:	bf00      	nop
    }
}
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800b76c 	.word	0x0800b76c
 8000fdc:	40700000 	.word	0x40700000

08000fe0 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	ed2d 8b02 	vpush	{d8}
 8000fe6:	b08b      	sub	sp, #44	; 0x2c
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	81fb      	strh	r3, [r7, #14]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	81bb      	strh	r3, [r7, #12]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 f922 	bl	8002248 <ws2812_led_get_max_strip_size>
 8001004:	4603      	mov	r3, r0
 8001006:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <animate_led_twinkle+0xe4>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	82bb      	strh	r3, [r7, #20]
 800100e:	2300      	movs	r3, #0
 8001010:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f000 fb7d 	bl	8001718 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e043      	b.n	80010ac <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 8001024:	f000 fc06 	bl	8001834 <task_button_press_interrupt_occurred>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00d      	beq.n	800104a <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	1c9a      	adds	r2, r3, #2
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	1c59      	adds	r1, r3, #1
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fc5c 	bl	80018fc <task_button_press_check_interrupts>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d135      	bne.n	80010b6 <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 800104a:	8b7b      	ldrh	r3, [r7, #26]
 800104c:	4619      	mov	r1, r3
 800104e:	2000      	movs	r0, #0
 8001050:	f008 fd7d 	bl	8009b4e <random_num>
 8001054:	4603      	mov	r3, r0
 8001056:	b299      	uxth	r1, r3
 8001058:	7d3a      	ldrb	r2, [r7, #20]
 800105a:	7d7c      	ldrb	r4, [r7, #21]
 800105c:	7dbb      	ldrb	r3, [r7, #22]
 800105e:	89f8      	ldrh	r0, [r7, #14]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4623      	mov	r3, r4
 8001064:	f7ff fd2f 	bl	8000ac6 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd1e 	bl	8000aac <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800107a:	f000 ffa5 	bl	8001fc8 <task_led_ctrl_speed>
 800107e:	eeb0 7a40 	vmov.f32	s14, s0
 8001082:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108a:	ee17 0a90 	vmov	r0, s15
 800108e:	f000 fe71 	bl	8001d74 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 8001092:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <animate_led_twinkle+0xc6>
 800109a:	89f8      	ldrh	r0, [r7, #14]
 800109c:	2300      	movs	r3, #0
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	f7ff fd65 	bl	8000b70 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbb7      	blt.n	8001024 <animate_led_twinkle+0x44>
 80010b4:	e000      	b.n	80010b8 <animate_led_twinkle+0xd8>
                return;
 80010b6:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	ecbd 8b02 	vpop	{d8}
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800b76c 	.word	0x0800b76c

080010c8 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	ed2d 8b02 	vpush	{d8}
 80010ce:	b08b      	sub	sp, #44	; 0x2c
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	460b      	mov	r3, r1
 80010d8:	717b      	strb	r3, [r7, #5]
 80010da:	4613      	mov	r3, r2
 80010dc:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80010de:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <animate_led_sparkle_only_random_color+0x120>)
 80010e0:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f8af 	bl	8002248 <ws2812_led_get_max_strip_size>
 80010ea:	4603      	mov	r3, r0
 80010ec:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f889 	bl	8002208 <ws2812_get_num_active_animation_leds>
 80010f6:	4603      	mov	r3, r0
 80010f8:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	83fb      	strh	r3, [r7, #30]
 80010fe:	e059      	b.n	80011b4 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001100:	f000 fb98 	bl	8001834 <task_button_press_interrupt_occurred>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <animate_led_sparkle_only_random_color+0x5a>
 800110a:	f107 020d 	add.w	r2, r7, #13
 800110e:	f107 010e 	add.w	r1, r7, #14
 8001112:	f107 030f 	add.w	r3, r7, #15
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbf0 	bl	80018fc <task_button_press_check_interrupts>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d15c      	bne.n	80011dc <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 8001122:	8afb      	ldrh	r3, [r7, #22]
 8001124:	4619      	mov	r1, r3
 8001126:	2000      	movs	r0, #0
 8001128:	f008 fd11 	bl	8009b4e <random_num>
 800112c:	4603      	mov	r3, r0
 800112e:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	b29c      	uxth	r4, r3
 8001134:	21ff      	movs	r1, #255	; 0xff
 8001136:	2000      	movs	r0, #0
 8001138:	f008 fd09 	bl	8009b4e <random_num>
 800113c:	4603      	mov	r3, r0
 800113e:	b2dd      	uxtb	r5, r3
 8001140:	21ff      	movs	r1, #255	; 0xff
 8001142:	2000      	movs	r0, #0
 8001144:	f008 fd03 	bl	8009b4e <random_num>
 8001148:	4603      	mov	r3, r0
 800114a:	b2de      	uxtb	r6, r3
 800114c:	21ff      	movs	r1, #255	; 0xff
 800114e:	2000      	movs	r0, #0
 8001150:	f008 fcfd 	bl	8009b4e <random_num>
 8001154:	4603      	mov	r3, r0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	88f8      	ldrh	r0, [r7, #6]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4633      	mov	r3, r6
 800115e:	462a      	mov	r2, r5
 8001160:	4621      	mov	r1, r4
 8001162:	f7ff fcb0 	bl	8000ac6 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fc9f 	bl	8000aac <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001178:	f000 ff26 	bl	8001fc8 <task_led_ctrl_speed>
 800117c:	eeb0 7a40 	vmov.f32	s14, s0
 8001180:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f000 fdf2 	bl	8001d74 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <animate_led_sparkle_only_random_color+0xe6>
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	b299      	uxth	r1, r3
 80011a0:	88f8      	ldrh	r0, [r7, #6]
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2200      	movs	r2, #0
 80011aa:	f7ff fc8c 	bl	8000ac6 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80011ae:	8bfb      	ldrh	r3, [r7, #30]
 80011b0:	3301      	adds	r3, #1
 80011b2:	83fb      	strh	r3, [r7, #30]
 80011b4:	8bfb      	ldrh	r3, [r7, #30]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	8abb      	ldrh	r3, [r7, #20]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d492      	bmi.n	8001100 <animate_led_sparkle_only_random_color+0x38>
 80011da:	e000      	b.n	80011de <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80011dc:	bf00      	nop
	}
}
 80011de:	3724      	adds	r7, #36	; 0x24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	ecbd 8b02 	vpop	{d8}
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e8:	3f333333 	.word	0x3f333333

080011ec <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	ed2d 8b02 	vpush	{d8}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	4603      	mov	r3, r0
 80011f8:	460a      	mov	r2, r1
 80011fa:	80fb      	strh	r3, [r7, #6]
 80011fc:	4613      	mov	r3, r2
 80011fe:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f001 f820 	bl	8002248 <ws2812_led_get_max_strip_size>
 8001208:	4603      	mov	r3, r0
 800120a:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 0; jjj < 256 * 5; jjj++)
 800120c:	2300      	movs	r3, #0
 800120e:	82bb      	strh	r3, [r7, #20]
 8001210:	e06c      	b.n	80012ec <animate_led_rainbow_cycle+0x100>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001212:	f000 fb0f 	bl	8001834 <task_button_press_interrupt_occurred>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <animate_led_rainbow_cycle+0x48>
 800121c:	f107 0209 	add.w	r2, r7, #9
 8001220:	f107 010a 	add.w	r1, r7, #10
 8001224:	f107 030b 	add.w	r3, r7, #11
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fb67 	bl	80018fc <task_button_press_check_interrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d160      	bne.n	80012f6 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 8001234:	2300      	movs	r3, #0
 8001236:	82fb      	strh	r3, [r7, #22]
 8001238:	e02f      	b.n	800129a <animate_led_rainbow_cycle+0xae>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800123a:	f000 fafb 	bl	8001834 <task_button_press_interrupt_occurred>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <animate_led_rainbow_cycle+0x70>
 8001244:	f107 0209 	add.w	r2, r7, #9
 8001248:	f107 010a 	add.w	r1, r7, #10
 800124c:	f107 030b 	add.w	r3, r7, #11
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fb53 	bl	80018fc <task_button_press_check_interrupts>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d14e      	bne.n	80012fa <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 800125c:	8afb      	ldrh	r3, [r7, #22]
 800125e:	021a      	lsls	r2, r3, #8
 8001260:	8a7b      	ldrh	r3, [r7, #18]
 8001262:	fb92 f3f3 	sdiv	r3, r2, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	8abb      	ldrh	r3, [r7, #20]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4413      	add	r3, r2
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f849 	bl	8001308 <animate_led_wheel>
 8001276:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	781c      	ldrb	r4, [r3, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3302      	adds	r3, #2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	8af9      	ldrh	r1, [r7, #22]
 800128a:	88f8      	ldrh	r0, [r7, #6]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4623      	mov	r3, r4
 8001290:	f7ff fc19 	bl	8000ac6 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001294:	8afb      	ldrh	r3, [r7, #22]
 8001296:	3301      	adds	r3, #1
 8001298:	82fb      	strh	r3, [r7, #22]
 800129a:	8afa      	ldrh	r2, [r7, #22]
 800129c:	8a7b      	ldrh	r3, [r7, #18]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3cb      	bcc.n	800123a <animate_led_rainbow_cycle+0x4e>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fc01 	bl	8000aac <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 80012aa:	f000 fe8d 	bl	8001fc8 <task_led_ctrl_speed>
 80012ae:	eef0 7a40 	vmov.f32	s15, s0
 80012b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d103      	bne.n	80012c4 <animate_led_rainbow_cycle+0xd8>
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 fd59 	bl	8001d74 <task_led_ctrl_delay>
 80012c2:	e010      	b.n	80012e6 <animate_led_rainbow_cycle+0xfa>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80012ce:	f000 fe7b 	bl	8001fc8 <task_led_ctrl_speed>
 80012d2:	eeb0 7a40 	vmov.f32	s14, s0
 80012d6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80012da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012de:	ee17 0a90 	vmov	r0, s15
 80012e2:	f000 fd47 	bl	8001d74 <task_led_ctrl_delay>
    for (jjj = 0; jjj < 256 * 5; jjj++)
 80012e6:	8abb      	ldrh	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	82bb      	strh	r3, [r7, #20]
 80012ec:	8abb      	ldrh	r3, [r7, #20]
 80012ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012f2:	d38e      	bcc.n	8001212 <animate_led_rainbow_cycle+0x26>
 80012f4:	e002      	b.n	80012fc <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012fa:	bf00      	nop
    }
}
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	ecbd 8b02 	vpop	{d8}
 8001304:	bd90      	pop	{r4, r7, pc}
	...

08001308 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b54      	cmp	r3, #84	; 0x54
 8001316:	d813      	bhi.n	8001340 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	461a      	mov	r2, r3
 800131c:	0052      	lsls	r2, r2, #1
 800131e:	4413      	add	r3, r2
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <animate_led_wheel+0xa8>)
 8001324:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	461a      	mov	r2, r3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <animate_led_wheel+0xa8>)
 8001336:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <animate_led_wheel+0xa8>)
 800133a:	2200      	movs	r2, #0
 800133c:	709a      	strb	r2, [r3, #2]
 800133e:	e02f      	b.n	80013a0 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2ba9      	cmp	r3, #169	; 0xa9
 8001344:	d816      	bhi.n	8001374 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	3b55      	subs	r3, #85	; 0x55
 800134a:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	461a      	mov	r2, r3
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <animate_led_wheel+0xa8>)
 800135c:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <animate_led_wheel+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	461a      	mov	r2, r3
 8001368:	0052      	lsls	r2, r2, #1
 800136a:	4413      	add	r3, r2
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <animate_led_wheel+0xa8>)
 8001370:	709a      	strb	r2, [r3, #2]
 8001372:	e015      	b.n	80013a0 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3356      	adds	r3, #86	; 0x56
 8001378:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <animate_led_wheel+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	461a      	mov	r2, r3
 8001384:	0052      	lsls	r2, r2, #1
 8001386:	4413      	add	r3, r2
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <animate_led_wheel+0xa8>)
 800138c:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	461a      	mov	r2, r3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <animate_led_wheel+0xa8>)
 800139e:	709a      	strb	r2, [r3, #2]
    }
    return c;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <animate_led_wheel+0xa8>)
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200000a0 	.word	0x200000a0

080013b4 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	ed2d 8b02 	vpush	{d8}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af02      	add	r7, sp, #8
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	80fb      	strh	r3, [r7, #6]
 80013c4:	4613      	mov	r3, r2
 80013c6:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 ff3c 	bl	8002248 <ws2812_led_get_max_strip_size>
 80013d0:	4603      	mov	r3, r0
 80013d2:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <animate_led_theater_chase+0x138>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	813b      	strh	r3, [r7, #8]
 80013da:	2300      	movs	r3, #0
 80013dc:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f000 f997 	bl	8001718 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e071      	b.n	80014d4 <animate_led_theater_chase+0x120>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	e068      	b.n	80014c8 <animate_led_theater_chase+0x114>
        {
            if (task_button_press_interrupt_occurred())
 80013f6:	f000 fa1d 	bl	8001834 <task_button_press_interrupt_occurred>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00d      	beq.n	800141c <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	1c9a      	adds	r2, r3, #2
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	1c59      	adds	r1, r3, #1
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fa73 	bl	80018fc <task_button_press_check_interrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d15f      	bne.n	80014dc <animate_led_theater_chase+0x128>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00c      	b.n	800143c <animate_led_theater_chase+0x88>
            {
                animate_led_set_pixel(mask_theater_chase, iii,
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	b299      	uxth	r1, r3
 8001426:	7a3a      	ldrb	r2, [r7, #8]
 8001428:	7a7c      	ldrb	r4, [r7, #9]
 800142a:	7abb      	ldrb	r3, [r7, #10]
 800142c:	88f8      	ldrh	r0, [r7, #6]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4623      	mov	r3, r4
 8001432:	f7ff fb48 	bl	8000ac6 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3303      	adds	r3, #3
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	89fb      	ldrh	r3, [r7, #14]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbee      	blt.n	8001422 <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb30 	bl	8000aac <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 800144c:	f000 f9f2 	bl	8001834 <task_button_press_interrupt_occurred>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00d      	beq.n	8001472 <animate_led_theater_chase+0xbe>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	1c9a      	adds	r2, r3, #2
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fa48 	bl	80018fc <task_button_press_check_interrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d136      	bne.n	80014e0 <animate_led_theater_chase+0x12c>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800147c:	f000 fda4 	bl	8001fc8 <task_led_ctrl_speed>
 8001480:	eeb0 7a40 	vmov.f32	s14, s0
 8001484:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148c:	ee17 0a90 	vmov	r0, s15
 8001490:	f000 fc70 	bl	8001d74 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn everty third pixel off
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e00f      	b.n	80014ba <animate_led_theater_chase+0x106>
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	b29a      	uxth	r2, r3
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	b299      	uxth	r1, r3
 80014a6:	88f8      	ldrh	r0, [r7, #6]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	2200      	movs	r2, #0
 80014b0:	f7ff fb09 	bl	8000ac6 <animate_led_set_pixel>
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3303      	adds	r3, #3
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	89fb      	ldrh	r3, [r7, #14]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbeb      	blt.n	800149a <animate_led_theater_chase+0xe6>
        for (int qqq = 0; qqq < 3; qqq++)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	dd93      	ble.n	80013f6 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b09      	cmp	r3, #9
 80014d8:	dd8a      	ble.n	80013f0 <animate_led_theater_chase+0x3c>
 80014da:	e002      	b.n	80014e2 <animate_led_theater_chase+0x12e>
                    return;
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <animate_led_theater_chase+0x12e>
                    return;
 80014e0:	bf00      	nop
        }
    }
}
 80014e2:	3724      	adds	r7, #36	; 0x24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	ecbd 8b02 	vpop	{d8}
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	0800b76c 	.word	0x0800b76c

080014f0 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	ed2d 8b02 	vpush	{d8}
 80014f6:	b08d      	sub	sp, #52	; 0x34
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	80fb      	strh	r3, [r7, #6]
 8001500:	4613      	mov	r3, r2
 8001502:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fe9e 	bl	8002248 <ws2812_led_get_max_strip_size>
 800150c:	4603      	mov	r3, r0
 800150e:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
 8001514:	e08a      	b.n	800162c <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	e080      	b.n	800161e <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800151c:	f000 f98a 	bl	8001834 <task_button_press_interrupt_occurred>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <animate_led_theater_chase_rainbow+0x4e>
 8001526:	f107 020d 	add.w	r2, r7, #13
 800152a:	f107 010e 	add.w	r1, r7, #14
 800152e:	f107 030f 	add.w	r3, r7, #15
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f9e2 	bl	80018fc <task_button_press_check_interrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d17b      	bne.n	8001636 <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e039      	b.n	80015b8 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001544:	f000 f976 	bl	8001834 <task_button_press_interrupt_occurred>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <animate_led_theater_chase_rainbow+0x76>
 800154e:	f107 020d 	add.w	r2, r7, #13
 8001552:	f107 010e 	add.w	r1, r7, #14
 8001556:	f107 030f 	add.w	r3, r7, #15
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f9ce 	bl	80018fc <task_button_press_check_interrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d169      	bne.n	800163a <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	441a      	add	r2, r3
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <animate_led_theater_chase_rainbow+0x158>)
 800156e:	fb83 1302 	smull	r1, r3, r3, r2
 8001572:	4413      	add	r3, r2
 8001574:	11d9      	asrs	r1, r3, #7
 8001576:	17d3      	asrs	r3, r2, #31
 8001578:	1ac9      	subs	r1, r1, r3
 800157a:	460b      	mov	r3, r1
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	1a5b      	subs	r3, r3, r1
 8001580:	1ad1      	subs	r1, r2, r3
 8001582:	b2cb      	uxtb	r3, r1
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff febf 	bl	8001308 <animate_led_wheel>
 800158a:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	b29a      	uxth	r2, r3
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b299      	uxth	r1, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	3301      	adds	r3, #1
 80015a0:	781c      	ldrb	r4, [r3, #0]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	3302      	adds	r3, #2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	88f8      	ldrh	r0, [r7, #6]
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4623      	mov	r3, r4
 80015ae:	f7ff fa8a 	bl	8000ac6 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3303      	adds	r3, #3
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	8afb      	ldrh	r3, [r7, #22]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbc1      	blt.n	8001544 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fa72 	bl	8000aac <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80015d2:	f000 fcf9 	bl	8001fc8 <task_led_ctrl_speed>
 80015d6:	eeb0 7a40 	vmov.f32	s14, s0
 80015da:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80015de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e2:	ee17 0a90 	vmov	r0, s15
 80015e6:	f000 fbc5 	bl	8001d74 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	e00f      	b.n	8001610 <animate_led_theater_chase_rainbow+0x120>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b299      	uxth	r1, r3
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2200      	movs	r2, #0
 8001606:	f7ff fa5e 	bl	8000ac6 <animate_led_set_pixel>
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	3303      	adds	r3, #3
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbeb      	blt.n	80015f0 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	3301      	adds	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	2b02      	cmp	r3, #2
 8001622:	f77f af7b 	ble.w	800151c <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	f77f af71 	ble.w	8001516 <animate_led_theater_chase_rainbow+0x26>
 8001634:	e002      	b.n	800163c <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001636:	bf00      	nop
 8001638:	e000      	b.n	800163c <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800163a:	bf00      	nop
        }
    }
}
 800163c:	372c      	adds	r7, #44	; 0x2c
 800163e:	46bd      	mov	sp, r7
 8001640:	ecbd 8b02 	vpop	{d8}
 8001644:	bd90      	pop	{r4, r7, pc}
 8001646:	bf00      	nop
 8001648:	80808081 	.word	0x80808081

0800164c <color_led_init>:

color_hex_code_e g_color_hex_codes[NUM_COLORS];


void color_led_init(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
    // initialize color arrays
    g_color_hex_codes[COLORS_RED] = COLOR_HEX_RED;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <color_led_init+0xa0>)
 8001652:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001656:	601a      	str	r2, [r3, #0]
    g_color_hex_codes[COLORS_LIME] = COLOR_HEX_LIME;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <color_led_init+0xa0>)
 800165a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800165e:	605a      	str	r2, [r3, #4]
    g_color_hex_codes[COLORS_BLUE] = COLOR_HEX_BLUE;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <color_led_init+0xa0>)
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	609a      	str	r2, [r3, #8]
    g_color_hex_codes[COLORS_YELLOW] = COLOR_HEX_YELLOW;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <color_led_init+0xa0>)
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <color_led_init+0xa4>)
 800166a:	60da      	str	r2, [r3, #12]
    g_color_hex_codes[COLORS_CYAN] = COLOR_HEX_CYAN;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <color_led_init+0xa0>)
 800166e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001672:	611a      	str	r2, [r3, #16]
    g_color_hex_codes[COLORS_MAGENTA] = COLOR_HEX_MAGENTA;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <color_led_init+0xa0>)
 8001676:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 800167a:	615a      	str	r2, [r3, #20]
    g_color_hex_codes[COLORS_GREEN] = COLOR_HEX_GREEN;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <color_led_init+0xa0>)
 800167e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001682:	619a      	str	r2, [r3, #24]
    g_color_hex_codes[COLORS_PURPLE] = COLOR_HEX_PURPLE;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <color_led_init+0xa0>)
 8001686:	f04f 1280 	mov.w	r2, #8388736	; 0x800080
 800168a:	61da      	str	r2, [r3, #28]
    g_color_hex_codes[COLORS_TEAL] = COLOR_HEX_TEAL;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <color_led_init+0xa0>)
 800168e:	f248 0280 	movw	r2, #32896	; 0x8080
 8001692:	621a      	str	r2, [r3, #32]
    g_color_hex_codes[COLORS_NAVY] = COLOR_HEX_NAVY;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <color_led_init+0xa0>)
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
    g_color_hex_codes[COLORS_ORANGE_RED] = COLOR_HEX_ORANGE_RED;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <color_led_init+0xa0>)
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <color_led_init+0xa8>)
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
    g_color_hex_codes[COLORS_ORANGE] = COLOR_HEX_ORANGE;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <color_led_init+0xa0>)
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <color_led_init+0xac>)
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
    g_color_hex_codes[COLORS_KHAKI] = COLOR_HEX_KHAKI;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <color_led_init+0xa0>)
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <color_led_init+0xb0>)
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
    g_color_hex_codes[COLORS_LAWN_GREEN] = COLOR_HEX_LAWN_GREEN;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <color_led_init+0xa0>)
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <color_led_init+0xb4>)
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
    g_color_hex_codes[COLORS_SPRING_GREEN] = COLOR_HEX_SPRING_GREEN;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <color_led_init+0xa0>)
 80016b4:	f64f 727f 	movw	r2, #65407	; 0xff7f
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
    g_color_hex_codes[COLORS_MIDNIGHT_BLUE] = COLOR_HEX_MIDNIGHT_BLUE;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <color_led_init+0xa0>)
 80016bc:	4a11      	ldr	r2, [pc, #68]	; (8001704 <color_led_init+0xb8>)
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
    g_color_hex_codes[COLORS_BLUE_VIOLET] = COLOR_HEX_BLUE_VIOLET;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <color_led_init+0xa0>)
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <color_led_init+0xbc>)
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
    g_color_hex_codes[COLORS_DARK_MAGENTA] = COLOR_HEX_DARK_MAGENTA;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <color_led_init+0xa0>)
 80016c8:	f04f 128b 	mov.w	r2, #9109643	; 0x8b008b
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
    g_color_hex_codes[COLORS_HOT_PINK] = COLOR_HEX_HOT_PINK;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <color_led_init+0xa0>)
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <color_led_init+0xc0>)
 80016d2:	649a      	str	r2, [r3, #72]	; 0x48
    g_color_hex_codes[COLORS_MINT] = COLOR_HEX_MINT;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <color_led_init+0xa0>)
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <color_led_init+0xc4>)
 80016d8:	64da      	str	r2, [r3, #76]	; 0x4c
    //g_color_hex_codes[COLORS_GRAY] = COLOR_HEX_GRAY;
    g_color_hex_codes[COLORS_BROWN] = COLOR_HEX_BROWN;
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <color_led_init+0xa0>)
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <color_led_init+0xc8>)
 80016de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200000a4 	.word	0x200000a4
 80016f0:	00ffff00 	.word	0x00ffff00
 80016f4:	00ff4500 	.word	0x00ff4500
 80016f8:	00ffa500 	.word	0x00ffa500
 80016fc:	00f0e68c 	.word	0x00f0e68c
 8001700:	007cfc00 	.word	0x007cfc00
 8001704:	00191970 	.word	0x00191970
 8001708:	008a2be2 	.word	0x008a2be2
 800170c:	00ff69b4 	.word	0x00ff69b4
 8001710:	004ebd88 	.word	0x004ebd88
 8001714:	00a52a2a 	.word	0x00a52a2a

08001718 <color_led_hex_to_rgb>:


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3302      	adds	r3, #2
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <current_monitor_ratio>:
float g_max_current_ratio = 1.0;
p_current_t gp_current_monitor_strip[NUM_STRIPS];


float current_monitor_ratio(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <current_monitor_ratio+0x18>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	ee07 3a90 	vmov	s15, r3
}
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20000000 	.word	0x20000000

08001764 <current_monitor_init>:


void current_monitor_init(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8001768:	e009      	b.n	800177e <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <current_monitor_init+0x5c>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80017c4 <current_monitor_init+0x60>
 8001774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <current_monitor_init+0x5c>)
 800177a:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <current_monitor_init+0x5c>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80017c8 <current_monitor_init+0x64>
 8001788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80017cc <current_monitor_init+0x68>
 8001790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001794:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	dce3      	bgt.n	800176a <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <current_monitor_init+0x5c>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d900      	bls.n	80017b4 <current_monitor_init+0x50>
    //g_max_current_ratio = 1.0f;
}
 80017b2:	e000      	b.n	80017b6 <current_monitor_init+0x52>
    if (g_max_current_ratio <= 0) while(1); // broken..
 80017b4:	e7fe      	b.n	80017b4 <current_monitor_init+0x50>
}
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000000 	.word	0x20000000
 80017c4:	3d4ccccd 	.word	0x3d4ccccd
 80017c8:	3d23d70a 	.word	0x3d23d70a
 80017cc:	43480000 	.word	0x43480000

080017d0 <semaphore_create>:
SemaphoreHandle_t g_dma_fill_semaphore;
StaticSemaphore_t g_dma_fill_semaphore_buffer;


void semaphore_create(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af02      	add	r7, sp, #8
    g_dma_transfer_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_transfer_semaphore_buffer);
 80017d6:	2303      	movs	r3, #3
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <semaphore_create+0x54>)
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2001      	movs	r0, #1
 80017e2:	f001 fa69 	bl	8002cb8 <xQueueGenericCreateStatic>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <semaphore_create+0x58>)
 80017ea:	6013      	str	r3, [r2, #0]
    g_dma_fill_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_fill_semaphore_buffer);
 80017ec:	2303      	movs	r3, #3
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <semaphore_create+0x5c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2001      	movs	r0, #1
 80017f8:	f001 fa5e 	bl	8002cb8 <xQueueGenericCreateStatic>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <semaphore_create+0x60>)
 8001800:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(g_dma_transfer_semaphore);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <semaphore_create+0x58>)
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	f001 faf0 	bl	8002df0 <xQueueGenericSend>
    xSemaphoreGive(g_dma_fill_semaphore);
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <semaphore_create+0x60>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	f001 fae9 	bl	8002df0 <xQueueGenericSend>
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200000fc 	.word	0x200000fc
 8001828:	200000f8 	.word	0x200000f8
 800182c:	20000150 	.word	0x20000150
 8001830:	2000014c 	.word	0x2000014c

08001834 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <task_button_press_interrupt_occurred+0x14>)
 800183a:	781b      	ldrb	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200001c3 	.word	0x200001c3

0800184c <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d817      	bhi.n	800188c <task_led_ctrl_button_to_isr+0x40>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <task_led_ctrl_button_to_isr+0x18>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	08001875 	.word	0x08001875
 8001868:	0800187b 	.word	0x0800187b
 800186c:	08001881 	.word	0x08001881
 8001870:	08001887 	.word	0x08001887
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
        break;
 8001878:	e009      	b.n	800188e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
        break;
 800187e:	e006      	b.n	800188e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001880:	2302      	movs	r3, #2
 8001882:	73fb      	strb	r3, [r7, #15]
        break;
 8001884:	e003      	b.n	800188e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001886:	2303      	movs	r3, #3
 8001888:	73fb      	strb	r3, [r7, #15]
        break;
 800188a:	e000      	b.n	800188e <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 800188c:	bf00      	nop
    }
    return return_val;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	54d1      	strb	r1, [r2, r3]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	200001c3 	.word	0x200001c3
 80018c4:	200001c4 	.word	0x200001c4

080018c8 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <task_button_press_ctrl_interrupt_flag+0x30>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <task_button_press_ctrl_interrupt_flag+0x20>
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <task_button_press_ctrl_interrupt_flag+0x30>)
 80018e4:	2100      	movs	r1, #0
 80018e6:	54d1      	strb	r1, [r2, r3]
    return return_val;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200001c4 	.word	0x200001c4

080018fc <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8001908:	2300      	movs	r3, #0
 800190a:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff ffdb 	bl	80018c8 <task_button_press_ctrl_interrupt_flag>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <task_button_press_check_interrupts+0x2e>
    {
        task_button_press_interrupt_flag_clear();
 8001918:	f000 f83a 	bl	8001990 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800191c:	2301      	movs	r3, #1
 800191e:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001920:	2100      	movs	r1, #0
 8001922:	2001      	movs	r0, #1
 8001924:	f7ff f98e 	bl	8000c44 <animate_led_solid_custom_color>
 8001928:	e02a      	b.n	8001980 <task_button_press_check_interrupts+0x84>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 800192a:	2003      	movs	r0, #3
 800192c:	f7ff ffcc 	bl	80018c8 <task_button_press_ctrl_interrupt_flag>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <task_button_press_check_interrupts+0x50>
    {
        task_button_press_interrupt_flag_clear();
 8001936:	f000 f82b 	bl	8001990 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 800193a:	e002      	b.n	8001942 <task_button_press_check_interrupts+0x46>
        {
            osDelay(10);
 800193c:	200a      	movs	r0, #10
 800193e:	f001 f84f 	bl	80029e0 <osDelay>
        while (g_animate_led_pause_flag)
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <task_button_press_check_interrupts+0x90>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f8      	bne.n	800193c <task_button_press_check_interrupts+0x40>
 800194a:	e019      	b.n	8001980 <task_button_press_check_interrupts+0x84>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff ffbb 	bl	80018c8 <task_button_press_ctrl_interrupt_flag>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <task_button_press_check_interrupts+0x84>
    {
        task_button_press_interrupt_flag_clear();
 8001958:	f000 f81a 	bl	8001990 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 800195c:	f000 fa98 	bl	8001e90 <task_led_ctrl_color_red_hex>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8001968:	f000 faba 	bl	8001ee0 <task_led_ctrl_color_green_hex>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8001974:	f000 fadc 	bl	8001f30 <task_led_ctrl_color_blue_hex>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8001980:	7dfb      	ldrb	r3, [r7, #23]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001c2 	.word	0x200001c2

08001990 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <task_button_press_interrupt_flag_clear+0x14>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	200001c3 	.word	0x200001c3

080019a8 <task_button_press>:


void task_button_press(void *argument)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	f107 0208 	add.w	r2, r7, #8
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ca:	2000      	movs	r0, #0
 80019cc:	f002 fed6 	bl	800477c <xTaskNotifyWait>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_PREVIOUS];
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <task_button_press+0x1dc>)
 80019d8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80019dc:	4b69      	ldr	r3, [pc, #420]	; (8001b84 <task_button_press+0x1dc>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff > SWITCH_DEBOUNCE_TIME_MILLISECONDS)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2bc8      	cmp	r3, #200	; 0xc8
 80019e8:	d916      	bls.n	8001a18 <task_button_press+0x70>
        {
            if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019f0:	d206      	bcs.n	8001a00 <task_button_press+0x58>
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <task_button_press+0x1e0>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <task_button_press+0x1e0>)
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e002      	b.n	8001a06 <task_button_press+0x5e>
            else fast_press_count = 0;
 8001a00:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <task_button_press+0x1e0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff1e 	bl	800184c <task_led_ctrl_button_to_isr>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff42 	bl	800189c <task_button_press_ctrl_set_interrupt_flag>
        }
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH - 1))
 8001a18:	4b5b      	ldr	r3, [pc, #364]	; (8001b88 <task_button_press+0x1e0>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d959      	bls.n	8001ad4 <task_button_press+0x12c>
        {
            task_button_press_major_change = true;
 8001a20:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <task_button_press+0x1e4>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d828      	bhi.n	8001a80 <task_button_press+0xd8>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <task_button_press+0x8c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a69 	.word	0x08001a69
 8001a40:	08001a77 	.word	0x08001a77
            {
                case PUSH_BUTTON_A:
                    color = COLOR_HEX_GREEN;
 8001a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a48:	617b      	str	r3, [r7, #20]
                    irq_type = EXTI9_5_IRQn;
 8001a4a:	2317      	movs	r3, #23
 8001a4c:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8001a4e:	f000 fb07 	bl	8002060 <task_led_ctrl_speed_reset>
                break;
 8001a52:	e016      	b.n	8001a82 <task_button_press+0xda>
                case PUSH_BUTTON_B:
                    color = COLOR_HEX_RED;
 8001a54:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001a58:	617b      	str	r3, [r7, #20]
                    irq_type = EXTI0_IRQn;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8001a5e:	f000 fb0b 	bl	8002078 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8001a62:	f000 fb33 	bl	80020cc <task_led_ctrl_animate_state_demo>
                break;
 8001a66:	e00c      	b.n	8001a82 <task_button_press+0xda>
                case PUSH_BUTTON_C:
                    color = COLOR_HEX_BLUE;
 8001a68:	23ff      	movs	r3, #255	; 0xff
 8001a6a:	617b      	str	r3, [r7, #20]
                    irq_type = EXTI2_IRQn;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8001a70:	f000 f9c0 	bl	8001df4 <task_led_ctrl_color_state_demo>
                break;
 8001a74:	e005      	b.n	8001a82 <task_button_press+0xda>
                case PUSH_BUTTON_D:
                    color = COLOR_HEX_BLACK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
                    irq_type = EXTI15_10_IRQn;
 8001a7a:	2328      	movs	r3, #40	; 0x28
 8001a7c:	74fb      	strb	r3, [r7, #19]

                break;
 8001a7e:	e000      	b.n	8001a82 <task_button_press+0xda>
                default:
                break;
 8001a80:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	74bb      	strb	r3, [r7, #18]
 8001a86:	e012      	b.n	8001aae <task_button_press+0x106>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff f8da 	bl	8000c44 <animate_led_solid_custom_color>
                osDelay(500);
 8001a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a94:	f000 ffa4 	bl	80029e0 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff f8d2 	bl	8000c44 <animate_led_solid_custom_color>
                osDelay(500);
 8001aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa4:	f000 ff9c 	bl	80029e0 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8001aa8:	7cbb      	ldrb	r3, [r7, #18]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	74bb      	strb	r3, [r7, #18]
 8001aae:	7cbb      	ldrb	r3, [r7, #18]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d9e9      	bls.n	8001a88 <task_button_press+0xe0>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8001ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2118      	movs	r1, #24
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 f9a8 	bl	8005e12 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8001ac2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 f9bf 	bl	8005e4a <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <task_button_press+0x1e4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e775      	b.n	80019c0 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff feb7 	bl	800184c <task_led_ctrl_button_to_isr>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fedb 	bl	800189c <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d848      	bhi.n	8001b80 <task_button_press+0x1d8>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <task_button_press+0x14c>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b1b 	.word	0x08001b1b
 8001afc:	08001b45 	.word	0x08001b45
 8001b00:	08001b6b 	.word	0x08001b6b
            {
                case PUSH_BUTTON_A:
                    task_led_ctrl_speed_adjust();
 8001b04:	f000 fa94 	bl	8002030 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2118      	movs	r1, #24
 8001b0c:	2017      	movs	r0, #23
 8001b0e:	f004 f980 	bl	8005e12 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b12:	2017      	movs	r0, #23
 8001b14:	f004 f999 	bl	8005e4a <HAL_NVIC_EnableIRQ>
                break;
 8001b18:	e033      	b.n	8001b82 <task_button_press+0x1da>
                case PUSH_BUTTON_B:
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8001b1a:	f000 faff 	bl	800211c <task_led_ctrl_animate_state>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <task_button_press+0x182>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8001b24:	f000 fae4 	bl	80020f0 <task_led_ctrl_animate_state_fixed>
 8001b28:	e003      	b.n	8001b32 <task_button_press+0x18a>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8001b2a:	f000 faa5 	bl	8002078 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8001b2e:	f000 faaf 	bl	8002090 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2118      	movs	r1, #24
 8001b36:	2006      	movs	r0, #6
 8001b38:	f004 f96b 	bl	8005e12 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b3c:	2006      	movs	r0, #6
 8001b3e:	f004 f984 	bl	8005e4a <HAL_NVIC_EnableIRQ>
                break;
 8001b42:	e01e      	b.n	8001b82 <task_button_press+0x1da>
                case PUSH_BUTTON_C:
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8001b44:	f000 f94a 	bl	8001ddc <task_led_ctrl_color_state>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <task_button_press+0x1ac>
                    {
                        task_led_ctrl_color_state_fixed();
 8001b4e:	f000 f95d 	bl	8001e0c <task_led_ctrl_color_state_fixed>
 8001b52:	e001      	b.n	8001b58 <task_button_press+0x1b0>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8001b54:	f000 f96c 	bl	8001e30 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2118      	movs	r1, #24
 8001b5c:	2008      	movs	r0, #8
 8001b5e:	f004 f958 	bl	8005e12 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b62:	2008      	movs	r0, #8
 8001b64:	f004 f971 	bl	8005e4a <HAL_NVIC_EnableIRQ>
                break;
 8001b68:	e00b      	b.n	8001b82 <task_button_press+0x1da>
                case PUSH_BUTTON_D:
                    task_led_ctrl_pause();
 8001b6a:	f000 f919 	bl	8001da0 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2118      	movs	r1, #24
 8001b72:	2028      	movs	r0, #40	; 0x28
 8001b74:	f004 f94d 	bl	8005e12 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b78:	2028      	movs	r0, #40	; 0x28
 8001b7a:	f004 f966 	bl	8005e4a <HAL_NVIC_EnableIRQ>
                break;
 8001b7e:	e000      	b.n	8001b82 <task_button_press+0x1da>
                default:
                break;
 8001b80:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8001b82:	e71d      	b.n	80019c0 <task_button_press+0x18>
 8001b84:	200001a0 	.word	0x200001a0
 8001b88:	200001c0 	.word	0x200001c0
 8001b8c:	200001c1 	.word	0x200001c1

08001b90 <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <task_led_ctrl_adjust_parameters+0x74>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <task_led_ctrl_adjust_parameters+0x74>)
 8001baa:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <task_led_ctrl_adjust_parameters+0x78>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d11b      	bne.n	8001bec <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8001bb4:	88bb      	ldrh	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <task_led_ctrl_adjust_parameters+0x32>
 8001bba:	88bb      	ldrh	r3, [r7, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f8d9 	bl	8001d74 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <task_led_ctrl_adjust_parameters+0x74>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d10f      	bne.n	8001bec <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <task_led_ctrl_adjust_parameters+0x7c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <task_led_ctrl_adjust_parameters+0x7c>)
 8001bd6:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <task_led_ctrl_adjust_parameters+0x7c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d102      	bne.n	8001be6 <task_led_ctrl_adjust_parameters+0x56>
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <task_led_ctrl_adjust_parameters+0x7c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <task_led_ctrl_adjust_parameters+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8001bec:	f000 f8f6 	bl	8001ddc <task_led_ctrl_color_state>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <task_led_ctrl_adjust_parameters+0x6a>
 8001bf6:	f000 f9c1 	bl	8001f7c <task_led_ctrl_color_random>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200001c9 	.word	0x200001c9
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	20000005 	.word	0x20000005

08001c10 <task_led_ctrl>:


void task_led_ctrl(void *argument)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	6078      	str	r0, [r7, #4]
    board_init_common_stop_timer();
 8001c18:	f007 ff0c 	bl	8009a34 <board_init_common_stop_timer>
    animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff f810 	bl	8000c44 <animate_led_solid_custom_color>
    osDelay(1000);
 8001c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c28:	f000 feda 	bl	80029e0 <osDelay>
    while (1)
    {
        while(task_button_press_major_change)
 8001c2c:	e002      	b.n	8001c34 <task_led_ctrl+0x24>
        {
            osDelay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f000 fed6 	bl	80029e0 <osDelay>
        while(task_button_press_major_change)
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <task_led_ctrl+0x158>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f8      	bne.n	8001c2e <task_led_ctrl+0x1e>
        }
        switch(g_led_state)
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <task_led_ctrl+0x15c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	f200 808f 	bhi.w	8001d64 <task_led_ctrl+0x154>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <task_led_ctrl+0x3c>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001d4b 	.word	0x08001d4b
 8001c50:	08001c71 	.word	0x08001c71
 8001c54:	08001ca7 	.word	0x08001ca7
 8001c58:	08001cbf 	.word	0x08001cbf
 8001c5c:	08001cd3 	.word	0x08001cd3
 8001c60:	08001ce5 	.word	0x08001ce5
 8001c64:	08001cff 	.word	0x08001cff
 8001c68:	08001d11 	.word	0x08001d11
 8001c6c:	08001d29 	.word	0x08001d29
//                animate_led_only_spell_word(STRIP_BIT_ALL_SET, COLOR_HEX_MINT, 20);
//                animate_led_only_spell_word(STRIP_BIT_ALL_SET, COLOR_HEX_BLACK, 20);
//            break;
            case LED_STATE_SOLID_COLOR:

                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, task_led_ctrl_color_hex());
 8001c70:	f000 f8fc 	bl	8001e6c <task_led_ctrl_color_hex>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4619      	mov	r1, r3
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7fe ffe3 	bl	8000c44 <animate_led_solid_custom_color>
                if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8001c7e:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <task_led_ctrl+0x160>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d109      	bne.n	8001c9a <task_led_ctrl+0x8a>
                {
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8001c86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c8a:	2005      	movs	r0, #5
 8001c8c:	f7ff ff80 	bl	8001b90 <task_led_ctrl_adjust_parameters>
                    task_led_ctrl_delay(1000);
 8001c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c94:	f000 f86e 	bl	8001d74 <task_led_ctrl_delay>
                }
                else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
            break;
 8001c98:	e065      	b.n	8001d66 <task_led_ctrl+0x156>
                else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 8001c9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c9e:	2005      	movs	r0, #5
 8001ca0:	f7ff ff76 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001ca4:	e05f      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_SPARKLE_NO_FILL:
                animate_led_turn_all_pixels_off();
 8001ca6:	f7fe ffef 	bl	8000c88 <animate_led_turn_all_pixels_off>
                animate_led_sparkle_only_random_color(STRIP_BIT_ALL_SET, false, 100);//random(0, 50));
 8001caa:	2264      	movs	r2, #100	; 0x64
 8001cac:	2100      	movs	r1, #0
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff fa0a 	bl	80010c8 <animate_led_sparkle_only_random_color>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2005      	movs	r0, #5
 8001cb8:	f7ff ff6a 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001cbc:	e053      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_SPARKLE_FILL:
                animate_led_sparkle_only_random_color(STRIP_BIT_ALL_SET, true, 100);
 8001cbe:	2264      	movs	r2, #100	; 0x64
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff fa00 	bl	80010c8 <animate_led_sparkle_only_random_color>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	200a      	movs	r0, #10
 8001ccc:	f7ff ff60 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001cd0:	e049      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_RAINBOW_CYCLE:
                animate_led_rainbow_cycle(STRIP_BIT_ALL_SET, 10);
 8001cd2:	210a      	movs	r1, #10
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff fa89 	bl	80011ec <animate_led_rainbow_cycle>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2005      	movs	r0, #5
 8001cde:	f7ff ff57 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001ce2:	e040      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_THEATER_CHASE:
                animate_led_theater_chase(STRIP_BIT_ALL_SET, task_led_ctrl_color_hex(), 20);
 8001ce4:	f000 f8c2 	bl	8001e6c <task_led_ctrl_color_hex>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2214      	movs	r2, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff fb60 	bl	80013b4 <animate_led_theater_chase>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	200a      	movs	r0, #10
 8001cf8:	f7ff ff4a 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001cfc:	e033      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_THEATER_CHASE_RAINBOW:
                animate_led_theater_chase_rainbow(STRIP_BIT_ALL_SET, 20);
 8001cfe:	2114      	movs	r1, #20
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff fbf5 	bl	80014f0 <animate_led_theater_chase_rainbow>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8001d06:	2100      	movs	r1, #0
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f7ff ff41 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001d0e:	e02a      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_FADE_IN_AND_OUT:
                animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_ALL_SET, task_led_ctrl_color_hex());
 8001d10:	f000 f8ac 	bl	8001e6c <task_led_ctrl_color_hex>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4619      	mov	r1, r3
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff f81f 	bl	8000d5c <animate_led_fade_in_fade_out>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	200a      	movs	r0, #10
 8001d22:	f7ff ff35 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001d26:	e01e      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_TWINKLE:
                animate_led_turn_all_pixels_off();
 8001d28:	f7fe ffae 	bl	8000c88 <animate_led_turn_all_pixels_off>
                animate_led_twinkle(STRIP_BIT_ALL_SET, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 8001d2c:	f000 f89e 	bl	8001e6c <task_led_ctrl_color_hex>
 8001d30:	4601      	mov	r1, r0
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2314      	movs	r3, #20
 8001d38:	22b4      	movs	r2, #180	; 0xb4
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff f950 	bl	8000fe0 <animate_led_twinkle>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8001d40:	2100      	movs	r1, #0
 8001d42:	2005      	movs	r0, #5
 8001d44:	f7ff ff24 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001d48:	e00d      	b.n	8001d66 <task_led_ctrl+0x156>
            case LED_STATE_SPELL:
                animate_led_only_spell_word(STRIP_BIT_ALL_SET, task_led_ctrl_color_hex(), 20);
 8001d4a:	f000 f88f 	bl	8001e6c <task_led_ctrl_color_hex>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2214      	movs	r2, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7fe ffa1 	bl	8000c9c <animate_led_only_spell_word>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f7ff ff17 	bl	8001b90 <task_led_ctrl_adjust_parameters>
            break;
 8001d62:	e000      	b.n	8001d66 <task_led_ctrl+0x156>
            default:
            break;
 8001d64:	bf00      	nop
        while(task_button_press_major_change)
 8001d66:	e765      	b.n	8001c34 <task_led_ctrl+0x24>
 8001d68:	200001c1 	.word	0x200001c1
 8001d6c:	20000005 	.word	0x20000005
 8001d70:	20000004 	.word	0x20000004

08001d74 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8001d80:	e002      	b.n	8001d88 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 fe2c 	bl	80029e0 <osDelay>
    while (ms_count++ < time_ms)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60fa      	str	r2, [r7, #12]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f6      	bhi.n	8001d82 <task_led_ctrl_delay+0xe>
    }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <task_led_ctrl_pause+0x34>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <task_led_ctrl_pause+0x14>
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <task_led_ctrl_pause+0x38>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e002      	b.n	8001dba <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <task_led_ctrl_pause+0x38>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <task_led_ctrl_pause+0x34>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	f083 0301 	eor.w	r3, r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <task_led_ctrl_pause+0x34>)
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	200001c2 	.word	0x200001c2

08001ddc <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <task_led_ctrl_color_state+0x14>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	200001c8 	.word	0x200001c8

08001df4 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <task_led_ctrl_color_state_demo+0x14>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	200001c8 	.word	0x200001c8

08001e0c <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <task_led_ctrl_color_state_fixed+0x1c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <task_led_ctrl_color_state_fixed+0x20>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200001c8 	.word	0x200001c8
 8001e2c:	20000007 	.word	0x20000007

08001e30 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
    bool return_val = false;
 8001e36:	2300      	movs	r3, #0
 8001e38:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <task_led_ctrl_color_adjust+0x38>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b14      	cmp	r3, #20
 8001e40:	d105      	bne.n	8001e4e <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <task_led_ctrl_color_adjust+0x38>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	e005      	b.n	8001e5a <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <task_led_ctrl_color_adjust+0x38>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <task_led_ctrl_color_adjust+0x38>)
 8001e58:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	20000007 	.word	0x20000007

08001e6c <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <task_led_ctrl_color_hex+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <task_led_ctrl_color_hex+0x20>)
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000007 	.word	0x20000007
 8001e8c:	200000a4 	.word	0x200000a4

08001e90 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	ed2d 8b02 	vpush	{d8}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <task_led_ctrl_color_red_hex+0x48>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <task_led_ctrl_color_red_hex+0x4c>)
 8001ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001eb2:	f7ff fc49 	bl	8001748 <current_monitor_ratio>
 8001eb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eba:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ec6:	793b      	ldrb	r3, [r7, #4]
 8001ec8:	b2db      	uxtb	r3, r3
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	ecbd 8b02 	vpop	{d8}
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000007 	.word	0x20000007
 8001edc:	200000a4 	.word	0x200000a4

08001ee0 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	ed2d 8b02 	vpush	{d8}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <task_led_ctrl_color_green_hex+0x48>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <task_led_ctrl_color_green_hex+0x4c>)
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001f02:	f7ff fc21 	bl	8001748 <current_monitor_ratio>
 8001f06:	eeb0 7a40 	vmov.f32	s14, s0
 8001f0a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f12:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f16:	793b      	ldrb	r3, [r7, #4]
 8001f18:	b2db      	uxtb	r3, r3
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	ecbd 8b02 	vpop	{d8}
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000007 	.word	0x20000007
 8001f2c:	200000a4 	.word	0x200000a4

08001f30 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	ed2d 8b02 	vpush	{d8}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <task_led_ctrl_color_blue_hex+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <task_led_ctrl_color_blue_hex+0x48>)
 8001f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001f50:	f7ff fbfa 	bl	8001748 <current_monitor_ratio>
 8001f54:	eeb0 7a40 	vmov.f32	s14, s0
 8001f58:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f60:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f64:	793b      	ldrb	r3, [r7, #4]
 8001f66:	b2db      	uxtb	r3, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	ecbd 8b02 	vpop	{d8}
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000007 	.word	0x20000007
 8001f78:	200000a4 	.word	0x200000a4

08001f7c <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 8001f82:	2115      	movs	r1, #21
 8001f84:	2000      	movs	r0, #0
 8001f86:	f007 fde2 	bl	8009b4e <random_num>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <task_led_ctrl_color_random+0x48>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	79fa      	ldrb	r2, [r7, #7]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10e      	bne.n	8001fb6 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	2b14      	cmp	r3, #20
 8001f9c:	d105      	bne.n	8001faa <task_led_ctrl_color_random+0x2e>
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <task_led_ctrl_color_random+0x48>)
 8001fa6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8001fa8:	e008      	b.n	8001fbc <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <task_led_ctrl_color_random+0x48>)
 8001fb2:	701a      	strb	r2, [r3, #0]
}
 8001fb4:	e002      	b.n	8001fbc <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 8001fb6:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <task_led_ctrl_color_random+0x48>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	7013      	strb	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000007 	.word	0x20000007

08001fc8 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <task_led_ctrl_speed+0x60>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d81a      	bhi.n	8002012 <task_led_ctrl_speed+0x4a>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <task_led_ctrl_speed+0x1c>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08001ffb 	.word	0x08001ffb
 8001fec:	08002003 	.word	0x08002003
 8001ff0:	0800200b 	.word	0x0800200b
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <task_led_ctrl_speed+0x64>)
 8001ff6:	607b      	str	r3, [r7, #4]
        break;
 8001ff8:	e00c      	b.n	8002014 <task_led_ctrl_speed+0x4c>
//        break;
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8001ffa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ffe:	607b      	str	r3, [r7, #4]
        break;
 8002000:	e008      	b.n	8002014 <task_led_ctrl_speed+0x4c>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8002002:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002006:	607b      	str	r3, [r7, #4]
        break;
 8002008:	e004      	b.n	8002014 <task_led_ctrl_speed+0x4c>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 800200a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800200e:	607b      	str	r3, [r7, #4]
        break;
 8002010:	e000      	b.n	8002014 <task_led_ctrl_speed+0x4c>
        default:
        break;
 8002012:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	20000006 	.word	0x20000006
 800202c:	41200000 	.word	0x41200000

08002030 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
    if (LED_SPEED_LAST == g_led_speed) g_led_speed = LED_SPEED_FIRST;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <task_led_ctrl_speed_adjust+0x2c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d103      	bne.n	8002044 <task_led_ctrl_speed_adjust+0x14>
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <task_led_ctrl_speed_adjust+0x2c>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed + 1);
}
 8002042:	e005      	b.n	8002050 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed + 1);
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <task_led_ctrl_speed_adjust+0x2c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <task_led_ctrl_speed_adjust+0x2c>)
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000006 	.word	0x20000006

08002060 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_0P5X;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <task_led_ctrl_speed_reset+0x14>)
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	20000006 	.word	0x20000006

08002078 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <task_led_ctrl_animate_iteration_reset+0x14>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	200001c9 	.word	0x200001c9

08002090 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <task_led_ctrl_animate_adjust_state+0x38>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d105      	bne.n	80020ae <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <task_led_ctrl_animate_adjust_state+0x38>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80020a8:	2301      	movs	r3, #1
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	e005      	b.n	80020ba <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <task_led_ctrl_animate_adjust_state+0x38>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <task_led_ctrl_animate_adjust_state+0x38>)
 80020b8:	701a      	strb	r2, [r3, #0]
    return return_val;
 80020ba:	79fb      	ldrb	r3, [r7, #7]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000005 	.word	0x20000005

080020cc <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <task_led_ctrl_animate_state_demo+0x1c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <task_led_ctrl_animate_state_demo+0x20>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000004 	.word	0x20000004
 80020ec:	200001c9 	.word	0x200001c9

080020f0 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <task_led_ctrl_animate_state_fixed+0x20>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <task_led_ctrl_animate_state_fixed+0x24>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <task_led_ctrl_animate_state_fixed+0x28>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000004 	.word	0x20000004
 8002114:	20000005 	.word	0x20000005
 8002118:	200001c9 	.word	0x200001c9

0800211c <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <task_led_ctrl_animate_state+0x14>)
 8002122:	781b      	ldrb	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000004 	.word	0x20000004

08002134 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
    xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <reset_ws2812b+0x24>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002140:	4618      	mov	r0, r3
 8002142:	f001 f8cf 	bl	80032e4 <xQueueSemaphoreTake>
    xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <reset_ws2812b+0x28>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	2300      	movs	r3, #0
 800214c:	2203      	movs	r2, #3
 800214e:	2100      	movs	r1, #0
 8002150:	f002 fb6e 	bl	8004830 <xTaskGenericNotify>
//    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
//    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, 50);
//    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, 50);
//    HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
//    HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, 50);
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200000f8 	.word	0x200000f8
 800215c:	20001fc0 	.word	0x20001fc0

08002160 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	3301      	adds	r3, #1
 800216e:	b2db      	uxtb	r3, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	3b01      	subs	r3, #1
 800218a:	b2db      	uxtb	r3, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	81fb      	strh	r3, [r7, #14]
    switch (strip_bit)
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <ws2812_get_pwm_strip_offset+0x1a>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	81fb      	strh	r3, [r7, #14]
        break;
 80021b0:	e000      	b.n	80021b4 <ws2812_get_pwm_strip_offset+0x1c>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 80021b2:	bf00      	nop
    }
    return offset;
 80021b4:	89fb      	ldrh	r3, [r7, #14]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d103      	bne.n	80021e0 <ws2812_get_strip_size+0x1c>
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <ws2812_get_strip_size+0x3c>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	81fb      	strh	r3, [r7, #14]
 80021de:	e009      	b.n	80021f4 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ffbc 	bl	8002160 <ws2812_convert_strip_num_to_strip_bit>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <ws2812_get_strip_size+0x40>)
 80021ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021f2:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80021f4:	89fb      	ldrh	r3, [r7, #14]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000428 	.word	0x20000428
 8002204:	2000000c 	.word	0x2000000c

08002208 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d103      	bne.n	8002224 <ws2812_get_num_active_animation_leds+0x1c>
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <ws2812_get_num_active_animation_leds+0x3c>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	81fb      	strh	r3, [r7, #14]
 8002222:	e008      	b.n	8002236 <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <ws2812_get_num_active_animation_leds+0x2e>
 8002230:	89fb      	ldrh	r3, [r7, #14]
 8002232:	33c8      	adds	r3, #200	; 0xc8
 8002234:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8002236:	89fb      	ldrh	r3, [r7, #14]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	20000424 	.word	0x20000424

08002248 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d103      	bne.n	8002264 <ws2812_led_get_max_strip_size+0x1c>
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <ws2812_led_get_max_strip_size+0x40>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	81fb      	strh	r3, [r7, #14]
 8002262:	e00a      	b.n	800227a <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <ws2812_led_get_max_strip_size+0x32>
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	2bc7      	cmp	r3, #199	; 0xc7
 8002274:	d801      	bhi.n	800227a <ws2812_led_get_max_strip_size+0x32>
 8002276:	23c8      	movs	r3, #200	; 0xc8
 8002278:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 800227a:	89fb      	ldrh	r3, [r7, #14]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000428 	.word	0x20000428

0800228c <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	460a      	mov	r2, r1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	4613      	mov	r3, r2
 800229a:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d104      	bne.n	80022b0 <ws2812_pixel_is_in_strip_range+0x24>
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	2bc7      	cmp	r3, #199	; 0xc7
 80022aa:	d801      	bhi.n	80022b0 <ws2812_pixel_is_in_strip_range+0x24>
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	4603      	mov	r3, r0
 80022d4:	81bb      	strh	r3, [r7, #12]
 80022d6:	460b      	mov	r3, r1
 80022d8:	73bb      	strb	r3, [r7, #14]
 80022da:	4613      	mov	r3, r2
 80022dc:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff4b 	bl	800217c <ws2812_convert_strip_bit_to_strip_num>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <ws2812b_set_led+0xd0>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	4a24      	ldr	r2, [pc, #144]	; (8002394 <ws2812b_set_led+0xd4>)
 8002302:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002306:	89ba      	ldrh	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	440b      	add	r3, r1
 8002310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002314:	edc7 7a01 	vstr	s15, [r7, #4]
 8002318:	793a      	ldrb	r2, [r7, #4]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <ws2812b_set_led+0xd0>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	4a17      	ldr	r2, [pc, #92]	; (8002394 <ws2812b_set_led+0xd4>)
 8002336:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800233a:	89ba      	ldrh	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	440b      	add	r3, r1
 8002344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002348:	edc7 7a01 	vstr	s15, [r7, #4]
 800234c:	793a      	ldrb	r2, [r7, #4]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8002352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <ws2812b_set_led+0xd0>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <ws2812b_set_led+0xd4>)
 800236c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002370:	89ba      	ldrh	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	440b      	add	r3, r1
 800237a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002382:	793a      	ldrb	r2, [r7, #4]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	709a      	strb	r2, [r3, #2]
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	20000000 	.word	0x20000000
 8002394:	20000438 	.word	0x20000438

08002398 <ws2812b_set_strip_size>:

uint16_t g_ws2812b_cur_strip_size = 0;


void ws2812b_set_strip_size(const strip_bit_e strip_bit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
    g_ws2812b_cur_strip_size = ws2812_get_strip_size(strip_bit);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff0d 	bl	80021c4 <ws2812_get_strip_size>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <ws2812b_set_strip_size+0x24>)
 80023b0:	801a      	strh	r2, [r3, #0]
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000043c 	.word	0x2000043c

080023c0 <ws2812b_dma_transfer>:
    return g_ws2812b_cur_strip_size;
}


void ws2812b_dma_transfer(const strip_mask_t strip_mask)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
    xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <ws2812b_dma_transfer+0x30>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 ff86 	bl	80032e4 <xQueueSemaphoreTake>
    xTaskNotify(g_dma_transfer_handle, strip_mask, eSetValueWithOverwrite);
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <ws2812b_dma_transfer+0x34>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	88f9      	ldrh	r1, [r7, #6]
 80023de:	2300      	movs	r3, #0
 80023e0:	2203      	movs	r2, #3
 80023e2:	f002 fa25 	bl	8004830 <xTaskGenericNotify>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200000f8 	.word	0x200000f8
 80023f4:	20001fc0 	.word	0x20001fc0

080023f8 <ws2812b_ping_or_pong>:


ws2812b_ping_pong_e ws2812b_ping_or_pong(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
    if (g_ping_pong) return WS2812B_PING;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <ws2812b_ping_or_pong+0x1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <ws2812b_ping_or_pong+0x10>
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <ws2812b_ping_or_pong+0x12>
    else return WS2812B_PONG;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	2000000e 	.word	0x2000000e

08002418 <ws2812b_fill_pwm_buffer>:


void ws2812b_fill_pwm_buffer(const strip_bit_e strip_bit)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
	// fill the pwm data here  
	uint16_t strip_size = ws2812_get_strip_size(strip_bit);
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fecd 	bl	80021c4 <ws2812_get_strip_size>
 800242a:	4603      	mov	r3, r0
 800242c:	833b      	strh	r3, [r7, #24]
	ws2812b_set_strip_size(strip_bit);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ffb1 	bl	8002398 <ws2812b_set_strip_size>
	uint32_t color = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fe9d 	bl	800217c <ws2812_convert_strip_bit_to_strip_num>
 8002442:	4603      	mov	r3, r0
 8002444:	74fb      	strb	r3, [r7, #19]
	uint32_t offset = ws2812_get_pwm_strip_offset(strip_bit);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fea5 	bl	8002198 <ws2812_get_pwm_strip_offset>
 800244e:	4603      	mov	r3, r0
 8002450:	60fb      	str	r3, [r7, #12]
	for (uint16_t iii = 0; iii < strip_size; iii++)
 8002452:	2300      	movs	r3, #0
 8002454:	83fb      	strh	r3, [r7, #30]
 8002456:	e084      	b.n	8002562 <ws2812b_fill_pwm_buffer+0x14a>
	{
		color = (((gp_ws28128b_strip[strip_num] + iii)->green) << 16) | (((gp_ws28128b_strip[strip_num] + iii)->red) << 8) | (((gp_ws28128b_strip[strip_num] + iii)->blue));
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	4a61      	ldr	r2, [pc, #388]	; (80025e0 <ws2812b_fill_pwm_buffer+0x1c8>)
 800245c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002460:	8bfa      	ldrh	r2, [r7, #30]
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	440b      	add	r3, r1
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	0419      	lsls	r1, r3, #16
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	4a5b      	ldr	r2, [pc, #364]	; (80025e0 <ws2812b_fill_pwm_buffer+0x1c8>)
 8002472:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002476:	8bfa      	ldrh	r2, [r7, #30]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	4403      	add	r3, r0
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4319      	orrs	r1, r3
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	4a55      	ldr	r2, [pc, #340]	; (80025e0 <ws2812b_fill_pwm_buffer+0x1c8>)
 800248a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800248e:	8bfa      	ldrh	r2, [r7, #30]
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	4403      	add	r3, r0
 8002498:	789b      	ldrb	r3, [r3, #2]
 800249a:	430b      	orrs	r3, r1
 800249c:	617b      	str	r3, [r7, #20]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 800249e:	2300      	movs	r3, #0
 80024a0:	777b      	strb	r3, [r7, #29]
 80024a2:	e058      	b.n	8002556 <ws2812b_fill_pwm_buffer+0x13e>
		{
		    if (WS2812B_PING == ws2812b_ping_or_pong())
 80024a4:	f7ff ffa8 	bl	80023f8 <ws2812b_ping_or_pong>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d128      	bne.n	8002500 <ws2812b_fill_pwm_buffer+0xe8>
            {
		        gp_pwm_data_ping[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
		                        ((uint32_t)strip_num * (uint32_t)WS2812B_BIT_RESET_CYCLES) +
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
		                                        (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 80024ae:	7f7b      	ldrb	r3, [r7, #29]
 80024b0:	f1c3 0317 	rsb	r3, r3, #23
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4013      	ands	r3, r2
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <ws2812b_fill_pwm_buffer+0xb0>
 80024c4:	2428      	movs	r4, #40	; 0x28
 80024c6:	e000      	b.n	80024ca <ws2812b_fill_pwm_buffer+0xb2>
 80024c8:	2414      	movs	r4, #20
		        gp_pwm_data_ping[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <ws2812b_fill_pwm_buffer+0x1cc>)
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4618      	mov	r0, r3
		                        ((uint32_t)strip_num * (uint32_t)WS2812B_BIT_RESET_CYCLES) +
 80024da:	7cfa      	ldrb	r2, [r7, #19]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
		        gp_pwm_data_ping[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
 80024e4:	4418      	add	r0, r3
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 80024e6:	8bfa      	ldrh	r2, [r7, #30]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
		                        ((uint32_t)strip_num * (uint32_t)WS2812B_BIT_RESET_CYCLES) +
 80024f0:	18c2      	adds	r2, r0, r3
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 80024f2:	7f7b      	ldrb	r3, [r7, #29]
 80024f4:	4413      	add	r3, r2
		        gp_pwm_data_ping[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	440b      	add	r3, r1
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 80024fa:	4622      	mov	r2, r4
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e027      	b.n	8002550 <ws2812b_fill_pwm_buffer+0x138>
		    else
		    {
		        gp_pwm_data_pong[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
		                        ((uint32_t)strip_num * (uint32_t)WS2812B_BIT_RESET_CYCLES) +
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
		                                        (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8002500:	7f7b      	ldrb	r3, [r7, #29]
 8002502:	f1c3 0317 	rsb	r3, r3, #23
 8002506:	2201      	movs	r2, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	461a      	mov	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	4013      	ands	r3, r2
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <ws2812b_fill_pwm_buffer+0x102>
 8002516:	2428      	movs	r4, #40	; 0x28
 8002518:	e000      	b.n	800251c <ws2812b_fill_pwm_buffer+0x104>
 800251a:	2414      	movs	r4, #20
		        gp_pwm_data_pong[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <ws2812b_fill_pwm_buffer+0x1d0>)
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4618      	mov	r0, r3
		                        ((uint32_t)strip_num * (uint32_t)WS2812B_BIT_RESET_CYCLES) +
 800252c:	7cfa      	ldrb	r2, [r7, #19]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
		        gp_pwm_data_pong[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
 8002536:	4418      	add	r0, r3
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 8002538:	8bfa      	ldrh	r2, [r7, #30]
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
		                        ((uint32_t)strip_num * (uint32_t)WS2812B_BIT_RESET_CYCLES) +
 8002542:	18c2      	adds	r2, r0, r3
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 8002544:	7f7b      	ldrb	r3, [r7, #29]
 8002546:	4413      	add	r3, r2
		        gp_pwm_data_pong[((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) +
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	440b      	add	r3, r1
		                        (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy)] =
 800254c:	4622      	mov	r2, r4
 800254e:	801a      	strh	r2, [r3, #0]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8002550:	7f7b      	ldrb	r3, [r7, #29]
 8002552:	3301      	adds	r3, #1
 8002554:	777b      	strb	r3, [r7, #29]
 8002556:	7f7b      	ldrb	r3, [r7, #29]
 8002558:	2b17      	cmp	r3, #23
 800255a:	d9a3      	bls.n	80024a4 <ws2812b_fill_pwm_buffer+0x8c>
	for (uint16_t iii = 0; iii < strip_size; iii++)
 800255c:	8bfb      	ldrh	r3, [r7, #30]
 800255e:	3301      	adds	r3, #1
 8002560:	83fb      	strh	r3, [r7, #30]
 8002562:	8bfa      	ldrh	r2, [r7, #30]
 8002564:	8b3b      	ldrh	r3, [r7, #24]
 8002566:	429a      	cmp	r2, r3
 8002568:	f4ff af76 	bcc.w	8002458 <ws2812b_fill_pwm_buffer+0x40>

		    }
		}
	}
    for (uint16_t iii = 0; iii < WS2812B_BIT_RESET_CYCLES; iii++)
 800256c:	2300      	movs	r3, #0
 800256e:	837b      	strh	r3, [r7, #26]
 8002570:	e024      	b.n	80025bc <ws2812b_fill_pwm_buffer+0x1a4>
	{
        if (WS2812B_PING == ws2812b_ping_or_pong())
 8002572:	f7ff ff41 	bl	80023f8 <ws2812b_ping_or_pong>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10e      	bne.n	800259a <ws2812b_fill_pwm_buffer+0x182>
        {
            gp_pwm_data_ping[(strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + iii] = 0;
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <ws2812b_fill_pwm_buffer+0x1cc>)
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	8b3a      	ldrh	r2, [r7, #24]
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	461a      	mov	r2, r3
 800258c:	8b7b      	ldrh	r3, [r7, #26]
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	2200      	movs	r2, #0
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	e00d      	b.n	80025b6 <ws2812b_fill_pwm_buffer+0x19e>
        }
        else
        {
            gp_pwm_data_pong[(strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + iii] = 0;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <ws2812b_fill_pwm_buffer+0x1d0>)
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	8b3a      	ldrh	r2, [r7, #24]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	461a      	mov	r2, r3
 80025aa:	8b7b      	ldrh	r3, [r7, #26]
 80025ac:	4413      	add	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_BIT_RESET_CYCLES; iii++)
 80025b6:	8b7b      	ldrh	r3, [r7, #26]
 80025b8:	3301      	adds	r3, #1
 80025ba:	837b      	strh	r3, [r7, #26]
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80025ec <ws2812b_fill_pwm_buffer+0x1d4>
 80025ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d4ce      	bmi.n	8002572 <ws2812b_fill_pwm_buffer+0x15a>
        }
	}
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd90      	pop	{r4, r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000438 	.word	0x20000438
 80025e4:	2000042c 	.word	0x2000042c
 80025e8:	20000430 	.word	0x20000430
 80025ec:	41a33334 	.word	0x41a33334

080025f0 <ws2812b_init>:
	// call TIM PWM DMA to reset.
}


void ws2812b_init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <ws2812b_init+0x100>)
 80025f8:	4a3e      	ldr	r2, [pc, #248]	; (80026f4 <ws2812b_init+0x104>)
 80025fa:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 80025fc:	2301      	movs	r3, #1
 80025fe:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	e00f      	b.n	8002626 <ws2812b_init+0x36>
 8002606:	2201      	movs	r2, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	b21a      	sxth	r2, r3
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <ws2812b_init+0x108>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b21b      	sxth	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b21b      	sxth	r3, r3
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <ws2812b_init+0x108>)
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	ddec      	ble.n	8002606 <ws2812b_init+0x16>
	switch (num_strips)
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10d      	bne.n	800264e <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <ws2812b_init+0x10c>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	33c8      	adds	r3, #200	; 0xc8
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <ws2812b_init+0x10c>)
 800263c:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <ws2812b_init+0x110>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	2bc7      	cmp	r3, #199	; 0xc7
 8002644:	d802      	bhi.n	800264c <ws2812b_init+0x5c>
 8002646:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <ws2812b_init+0x110>)
 8002648:	22c8      	movs	r2, #200	; 0xc8
 800264a:	801a      	strh	r2, [r3, #0]
		break;
 800264c:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <ws2812b_init+0x10c>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002664:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002704 <ws2812b_init+0x114>
 8002668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800266c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002670:	ee17 0a90 	vmov	r0, s15
 8002674:	f007 ffbe 	bl	800a5f4 <malloc>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <ws2812b_init+0x118>)
 800267e:	601a      	str	r2, [r3, #0]
    gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <ws2812b_init+0x10c>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002696:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002704 <ws2812b_init+0x114>
 800269a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800269e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a2:	ee17 0a90 	vmov	r0, s15
 80026a6:	f007 ffa5 	bl	800a5f4 <malloc>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <ws2812b_init+0x11c>)
 80026b0:	601a      	str	r2, [r3, #0]
    gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <ws2812b_init+0x10c>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002704 <ws2812b_init+0x114>
 80026cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	ee17 0a90 	vmov	r0, s15
 80026d8:	f007 ff8c 	bl	800a5f4 <malloc>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <ws2812b_init+0x120>)
 80026e2:	601a      	str	r2, [r3, #0]

    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 80026e4:	f7ff f83e 	bl	8001764 <current_monitor_init>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000438 	.word	0x20000438
 80026f4:	200001cc 	.word	0x200001cc
 80026f8:	20000426 	.word	0x20000426
 80026fc:	20000424 	.word	0x20000424
 8002700:	20000428 	.word	0x20000428
 8002704:	453b8000 	.word	0x453b8000
 8002708:	20000434 	.word	0x20000434
 800270c:	2000042c 	.word	0x2000042c
 8002710:	20000430 	.word	0x20000430

08002714 <ws2812b_show>:

void ws2812b_show(const strip_mask_t strip_mask)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e010      	b.n	8002746 <ws2812b_show+0x32>
	{
		if ((1 << iii) & strip_mask)
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	fa42 f303 	asr.w	r3, r2, r3
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <ws2812b_show+0x2c>
		{
			ws2812b_fill_pwm_buffer(iii + 1); // iii = strip num!
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	3301      	adds	r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fe6c 	bl	8002418 <ws2812b_fill_pwm_buffer>
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	3301      	adds	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0eb      	beq.n	8002724 <ws2812b_show+0x10>
		}
	}

	ws2812b_dma_transfer(strip_mask);
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe36 	bl	80023c0 <ws2812b_dma_transfer>
	portYIELD();
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <ws2812b_show+0x80>)
 8002756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	f3bf 8f6f 	isb	sy
	if (WS2812B_PING == ws2812b_ping_or_pong())
 8002764:	f7ff fe48 	bl	80023f8 <ws2812b_ping_or_pong>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <ws2812b_show+0x68>
    {
        xSemaphoreTake(g_dma_fill_semaphore, portMAX_DELAY);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <ws2812b_show+0x84>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fdb4 	bl	80032e4 <xQueueSemaphoreTake>
    }
    g_ping_pong ^= 1;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <ws2812b_show+0x88>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <ws2812b_show+0x88>)
 8002788:	701a      	strb	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000ed04 	.word	0xe000ed04
 8002798:	2000014c 	.word	0x2000014c
 800279c:	2000000e 	.word	0x2000000e

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	; (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <SysTick_Handler+0x1c>)
 80027fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027fc:	f001 fe34 	bl	8004468 <xTaskGetSchedulerState>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002806:	f002 ff07 	bl	8005618 <xPortSysTickHandler>
  }
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002818:	2100      	movs	r1, #0
 800281a:	f06f 0004 	mvn.w	r0, #4
 800281e:	f7ff ffbf 	bl	80027a0 <__NVIC_SetPriority>
#endif
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282e:	f3ef 8305 	mrs	r3, IPSR
 8002832:	603b      	str	r3, [r7, #0]
  return(result);
 8002834:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800283a:	f06f 0305 	mvn.w	r3, #5
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e00c      	b.n	800285c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <osKernelInitialize+0x44>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <osKernelInitialize+0x44>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002850:	2300      	movs	r3, #0
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e002      	b.n	800285c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800285a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000440 	.word	0x20000440

08002870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002876:	f3ef 8305 	mrs	r3, IPSR
 800287a:	603b      	str	r3, [r7, #0]
  return(result);
 800287c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002882:	f06f 0305 	mvn.w	r3, #5
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	e010      	b.n	80028ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <osKernelStart+0x48>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d109      	bne.n	80028a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002892:	f7ff ffbf 	bl	8002814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <osKernelStart+0x48>)
 8002898:	2202      	movs	r2, #2
 800289a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800289c:	f001 f98a 	bl	8003bb4 <vTaskStartScheduler>
      stat = osOK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	e002      	b.n	80028ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000440 	.word	0x20000440

080028bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028cc:	f3ef 8305 	mrs	r3, IPSR
 80028d0:	617b      	str	r3, [r7, #20]
  return(result);
 80028d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d17e      	bne.n	80029d6 <osThreadNew+0x11a>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d07b      	beq.n	80029d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028e2:	2318      	movs	r3, #24
 80028e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d045      	beq.n	8002982 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <osThreadNew+0x48>
        name = attr->name;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <osThreadNew+0x6e>
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b38      	cmp	r3, #56	; 0x38
 800291c:	d805      	bhi.n	800292a <osThreadNew+0x6e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <osThreadNew+0x72>
        return (NULL);
 800292a:	2300      	movs	r3, #0
 800292c:	e054      	b.n	80029d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00e      	beq.n	8002964 <osThreadNew+0xa8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b5b      	cmp	r3, #91	; 0x5b
 800294c:	d90a      	bls.n	8002964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <osThreadNew+0xa8>
        mem = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e010      	b.n	8002986 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10c      	bne.n	8002986 <osThreadNew+0xca>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d108      	bne.n	8002986 <osThreadNew+0xca>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <osThreadNew+0xca>
          mem = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e001      	b.n	8002986 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d110      	bne.n	80029ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002994:	9202      	str	r2, [sp, #8]
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6a3a      	ldr	r2, [r7, #32]
 80029a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 ff30 	bl	8003808 <xTaskCreateStatic>
 80029a8:	4603      	mov	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e013      	b.n	80029d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d110      	bne.n	80029d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 ff7b 	bl	80038c2 <xTaskCreate>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <osThreadNew+0x11a>
            hTask = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029d6:	693b      	ldr	r3, [r7, #16]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e8:	f3ef 8305 	mrs	r3, IPSR
 80029ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80029ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <osDelay+0x1c>
    stat = osErrorISR;
 80029f4:	f06f 0305 	mvn.w	r3, #5
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e007      	b.n	8002a0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 f8a0 	bl	8003b4c <vTaskDelay>
    }
  }

  return (stat);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <vApplicationGetIdleTaskMemory+0x30>)
 8002a2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000444 	.word	0x20000444
 8002a48:	200004a0 	.word	0x200004a0

08002a4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <vApplicationGetTimerTaskMemory+0x30>)
 8002a62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	200006a0 	.word	0x200006a0
 8002a7c:	200006fc 	.word	0x200006fc

08002a80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f103 0208 	add.w	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 0208 	add.w	r2, r3, #8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f103 0208 	add.w	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b38:	d103      	bne.n	8002b42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e00c      	b.n	8002b5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3308      	adds	r3, #8
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e002      	b.n	8002b50 <vListInsert+0x2e>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d2f6      	bcs.n	8002b4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6892      	ldr	r2, [r2, #8]
 8002baa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6852      	ldr	r2, [r2, #4]
 8002bb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d103      	bne.n	8002bc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1e5a      	subs	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c12:	f002 fc6f 	bl	80054f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	3b01      	subs	r3, #1
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	441a      	add	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	22ff      	movs	r2, #255	; 0xff
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d114      	bne.n	8002c92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01a      	beq.n	8002ca6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3310      	adds	r3, #16
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 fa39 	bl	80040ec <xTaskRemoveFromEventList>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d012      	beq.n	8002ca6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <xQueueGenericReset+0xcc>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	e009      	b.n	8002ca6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3310      	adds	r3, #16
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fef2 	bl	8002a80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3324      	adds	r3, #36	; 0x24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff feed 	bl	8002a80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ca6:	f002 fc55 	bl	8005554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	; 0x38
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <xQueueGenericCreateStatic+0x52>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <xQueueGenericCreateStatic+0x56>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericCreateStatic+0x58>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	623b      	str	r3, [r7, #32]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <xQueueGenericCreateStatic+0x7e>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <xQueueGenericCreateStatic+0x82>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <xQueueGenericCreateStatic+0x84>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	61fb      	str	r3, [r7, #28]
}
 8002d52:	bf00      	nop
 8002d54:	e7fe      	b.n	8002d54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d56:	2350      	movs	r3, #80	; 0x50
 8002d58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b50      	cmp	r3, #80	; 0x50
 8002d5e:	d00a      	beq.n	8002d76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	61bb      	str	r3, [r7, #24]
}
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f805 	bl	8002da8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e002      	b.n	8002dca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	69b8      	ldr	r0, [r7, #24]
 8002dda:	f7ff ff05 	bl	8002be8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	; 0x38
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericSend+0x32>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <xQueueGenericSend+0x40>
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <xQueueGenericSend+0x44>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <xQueueGenericSend+0x46>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <xQueueGenericSend+0x60>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSend+0x6e>
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSend+0x72>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSend+0x74>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericSend+0x8e>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	623b      	str	r3, [r7, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e7e:	f001 faf3 	bl	8004468 <xTaskGetSchedulerState>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <xQueueGenericSend+0x9e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <xQueueGenericSend+0xa2>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericSend+0xa4>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <xQueueGenericSend+0xbe>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	61fb      	str	r3, [r7, #28]
}
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eae:	f002 fb21 	bl	80054f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <xQueueGenericSend+0xd4>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d129      	bne.n	8002f18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eca:	f000 fb2f 	bl	800352c <prvCopyDataToQueue>
 8002ece:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 f905 	bl	80040ec <xTaskRemoveFromEventList>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <xQueueGenericSend+0x1f8>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	e00a      	b.n	8002f10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f00:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <xQueueGenericSend+0x1f8>)
 8002f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f10:	f002 fb20 	bl	8005554 <vPortExitCritical>
				return pdPASS;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e063      	b.n	8002fe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f1e:	f002 fb19 	bl	8005554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e05c      	b.n	8002fe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f93f 	bl	80041b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f3a:	f002 fb0b 	bl	8005554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f3e:	f000 fe9f 	bl	8003c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f42:	f002 fad7 	bl	80054f4 <vPortEnterCritical>
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f52:	d103      	bne.n	8002f5c <xQueueGenericSend+0x16c>
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSend+0x182>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f72:	f002 faef 	bl	8005554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f76:	1d3a      	adds	r2, r7, #4
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 f92e 	bl	80041e0 <xTaskCheckForTimeOut>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d124      	bne.n	8002fd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8c:	f000 fbc6 	bl	800371c <prvIsQueueFull>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	3310      	adds	r3, #16
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f854 	bl	800404c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa6:	f000 fb51 	bl	800364c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002faa:	f000 fe77 	bl	8003c9c <xTaskResumeAll>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f af7c 	bne.w	8002eae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <xQueueGenericSend+0x1f8>)
 8002fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	e772      	b.n	8002eae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fca:	f000 fb3f 	bl	800364c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fce:	f000 fe65 	bl	8003c9c <xTaskResumeAll>
 8002fd2:	e76c      	b.n	8002eae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd6:	f000 fb39 	bl	800364c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fda:	f000 fe5f 	bl	8003c9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3738      	adds	r7, #56	; 0x38
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b090      	sub	sp, #64	; 0x40
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <xQueueGenericSendFromISR+0x3c>
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <xQueueGenericSendFromISR+0x40>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <xQueueGenericSendFromISR+0x42>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d103      	bne.n	8003056 <xQueueGenericSendFromISR+0x6a>
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <xQueueGenericSendFromISR+0x6e>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <xQueueGenericSendFromISR+0x70>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	623b      	str	r3, [r7, #32]
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003076:	f002 fb1f 	bl	80056b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800307a:	f3ef 8211 	mrs	r2, BASEPRI
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	61fa      	str	r2, [r7, #28]
 8003090:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003092:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <xQueueGenericSendFromISR+0xbc>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d12f      	bne.n	8003108 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030be:	f000 fa35 	bl	800352c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ca:	d112      	bne.n	80030f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d016      	beq.n	8003102 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	3324      	adds	r3, #36	; 0x24
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 f807 	bl	80040ec <xTaskRemoveFromEventList>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00e      	beq.n	8003102 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030f6:	3301      	adds	r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	b25a      	sxtb	r2, r3
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003102:	2301      	movs	r3, #1
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003106:	e001      	b.n	800310c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003108:	2300      	movs	r3, #0
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003116:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800311a:	4618      	mov	r0, r3
 800311c:	3740      	adds	r7, #64	; 0x40
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <xQueueReceive+0x30>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	623b      	str	r3, [r7, #32]
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <xQueueReceive+0x3e>
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <xQueueReceive+0x42>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <xQueueReceive+0x44>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueReceive+0x5e>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	61fb      	str	r3, [r7, #28]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003182:	f001 f971 	bl	8004468 <xTaskGetSchedulerState>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xQueueReceive+0x6e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <xQueueReceive+0x72>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <xQueueReceive+0x74>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <xQueueReceive+0x8e>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	61bb      	str	r3, [r7, #24]
}
 80031ae:	bf00      	nop
 80031b0:	e7fe      	b.n	80031b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b2:	f002 f99f 	bl	80054f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01f      	beq.n	8003202 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c6:	f000 fa1b 	bl	8003600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00f      	beq.n	80031fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	3310      	adds	r3, #16
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 ff84 	bl	80040ec <xTaskRemoveFromEventList>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <xQueueReceive+0x1bc>)
 80031ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031fa:	f002 f9ab 	bl	8005554 <vPortExitCritical>
				return pdPASS;
 80031fe:	2301      	movs	r3, #1
 8003200:	e069      	b.n	80032d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003208:	f002 f9a4 	bl	8005554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800320c:	2300      	movs	r3, #0
 800320e:	e062      	b.n	80032d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003216:	f107 0310 	add.w	r3, r7, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f000 ffca 	bl	80041b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003224:	f002 f996 	bl	8005554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003228:	f000 fd2a 	bl	8003c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800322c:	f002 f962 	bl	80054f4 <vPortEnterCritical>
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003236:	b25b      	sxtb	r3, r3
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323c:	d103      	bne.n	8003246 <xQueueReceive+0x122>
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800324c:	b25b      	sxtb	r3, r3
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003252:	d103      	bne.n	800325c <xQueueReceive+0x138>
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800325c:	f002 f97a 	bl	8005554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003260:	1d3a      	adds	r2, r7, #4
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f000 ffb9 	bl	80041e0 <xTaskCheckForTimeOut>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d123      	bne.n	80032bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003276:	f000 fa3b 	bl	80036f0 <prvIsQueueEmpty>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fedf 	bl	800404c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800328e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003290:	f000 f9dc 	bl	800364c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003294:	f000 fd02 	bl	8003c9c <xTaskResumeAll>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d189      	bne.n	80031b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <xQueueReceive+0x1bc>)
 80032a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	e780      	b.n	80031b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b2:	f000 f9cb 	bl	800364c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032b6:	f000 fcf1 	bl	8003c9c <xTaskResumeAll>
 80032ba:	e77a      	b.n	80031b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032be:	f000 f9c5 	bl	800364c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c2:	f000 fceb 	bl	8003c9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c8:	f000 fa12 	bl	80036f0 <prvIsQueueEmpty>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f43f af6f 	beq.w	80031b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3730      	adds	r7, #48	; 0x30
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	623b      	str	r3, [r7, #32]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	61fb      	str	r3, [r7, #28]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003334:	f001 f898 	bl	8004468 <xTaskGetSchedulerState>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <xQueueSemaphoreTake+0x60>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <xQueueSemaphoreTake+0x64>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <xQueueSemaphoreTake+0x66>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	61bb      	str	r3, [r7, #24]
}
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003364:	f002 f8c6 	bl	80054f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d024      	beq.n	80033be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003384:	f001 f9e6 	bl	8004754 <pvTaskIncrementMutexHeldCount>
 8003388:	4602      	mov	r2, r0
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00f      	beq.n	80033b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	3310      	adds	r3, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fea6 	bl	80040ec <xTaskRemoveFromEventList>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033a6:	4b54      	ldr	r3, [pc, #336]	; (80034f8 <xQueueSemaphoreTake+0x214>)
 80033a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033b6:	f002 f8cd 	bl	8005554 <vPortExitCritical>
				return pdPASS;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e097      	b.n	80034ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	617b      	str	r3, [r7, #20]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033e0:	f002 f8b8 	bl	8005554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e082      	b.n	80034ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fede 	bl	80041b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033fc:	f002 f8aa 	bl	8005554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003400:	f000 fc3e 	bl	8003c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003404:	f002 f876 	bl	80054f4 <vPortEnterCritical>
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800340e:	b25b      	sxtb	r3, r3
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003414:	d103      	bne.n	800341e <xQueueSemaphoreTake+0x13a>
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342a:	d103      	bne.n	8003434 <xQueueSemaphoreTake+0x150>
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003434:	f002 f88e 	bl	8005554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003438:	463a      	mov	r2, r7
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fecd 	bl	80041e0 <xTaskCheckForTimeOut>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d132      	bne.n	80034b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800344e:	f000 f94f 	bl	80036f0 <prvIsQueueEmpty>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d026      	beq.n	80034a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003460:	f002 f848 	bl	80054f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f001 f81b 	bl	80044a4 <xTaskPriorityInherit>
 800346e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003470:	f002 f870 	bl	8005554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	3324      	adds	r3, #36	; 0x24
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fde5 	bl	800404c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003484:	f000 f8e2 	bl	800364c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003488:	f000 fc08 	bl	8003c9c <xTaskResumeAll>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f af68 	bne.w	8003364 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <xQueueSemaphoreTake+0x214>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	e75e      	b.n	8003364 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034a8:	f000 f8d0 	bl	800364c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ac:	f000 fbf6 	bl	8003c9c <xTaskResumeAll>
 80034b0:	e758      	b.n	8003364 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034b4:	f000 f8ca 	bl	800364c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034b8:	f000 fbf0 	bl	8003c9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034be:	f000 f917 	bl	80036f0 <prvIsQueueEmpty>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f43f af4d 	beq.w	8003364 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80034d0:	f002 f810 	bl	80054f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d6:	f000 f811 	bl	80034fc <prvGetDisinheritPriorityAfterTimeout>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f8b4 	bl	8004650 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034e8:	f002 f834 	bl	8005554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3738      	adds	r7, #56	; 0x38
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000ed04 	.word	0xe000ed04

080034fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800351e:	68fb      	ldr	r3, [r7, #12]
	}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d14d      	bne.n	80035ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f80c 	bl	8004574 <xTaskPriorityDisinherit>
 800355c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e043      	b.n	80035ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d119      	bne.n	80035a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6858      	ldr	r0, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	461a      	mov	r2, r3
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	f007 f844 	bl	800a604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	441a      	add	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d32b      	bcc.n	80035ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e026      	b.n	80035ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68d8      	ldr	r0, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	461a      	mov	r2, r3
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	f007 f82a 	bl	800a604 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	425b      	negs	r3, r3
 80035ba:	441a      	add	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d207      	bcs.n	80035dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	425b      	negs	r3, r3
 80035d6:	441a      	add	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d105      	bne.n	80035ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035f6:	697b      	ldr	r3, [r7, #20]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d018      	beq.n	8003644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	441a      	add	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d303      	bcc.n	8003634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68d9      	ldr	r1, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	461a      	mov	r2, r3
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	f006 ffe0 	bl	800a604 <memcpy>
	}
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003654:	f001 ff4e 	bl	80054f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003660:	e011      	b.n	8003686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3324      	adds	r3, #36	; 0x24
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fd3c 	bl	80040ec <xTaskRemoveFromEventList>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800367a:	f000 fe13 	bl	80042a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	3b01      	subs	r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dce9      	bgt.n	8003662 <prvUnlockQueue+0x16>
 800368e:	e000      	b.n	8003692 <prvUnlockQueue+0x46>
					break;
 8003690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800369a:	f001 ff5b 	bl	8005554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800369e:	f001 ff29 	bl	80054f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036aa:	e011      	b.n	80036d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3310      	adds	r3, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fd17 	bl	80040ec <xTaskRemoveFromEventList>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036c4:	f000 fdee 	bl	80042a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	dce9      	bgt.n	80036ac <prvUnlockQueue+0x60>
 80036d8:	e000      	b.n	80036dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036e4:	f001 ff36 	bl	8005554 <vPortExitCritical>
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036f8:	f001 fefc 	bl	80054f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e001      	b.n	800370e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800370e:	f001 ff21 	bl	8005554 <vPortExitCritical>

	return xReturn;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003724:	f001 fee6 	bl	80054f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	429a      	cmp	r2, r3
 8003732:	d102      	bne.n	800373a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e001      	b.n	800373e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800373e:	f001 ff09 	bl	8005554 <vPortExitCritical>

	return xReturn;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e014      	b.n	8003786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800375c:	4a0f      	ldr	r2, [pc, #60]	; (800379c <vQueueAddToRegistry+0x50>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003768:	490c      	ldr	r1, [pc, #48]	; (800379c <vQueueAddToRegistry+0x50>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <vQueueAddToRegistry+0x50>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800377e:	e006      	b.n	800378e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b07      	cmp	r3, #7
 800378a:	d9e7      	bls.n	800375c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000afc 	.word	0x20000afc

080037a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037b0:	f001 fea0 	bl	80054f4 <vPortEnterCritical>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c0:	d103      	bne.n	80037ca <vQueueWaitForMessageRestricted+0x2a>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d6:	d103      	bne.n	80037e0 <vQueueWaitForMessageRestricted+0x40>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e0:	f001 feb8 	bl	8005554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3324      	adds	r3, #36	; 0x24
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fc4d 	bl	8004094 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff26 	bl	800364c <prvUnlockQueue>
	}
 8003800:	bf00      	nop
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	; 0x38
 800380c:	af04      	add	r7, sp, #16
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xTaskCreateStatic+0x2a>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	623b      	str	r3, [r7, #32]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xTaskCreateStatic+0x46>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	61fb      	str	r3, [r7, #28]
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800384e:	235c      	movs	r3, #92	; 0x5c
 8003850:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b5c      	cmp	r3, #92	; 0x5c
 8003856:	d00a      	beq.n	800386e <xTaskCreateStatic+0x66>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61bb      	str	r3, [r7, #24]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800386e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01e      	beq.n	80038b4 <xTaskCreateStatic+0xac>
 8003876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003884:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2202      	movs	r2, #2
 800388a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800388e:	2300      	movs	r3, #0
 8003890:	9303      	str	r3, [sp, #12]
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f850 	bl	800394c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ae:	f000 f8dd 	bl	8003a6c <prvAddNewTaskToReadyList>
 80038b2:	e001      	b.n	80038b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038b8:	697b      	ldr	r3, [r7, #20]
	}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08c      	sub	sp, #48	; 0x30
 80038c6:	af04      	add	r7, sp, #16
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 ff2e 	bl	8005738 <pvPortMalloc>
 80038dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00e      	beq.n	8003902 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038e4:	205c      	movs	r0, #92	; 0x5c
 80038e6:	f001 ff27 	bl	8005738 <pvPortMalloc>
 80038ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
 80038f8:	e005      	b.n	8003906 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038fa:	6978      	ldr	r0, [r7, #20]
 80038fc:	f001 ffe8 	bl	80058d0 <vPortFree>
 8003900:	e001      	b.n	8003906 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d017      	beq.n	800393c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	2300      	movs	r3, #0
 8003918:	9303      	str	r3, [sp, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	9302      	str	r3, [sp, #8]
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f80e 	bl	800394c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003930:	69f8      	ldr	r0, [r7, #28]
 8003932:	f000 f89b 	bl	8003a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	e002      	b.n	8003942 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003940:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003942:	69bb      	ldr	r3, [r7, #24]
	}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	461a      	mov	r2, r3
 8003964:	21a5      	movs	r1, #165	; 0xa5
 8003966:	f006 fe5b 	bl	800a620 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003974:	3b01      	subs	r3, #1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	617b      	str	r3, [r7, #20]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01f      	beq.n	80039ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e012      	b.n	80039d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	7819      	ldrb	r1, [r3, #0]
 80039b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	3334      	adds	r3, #52	; 0x34
 80039c0:	460a      	mov	r2, r1
 80039c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d9e9      	bls.n	80039b0 <prvInitialiseNewTask+0x64>
 80039dc:	e000      	b.n	80039e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80039de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e8:	e003      	b.n	80039f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b37      	cmp	r3, #55	; 0x37
 80039f6:	d901      	bls.n	80039fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039f8:	2337      	movs	r3, #55	; 0x37
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	3304      	adds	r3, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f854 	bl	8002ac0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	3318      	adds	r3, #24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f84f 	bl	8002ac0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	68f9      	ldr	r1, [r7, #12]
 8003a4a:	69b8      	ldr	r0, [r7, #24]
 8003a4c:	f001 fc26 	bl	800529c <pxPortInitialiseStack>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a62:	bf00      	nop
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a74:	f001 fd3e 	bl	80054f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <prvAddNewTaskToReadyList+0xc4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <prvAddNewTaskToReadyList+0xc4>)
 8003a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a82:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <prvAddNewTaskToReadyList+0xc4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d110      	bne.n	8003aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a98:	f000 fc28 	bl	80042ec <prvInitialiseTaskLists>
 8003a9c:	e00d      	b.n	8003aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <prvAddNewTaskToReadyList+0xcc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d802      	bhi.n	8003aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <prvAddNewTaskToReadyList+0xd0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <prvAddNewTaskToReadyList+0xd0>)
 8003ac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <prvAddNewTaskToReadyList+0xd0>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <prvAddNewTaskToReadyList+0xd4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d903      	bls.n	8003ae0 <prvAddNewTaskToReadyList+0x74>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <prvAddNewTaskToReadyList+0xd4>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <prvAddNewTaskToReadyList+0xd8>)
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe ffef 	bl	8002ada <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003afc:	f001 fd2a 	bl	8005554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <prvAddNewTaskToReadyList+0xcc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d207      	bcs.n	8003b26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <prvAddNewTaskToReadyList+0xdc>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20001010 	.word	0x20001010
 8003b34:	20000b3c 	.word	0x20000b3c
 8003b38:	2000101c 	.word	0x2000101c
 8003b3c:	2000102c 	.word	0x2000102c
 8003b40:	20001018 	.word	0x20001018
 8003b44:	20000b40 	.word	0x20000b40
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <vTaskDelay+0x60>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <vTaskDelay+0x30>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b7c:	f000 f880 	bl	8003c80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b80:	2100      	movs	r1, #0
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 ffe8 	bl	8004b58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b88:	f000 f888 	bl	8003c9c <xTaskResumeAll>
 8003b8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <vTaskDelay+0x64>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20001038 	.word	0x20001038
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bc2:	463a      	mov	r2, r7
 8003bc4:	1d39      	adds	r1, r7, #4
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ff24 	bl	8002a18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2300      	movs	r3, #0
 8003be0:	460a      	mov	r2, r1
 8003be2:	4921      	ldr	r1, [pc, #132]	; (8003c68 <vTaskStartScheduler+0xb4>)
 8003be4:	4821      	ldr	r0, [pc, #132]	; (8003c6c <vTaskStartScheduler+0xb8>)
 8003be6:	f7ff fe0f 	bl	8003808 <xTaskCreateStatic>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <vTaskStartScheduler+0xbc>)
 8003bee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <vTaskStartScheduler+0xbc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e001      	b.n	8003c02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c08:	f000 fffa 	bl	8004c00 <xTimerCreateTimerTask>
 8003c0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d116      	bne.n	8003c42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	613b      	str	r3, [r7, #16]
}
 8003c26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <vTaskStartScheduler+0xc0>)
 8003c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <vTaskStartScheduler+0xc4>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <vTaskStartScheduler+0xc8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c3c:	f001 fbb8 	bl	80053b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c40:	e00e      	b.n	8003c60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c48:	d10a      	bne.n	8003c60 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60fb      	str	r3, [r7, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <vTaskStartScheduler+0xaa>
}
 8003c60:	bf00      	nop
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	0800b770 	.word	0x0800b770
 8003c6c:	080042bd 	.word	0x080042bd
 8003c70:	20001034 	.word	0x20001034
 8003c74:	20001030 	.word	0x20001030
 8003c78:	2000101c 	.word	0x2000101c
 8003c7c:	20001014 	.word	0x20001014

08003c80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <vTaskSuspendAll+0x18>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	4a03      	ldr	r2, [pc, #12]	; (8003c98 <vTaskSuspendAll+0x18>)
 8003c8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	20001038 	.word	0x20001038

08003c9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003caa:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	603b      	str	r3, [r7, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cc8:	f001 fc14 	bl	80054f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4a38      	ldr	r2, [pc, #224]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d162      	bne.n	8003da4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <xTaskResumeAll+0x11c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d05e      	beq.n	8003da4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce6:	e02f      	b.n	8003d48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <xTaskResumeAll+0x120>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe ff4d 	bl	8002b94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe ff48 	bl	8002b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <xTaskResumeAll+0x124>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d903      	bls.n	8003d18 <xTaskResumeAll+0x7c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <xTaskResumeAll+0x124>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <xTaskResumeAll+0x128>)
 8003d26:	441a      	add	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7fe fed3 	bl	8002ada <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <xTaskResumeAll+0x12c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <xTaskResumeAll+0x130>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d48:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <xTaskResumeAll+0x120>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1cb      	bne.n	8003ce8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d56:	f000 fb67 	bl	8004428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <xTaskResumeAll+0x134>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d66:	f000 f859 	bl	8003e1c <xTaskIncrementTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <xTaskResumeAll+0x130>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f1      	bne.n	8003d66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <xTaskResumeAll+0x134>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <xTaskResumeAll+0x130>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <xTaskResumeAll+0x138>)
 8003d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003da4:	f001 fbd6 	bl	8005554 <vPortExitCritical>

	return xAlreadyYielded;
 8003da8:	68bb      	ldr	r3, [r7, #8]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20001038 	.word	0x20001038
 8003db8:	20001010 	.word	0x20001010
 8003dbc:	20000fd0 	.word	0x20000fd0
 8003dc0:	20001018 	.word	0x20001018
 8003dc4:	20000b40 	.word	0x20000b40
 8003dc8:	20000b3c 	.word	0x20000b3c
 8003dcc:	20001024 	.word	0x20001024
 8003dd0:	20001020 	.word	0x20001020
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <xTaskGetTickCount+0x1c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20001014 	.word	0x20001014

08003df8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dfe:	f001 fc5b 	bl	80056b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <xTaskGetTickCountFromISR+0x20>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e0c:	683b      	ldr	r3, [r7, #0]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20001014 	.word	0x20001014

08003e1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e26:	4b4f      	ldr	r3, [pc, #316]	; (8003f64 <xTaskIncrementTick+0x148>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 808f 	bne.w	8003f4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e30:	4b4d      	ldr	r3, [pc, #308]	; (8003f68 <xTaskIncrementTick+0x14c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e38:	4a4b      	ldr	r2, [pc, #300]	; (8003f68 <xTaskIncrementTick+0x14c>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d120      	bne.n	8003e86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <xTaskIncrementTick+0x150>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	603b      	str	r3, [r7, #0]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <xTaskIncrementTick+0x46>
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <xTaskIncrementTick+0x150>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <xTaskIncrementTick+0x154>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3f      	ldr	r2, [pc, #252]	; (8003f6c <xTaskIncrementTick+0x150>)
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4a3f      	ldr	r2, [pc, #252]	; (8003f70 <xTaskIncrementTick+0x154>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <xTaskIncrementTick+0x158>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <xTaskIncrementTick+0x158>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	f000 fad1 	bl	8004428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e86:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <xTaskIncrementTick+0x15c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d349      	bcc.n	8003f24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <xTaskIncrementTick+0x150>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e9a:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <xTaskIncrementTick+0x15c>)
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ea0:	601a      	str	r2, [r3, #0]
					break;
 8003ea2:	e03f      	b.n	8003f24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea4:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <xTaskIncrementTick+0x150>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d203      	bcs.n	8003ec4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <xTaskIncrementTick+0x15c>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ec2:	e02f      	b.n	8003f24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fe63 	bl	8002b94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fe5a 	bl	8002b94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <xTaskIncrementTick+0x160>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d903      	bls.n	8003ef4 <xTaskIncrementTick+0xd8>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <xTaskIncrementTick+0x160>)
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <xTaskIncrementTick+0x164>)
 8003f02:	441a      	add	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7fe fde5 	bl	8002ada <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <xTaskIncrementTick+0x168>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d3b8      	bcc.n	8003e90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f22:	e7b5      	b.n	8003e90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <xTaskIncrementTick+0x168>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2a:	4915      	ldr	r1, [pc, #84]	; (8003f80 <xTaskIncrementTick+0x164>)
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d901      	bls.n	8003f40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <xTaskIncrementTick+0x16c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e004      	b.n	8003f58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <xTaskIncrementTick+0x170>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <xTaskIncrementTick+0x170>)
 8003f56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f58:	697b      	ldr	r3, [r7, #20]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20001038 	.word	0x20001038
 8003f68:	20001014 	.word	0x20001014
 8003f6c:	20000fc8 	.word	0x20000fc8
 8003f70:	20000fcc 	.word	0x20000fcc
 8003f74:	20001028 	.word	0x20001028
 8003f78:	20001030 	.word	0x20001030
 8003f7c:	20001018 	.word	0x20001018
 8003f80:	20000b40 	.word	0x20000b40
 8003f84:	20000b3c 	.word	0x20000b3c
 8003f88:	20001024 	.word	0x20001024
 8003f8c:	20001020 	.word	0x20001020

08003f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <vTaskSwitchContext+0xa8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f9e:	4b27      	ldr	r3, [pc, #156]	; (800403c <vTaskSwitchContext+0xac>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fa4:	e041      	b.n	800402a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <vTaskSwitchContext+0xac>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <vTaskSwitchContext+0xb0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e010      	b.n	8003fd6 <vTaskSwitchContext+0x46>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	607b      	str	r3, [r7, #4]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <vTaskSwitchContext+0x3e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	491b      	ldr	r1, [pc, #108]	; (8004044 <vTaskSwitchContext+0xb4>)
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0e4      	beq.n	8003fb4 <vTaskSwitchContext+0x24>
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4a13      	ldr	r2, [pc, #76]	; (8004044 <vTaskSwitchContext+0xb4>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	3308      	adds	r3, #8
 800400c:	429a      	cmp	r2, r3
 800400e:	d104      	bne.n	800401a <vTaskSwitchContext+0x8a>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a09      	ldr	r2, [pc, #36]	; (8004048 <vTaskSwitchContext+0xb8>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4a06      	ldr	r2, [pc, #24]	; (8004040 <vTaskSwitchContext+0xb0>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20001038 	.word	0x20001038
 800403c:	20001024 	.word	0x20001024
 8004040:	20001018 	.word	0x20001018
 8004044:	20000b40 	.word	0x20000b40
 8004048:	20000b3c 	.word	0x20000b3c

0800404c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <vTaskPlaceOnEventList+0x44>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3318      	adds	r3, #24
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fd51 	bl	8002b22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004080:	2101      	movs	r1, #1
 8004082:	6838      	ldr	r0, [r7, #0]
 8004084:	f000 fd68 	bl	8004b58 <prvAddCurrentTaskToDelayedList>
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000b3c 	.word	0x20000b3c

08004094 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	617b      	str	r3, [r7, #20]
}
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3318      	adds	r3, #24
 80040c2:	4619      	mov	r1, r3
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7fe fd08 	bl	8002ada <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f000 fd3d 	bl	8004b58 <prvAddCurrentTaskToDelayedList>
	}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000b3c 	.word	0x20000b3c

080040ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60fb      	str	r3, [r7, #12]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	3318      	adds	r3, #24
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fd39 	bl	8002b94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <xTaskRemoveFromEventList+0xb0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11d      	bne.n	8004166 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fd30 	bl	8002b94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <xTaskRemoveFromEventList+0xb4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d903      	bls.n	8004148 <xTaskRemoveFromEventList+0x5c>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <xTaskRemoveFromEventList+0xb4>)
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <xTaskRemoveFromEventList+0xb8>)
 8004156:	441a      	add	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f7fe fcbb 	bl	8002ada <vListInsertEnd>
 8004164:	e005      	b.n	8004172 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3318      	adds	r3, #24
 800416a:	4619      	mov	r1, r3
 800416c:	480e      	ldr	r0, [pc, #56]	; (80041a8 <xTaskRemoveFromEventList+0xbc>)
 800416e:	f7fe fcb4 	bl	8002ada <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <xTaskRemoveFromEventList+0xc0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	429a      	cmp	r2, r3
 800417e:	d905      	bls.n	800418c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <xTaskRemoveFromEventList+0xc4>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e001      	b.n	8004190 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004190:	697b      	ldr	r3, [r7, #20]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20001038 	.word	0x20001038
 80041a0:	20001018 	.word	0x20001018
 80041a4:	20000b40 	.word	0x20000b40
 80041a8:	20000fd0 	.word	0x20000fd0
 80041ac:	20000b3c 	.word	0x20000b3c
 80041b0:	20001024 	.word	0x20001024

080041b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <vTaskInternalSetTimeOutState+0x24>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <vTaskInternalSetTimeOutState+0x28>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	20001028 	.word	0x20001028
 80041dc:	20001014 	.word	0x20001014

080041e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	613b      	str	r3, [r7, #16]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60fb      	str	r3, [r7, #12]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004222:	f001 f967 	bl	80054f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004226:	4b1d      	ldr	r3, [pc, #116]	; (800429c <xTaskCheckForTimeOut+0xbc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423e:	d102      	bne.n	8004246 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	e023      	b.n	800428e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <xTaskCheckForTimeOut+0xc0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d007      	beq.n	8004262 <xTaskCheckForTimeOut+0x82>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e015      	b.n	800428e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d20b      	bcs.n	8004284 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff9b 	bl	80041b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e004      	b.n	800428e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800428e:	f001 f961 	bl	8005554 <vPortExitCritical>

	return xReturn;
 8004292:	69fb      	ldr	r3, [r7, #28]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20001014 	.word	0x20001014
 80042a0:	20001028 	.word	0x20001028

080042a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <vTaskMissedYield+0x14>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20001024 	.word	0x20001024

080042bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042c4:	f000 f852 	bl	800436c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvIdleTask+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d9f9      	bls.n	80042c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <prvIdleTask+0x2c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e0:	e7f0      	b.n	80042c4 <prvIdleTask+0x8>
 80042e2:	bf00      	nop
 80042e4:	20000b40 	.word	0x20000b40
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e00c      	b.n	8004312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <prvInitialiseTaskLists+0x60>)
 8004304:	4413      	add	r3, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fbba 	bl	8002a80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b37      	cmp	r3, #55	; 0x37
 8004316:	d9ef      	bls.n	80042f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004318:	480d      	ldr	r0, [pc, #52]	; (8004350 <prvInitialiseTaskLists+0x64>)
 800431a:	f7fe fbb1 	bl	8002a80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800431e:	480d      	ldr	r0, [pc, #52]	; (8004354 <prvInitialiseTaskLists+0x68>)
 8004320:	f7fe fbae 	bl	8002a80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <prvInitialiseTaskLists+0x6c>)
 8004326:	f7fe fbab 	bl	8002a80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800432a:	480c      	ldr	r0, [pc, #48]	; (800435c <prvInitialiseTaskLists+0x70>)
 800432c:	f7fe fba8 	bl	8002a80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004330:	480b      	ldr	r0, [pc, #44]	; (8004360 <prvInitialiseTaskLists+0x74>)
 8004332:	f7fe fba5 	bl	8002a80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <prvInitialiseTaskLists+0x78>)
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <prvInitialiseTaskLists+0x64>)
 800433a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvInitialiseTaskLists+0x7c>)
 800433e:	4a05      	ldr	r2, [pc, #20]	; (8004354 <prvInitialiseTaskLists+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000b40 	.word	0x20000b40
 8004350:	20000fa0 	.word	0x20000fa0
 8004354:	20000fb4 	.word	0x20000fb4
 8004358:	20000fd0 	.word	0x20000fd0
 800435c:	20000fe4 	.word	0x20000fe4
 8004360:	20000ffc 	.word	0x20000ffc
 8004364:	20000fc8 	.word	0x20000fc8
 8004368:	20000fcc 	.word	0x20000fcc

0800436c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004372:	e019      	b.n	80043a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004374:	f001 f8be 	bl	80054f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b10      	ldr	r3, [pc, #64]	; (80043bc <prvCheckTasksWaitingTermination+0x50>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe fc05 	bl	8002b94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <prvCheckTasksWaitingTermination+0x54>)
 8004392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 800439c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800439e:	f001 f8d9 	bl	8005554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f810 	bl	80043c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <prvCheckTasksWaitingTermination+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e1      	bne.n	8004374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000fe4 	.word	0x20000fe4
 80043c0:	20001010 	.word	0x20001010
 80043c4:	20000ff8 	.word	0x20000ff8

080043c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d108      	bne.n	80043ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 fa76 	bl	80058d0 <vPortFree>
				vPortFree( pxTCB );
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f001 fa73 	bl	80058d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ea:	e018      	b.n	800441e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d103      	bne.n	80043fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 fa6a 	bl	80058d0 <vPortFree>
	}
 80043fc:	e00f      	b.n	800441e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004404:	2b02      	cmp	r3, #2
 8004406:	d00a      	beq.n	800441e <prvDeleteTCB+0x56>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <prvDeleteTCB+0x54>
	}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <prvResetNextTaskUnblockTime+0x38>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvResetNextTaskUnblockTime+0x3c>)
 800443a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800443e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004440:	e008      	b.n	8004454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <prvResetNextTaskUnblockTime+0x38>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <prvResetNextTaskUnblockTime+0x3c>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20000fc8 	.word	0x20000fc8
 8004464:	20001030 	.word	0x20001030

08004468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <xTaskGetSchedulerState+0x34>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004476:	2301      	movs	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e008      	b.n	800448e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <xTaskGetSchedulerState+0x38>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004484:	2302      	movs	r3, #2
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	e001      	b.n	800448e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800448e:	687b      	ldr	r3, [r7, #4]
	}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	2000101c 	.word	0x2000101c
 80044a0:	20001038 	.word	0x20001038

080044a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d051      	beq.n	800455e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <xTaskPriorityInherit+0xc4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d241      	bcs.n	800454c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	db06      	blt.n	80044de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	4b25      	ldr	r3, [pc, #148]	; (8004568 <xTaskPriorityInherit+0xc4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6959      	ldr	r1, [r3, #20]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4a1f      	ldr	r2, [pc, #124]	; (800456c <xTaskPriorityInherit+0xc8>)
 80044f0:	4413      	add	r3, r2
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d122      	bne.n	800453c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fb4a 	bl	8002b94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <xTaskPriorityInherit+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4b18      	ldr	r3, [pc, #96]	; (8004570 <xTaskPriorityInherit+0xcc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d903      	bls.n	800451e <xTaskPriorityInherit+0x7a>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <xTaskPriorityInherit+0xcc>)
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <xTaskPriorityInherit+0xc8>)
 800452c:	441a      	add	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7fe fad0 	bl	8002ada <vListInsertEnd>
 800453a:	e004      	b.n	8004546 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <xTaskPriorityInherit+0xc4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e008      	b.n	800455e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <xTaskPriorityInherit+0xc4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	429a      	cmp	r2, r3
 8004558:	d201      	bcs.n	800455e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800455e:	68fb      	ldr	r3, [r7, #12]
	}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000b3c 	.word	0x20000b3c
 800456c:	20000b40 	.word	0x20000b40
 8004570:	20001018 	.word	0x20001018

08004574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d056      	beq.n	8004638 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800458a:	4b2e      	ldr	r3, [pc, #184]	; (8004644 <xTaskPriorityDisinherit+0xd0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d00a      	beq.n	80045aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60bb      	str	r3, [r7, #8]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	1e5a      	subs	r2, r3, #1
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	429a      	cmp	r2, r3
 80045dc:	d02c      	beq.n	8004638 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d128      	bne.n	8004638 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fad2 	bl	8002b94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <xTaskPriorityDisinherit+0xd4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d903      	bls.n	8004618 <xTaskPriorityDisinherit+0xa4>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <xTaskPriorityDisinherit+0xd4>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4a09      	ldr	r2, [pc, #36]	; (800464c <xTaskPriorityDisinherit+0xd8>)
 8004626:	441a      	add	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f7fe fa53 	bl	8002ada <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004638:	697b      	ldr	r3, [r7, #20]
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000b3c 	.word	0x20000b3c
 8004648:	20001018 	.word	0x20001018
 800464c:	20000b40 	.word	0x20000b40

08004650 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800465e:	2301      	movs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d06a      	beq.n	800473e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d902      	bls.n	8004696 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e002      	b.n	800469c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d04b      	beq.n	800473e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d146      	bne.n	800473e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d10a      	bne.n	80046d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60bb      	str	r3, [r7, #8]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db04      	blt.n	80046ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	6959      	ldr	r1, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80046fe:	4413      	add	r3, r2
 8004700:	4299      	cmp	r1, r3
 8004702:	d11c      	bne.n	800473e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	3304      	adds	r3, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe fa43 	bl	8002b94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d903      	bls.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004730:	441a      	add	r2, r3
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe f9ce 	bl	8002ada <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800473e:	bf00      	nop
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000b3c 	.word	0x20000b3c
 800474c:	20000b40 	.word	0x20000b40
 8004750:	20001018 	.word	0x20001018

08004754 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <pvTaskIncrementMutexHeldCount+0x24>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <pvTaskIncrementMutexHeldCount+0x24>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004766:	3201      	adds	r2, #1
 8004768:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800476a:	4b03      	ldr	r3, [pc, #12]	; (8004778 <pvTaskIncrementMutexHeldCount+0x24>)
 800476c:	681b      	ldr	r3, [r3, #0]
	}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000b3c 	.word	0x20000b3c

0800477c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800478a:	f000 feb3 	bl	80054f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <xTaskNotifyWait+0xac>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d01a      	beq.n	80047d2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800479c:	4b22      	ldr	r3, [pc, #136]	; (8004828 <xTaskNotifyWait+0xac>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	43d2      	mvns	r2, r2
 80047a6:	400a      	ands	r2, r1
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <xTaskNotifyWait+0xac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047ba:	2101      	movs	r1, #1
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f000 f9cb 	bl	8004b58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <xTaskNotifyWait+0xb0>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80047d2:	f000 febf 	bl	8005554 <vPortExitCritical>

		taskENTER_CRITICAL();
 80047d6:	f000 fe8d 	bl	80054f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <xTaskNotifyWait+0xac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <xTaskNotifyWait+0xac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d002      	beq.n	80047fe <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e008      	b.n	8004810 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <xTaskNotifyWait+0xac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	43d2      	mvns	r2, r2
 8004808:	400a      	ands	r2, r1
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <xTaskNotifyWait+0xac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800481a:	f000 fe9b 	bl	8005554 <vPortExitCritical>

		return xReturn;
 800481e:	697b      	ldr	r3, [r7, #20]
	}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000b3c 	.word	0x20000b3c
 800482c:	e000ed04 	.word	0xe000ed04

08004830 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004840:	2301      	movs	r3, #1
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <xTaskGenericNotify+0x30>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	61bb      	str	r3, [r7, #24]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004864:	f000 fe46 	bl	80054f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800487c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d828      	bhi.n	80048de <xTaskGenericNotify+0xae>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <xTaskGenericNotify+0x64>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048ff 	.word	0x080048ff
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048b7 	.word	0x080048b7
 80048a0:	080048c3 	.word	0x080048c3
 80048a4:	080048cb 	.word	0x080048cb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80048b4:	e026      	b.n	8004904 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80048c0:	e020      	b.n	8004904 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80048c8:	e01c      	b.n	8004904 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80048ca:	7ffb      	ldrb	r3, [r7, #31]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d003      	beq.n	80048d8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80048d6:	e015      	b.n	8004904 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80048dc:	e012      	b.n	8004904 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e6:	d00c      	beq.n	8004902 <xTaskGenericNotify+0xd2>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	617b      	str	r3, [r7, #20]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xTaskGenericNotify+0xcc>
					break;
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <xTaskGenericNotify+0xd4>

					break;
 8004902:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004904:	7ffb      	ldrb	r3, [r7, #31]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d13a      	bne.n	8004980 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe f940 	bl	8002b94 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <xTaskGenericNotify+0x160>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d903      	bls.n	8004928 <xTaskGenericNotify+0xf8>
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	4a1a      	ldr	r2, [pc, #104]	; (8004990 <xTaskGenericNotify+0x160>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <xTaskGenericNotify+0x164>)
 8004936:	441a      	add	r2, r3
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe f8cb 	bl	8002ada <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <xTaskGenericNotify+0x132>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	613b      	str	r3, [r7, #16]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <xTaskGenericNotify+0x168>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	429a      	cmp	r2, r3
 800496e:	d907      	bls.n	8004980 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <xTaskGenericNotify+0x16c>)
 8004972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004980:	f000 fde8 	bl	8005554 <vPortExitCritical>

		return xReturn;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004986:	4618      	mov	r0, r3
 8004988:	3728      	adds	r7, #40	; 0x28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20001018 	.word	0x20001018
 8004994:	20000b40 	.word	0x20000b40
 8004998:	20000b3c 	.word	0x20000b3c
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	; 0x38
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80049b0:	2301      	movs	r3, #1
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049d0:	f000 fe72 	bl	80056b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80049d8:	f3ef 8211 	mrs	r2, BASEPRI
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	623a      	str	r2, [r7, #32]
 80049ee:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80049f0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d828      	bhi.n	8004a6c <xTaskGenericNotifyFromISR+0xcc>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <xTaskGenericNotifyFromISR+0x80>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a8d 	.word	0x08004a8d
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a43 	.word	0x08004a43
 8004a2c:	08004a4f 	.word	0x08004a4f
 8004a30:	08004a57 	.word	0x08004a57
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004a40:	e027      	b.n	8004a92 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004a4c:	e021      	b.n	8004a92 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004a54:	e01d      	b.n	8004a92 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004a56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d003      	beq.n	8004a66 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004a64:	e015      	b.n	8004a92 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004a6a:	e012      	b.n	8004a92 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a74:	d00c      	beq.n	8004a90 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	61bb      	str	r3, [r7, #24]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xTaskGenericNotifyFromISR+0xea>
					break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004a90:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d146      	bne.n	8004b28 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	617b      	str	r3, [r7, #20]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <xTaskGenericNotifyFromISR+0x1a0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe f865 	bl	8002b94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <xTaskGenericNotifyFromISR+0x1a4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d903      	bls.n	8004ade <xTaskGenericNotifyFromISR+0x13e>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <xTaskGenericNotifyFromISR+0x1a4>)
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <xTaskGenericNotifyFromISR+0x1a8>)
 8004aec:	441a      	add	r2, r3
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7fd fff0 	bl	8002ada <vListInsertEnd>
 8004afa:	e005      	b.n	8004b08 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	3318      	adds	r3, #24
 8004b00:	4619      	mov	r1, r3
 8004b02:	4812      	ldr	r0, [pc, #72]	; (8004b4c <xTaskGenericNotifyFromISR+0x1ac>)
 8004b04:	f7fd ffe9 	bl	8002ada <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <xTaskGenericNotifyFromISR+0x1b0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d908      	bls.n	8004b28 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <xTaskGenericNotifyFromISR+0x1b4>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f383 8811 	msr	BASEPRI, r3
}
 8004b32:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3738      	adds	r7, #56	; 0x38
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20001038 	.word	0x20001038
 8004b44:	20001018 	.word	0x20001018
 8004b48:	20000b40 	.word	0x20000b40
 8004b4c:	20000fd0 	.word	0x20000fd0
 8004b50:	20000b3c 	.word	0x20000b3c
 8004b54:	20001024 	.word	0x20001024

08004b58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b62:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b68:	4b20      	ldr	r3, [pc, #128]	; (8004bec <prvAddCurrentTaskToDelayedList+0x94>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f810 	bl	8002b94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7a:	d10a      	bne.n	8004b92 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <prvAddCurrentTaskToDelayedList+0x94>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4819      	ldr	r0, [pc, #100]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b8c:	f7fd ffa5 	bl	8002ada <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b90:	e026      	b.n	8004be0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4413      	add	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b9a:	4b14      	ldr	r3, [pc, #80]	; (8004bec <prvAddCurrentTaskToDelayedList+0x94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d209      	bcs.n	8004bbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fd ffb3 	bl	8002b22 <vListInsert>
}
 8004bbc:	e010      	b.n	8004be0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f7fd ffa9 	bl	8002b22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d202      	bcs.n	8004be0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20001014 	.word	0x20001014
 8004bec:	20000b3c 	.word	0x20000b3c
 8004bf0:	20000ffc 	.word	0x20000ffc
 8004bf4:	20000fcc 	.word	0x20000fcc
 8004bf8:	20000fc8 	.word	0x20000fc8
 8004bfc:	20001030 	.word	0x20001030

08004c00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c0a:	f000 fb07 	bl	800521c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c0e:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <xTimerCreateTimerTask+0x80>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d021      	beq.n	8004c5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c1e:	1d3a      	adds	r2, r7, #4
 8004c20:	f107 0108 	add.w	r1, r7, #8
 8004c24:	f107 030c 	add.w	r3, r7, #12
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd ff0f 	bl	8002a4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	9202      	str	r2, [sp, #8]
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	2302      	movs	r3, #2
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	460a      	mov	r2, r1
 8004c40:	4910      	ldr	r1, [pc, #64]	; (8004c84 <xTimerCreateTimerTask+0x84>)
 8004c42:	4811      	ldr	r0, [pc, #68]	; (8004c88 <xTimerCreateTimerTask+0x88>)
 8004c44:	f7fe fde0 	bl	8003808 <xTaskCreateStatic>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <xTimerCreateTimerTask+0x8c>)
 8004c4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <xTimerCreateTimerTask+0x8c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c56:	2301      	movs	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c76:	697b      	ldr	r3, [r7, #20]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	2000106c 	.word	0x2000106c
 8004c84:	0800b778 	.word	0x0800b778
 8004c88:	08004dc5 	.word	0x08004dc5
 8004c8c:	20001070 	.word	0x20001070

08004c90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	623b      	str	r3, [r7, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <xTimerGenericCommand+0x98>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d02a      	beq.n	8004d1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	dc18      	bgt.n	8004d0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cd8:	f7ff fbc6 	bl	8004468 <xTaskGetSchedulerState>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d109      	bne.n	8004cf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <xTimerGenericCommand+0x98>)
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	f107 0110 	add.w	r1, r7, #16
 8004cea:	2300      	movs	r3, #0
 8004cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cee:	f7fe f87f 	bl	8002df0 <xQueueGenericSend>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8004cf4:	e012      	b.n	8004d1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <xTimerGenericCommand+0x98>)
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	f107 0110 	add.w	r1, r7, #16
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2200      	movs	r2, #0
 8004d02:	f7fe f875 	bl	8002df0 <xQueueGenericSend>
 8004d06:	6278      	str	r0, [r7, #36]	; 0x24
 8004d08:	e008      	b.n	8004d1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d0a:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <xTimerGenericCommand+0x98>)
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	f107 0110 	add.w	r1, r7, #16
 8004d12:	2300      	movs	r3, #0
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	f7fe f969 	bl	8002fec <xQueueGenericSendFromISR>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3728      	adds	r7, #40	; 0x28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	2000106c 	.word	0x2000106c

08004d2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d36:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <prvProcessExpiredTimer+0x94>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd ff25 	bl	8002b94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d022      	beq.n	8004d9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	18d1      	adds	r1, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	6978      	ldr	r0, [r7, #20]
 8004d66:	f000 f8d1 	bl	8004f0c <prvInsertTimerInActiveList>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01f      	beq.n	8004db0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d70:	2300      	movs	r3, #0
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	2100      	movs	r1, #0
 8004d7a:	6978      	ldr	r0, [r7, #20]
 8004d7c:	f7ff ff88 	bl	8004c90 <xTimerGenericCommand>
 8004d80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d113      	bne.n	8004db0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	60fb      	str	r3, [r7, #12]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	6978      	ldr	r0, [r7, #20]
 8004db6:	4798      	blx	r3
}
 8004db8:	bf00      	nop
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20001064 	.word	0x20001064

08004dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f857 	bl	8004e84 <prvGetNextExpireTime>
 8004dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f803 	bl	8004de8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004de2:	f000 f8d5 	bl	8004f90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de6:	e7f1      	b.n	8004dcc <prvTimerTask+0x8>

08004de8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004df2:	f7fe ff45 	bl	8003c80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f866 	bl	8004ecc <prvSampleTimeNow>
 8004e00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d130      	bne.n	8004e6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <prvProcessTimerOrBlockTask+0x3c>
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d806      	bhi.n	8004e24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e16:	f7fe ff41 	bl	8003c9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e1a:	68f9      	ldr	r1, [r7, #12]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ff85 	bl	8004d2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e22:	e024      	b.n	8004e6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e2a:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <prvProcessTimerOrBlockTask+0x90>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <prvProcessTimerOrBlockTask+0x50>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <prvProcessTimerOrBlockTask+0x52>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <prvProcessTimerOrBlockTask+0x94>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fe fca9 	bl	80037a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e4e:	f7fe ff25 	bl	8003c9c <xTaskResumeAll>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <prvProcessTimerOrBlockTask+0x98>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
}
 8004e68:	e001      	b.n	8004e6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e6a:	f7fe ff17 	bl	8003c9c <xTaskResumeAll>
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20001068 	.word	0x20001068
 8004e7c:	2000106c 	.word	0x2000106c
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <prvGetNextExpireTime+0x44>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <prvGetNextExpireTime+0x16>
 8004e96:	2201      	movs	r2, #1
 8004e98:	e000      	b.n	8004e9c <prvGetNextExpireTime+0x18>
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <prvGetNextExpireTime+0x44>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e001      	b.n	8004eb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20001064 	.word	0x20001064

08004ecc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ed4:	f7fe ff80 	bl	8003dd8 <xTaskGetTickCount>
 8004ed8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <prvSampleTimeNow+0x3c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d205      	bcs.n	8004ef0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ee4:	f000 f936 	bl	8005154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ef6:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <prvSampleTimeNow+0x3c>)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20001074 	.word	0x20001074

08004f0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d812      	bhi.n	8004f58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad2      	subs	r2, r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e01b      	b.n	8004f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <prvInsertTimerInActiveList+0x7c>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f7fd fde6 	bl	8002b22 <vListInsert>
 8004f56:	e012      	b.n	8004f7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d206      	bcs.n	8004f6e <prvInsertTimerInActiveList+0x62>
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d302      	bcc.n	8004f6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e007      	b.n	8004f7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <prvInsertTimerInActiveList+0x80>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fd fdd2 	bl	8002b22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f7e:	697b      	ldr	r3, [r7, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20001068 	.word	0x20001068
 8004f8c:	20001064 	.word	0x20001064

08004f90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	; 0x38
 8004f94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f96:	e0ca      	b.n	800512e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da18      	bge.n	8004fd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	61fb      	str	r3, [r7, #28]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc6:	6850      	ldr	r0, [r2, #4]
 8004fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f2c0 80aa 	blt.w	800512c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd fdd3 	bl	8002b94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fee:	463b      	mov	r3, r7
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ff6b 	bl	8004ecc <prvSampleTimeNow>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	f200 8097 	bhi.w	800512e <prvProcessReceivedCommands+0x19e>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <prvProcessReceivedCommands+0x78>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	08005031 	.word	0x08005031
 800500c:	08005031 	.word	0x08005031
 8005010:	08005031 	.word	0x08005031
 8005014:	080050a5 	.word	0x080050a5
 8005018:	080050b9 	.word	0x080050b9
 800501c:	08005103 	.word	0x08005103
 8005020:	08005031 	.word	0x08005031
 8005024:	08005031 	.word	0x08005031
 8005028:	080050a5 	.word	0x080050a5
 800502c:	080050b9 	.word	0x080050b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	18d1      	adds	r1, r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005050:	f7ff ff5c 	bl	8004f0c <prvInsertTimerInActiveList>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d069      	beq.n	800512e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005060:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d05e      	beq.n	800512e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	441a      	add	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	2100      	movs	r1, #0
 8005080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005082:	f7ff fe05 	bl	8004c90 <xTimerGenericCommand>
 8005086:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d14f      	bne.n	800512e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	61bb      	str	r3, [r7, #24]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80050b6:	e03a      	b.n	800512e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	617b      	str	r3, [r7, #20]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	18d1      	adds	r1, r2, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fc:	f7ff ff06 	bl	8004f0c <prvInsertTimerInActiveList>
					break;
 8005100:	e015      	b.n	800512e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005112:	f000 fbdd 	bl	80058d0 <vPortFree>
 8005116:	e00a      	b.n	800512e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800512a:	e000      	b.n	800512e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800512c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <prvProcessReceivedCommands+0x1c0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	1d39      	adds	r1, r7, #4
 8005134:	2200      	movs	r2, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f7fd fff4 	bl	8003124 <xQueueReceive>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af2a 	bne.w	8004f98 <prvProcessReceivedCommands+0x8>
	}
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3730      	adds	r7, #48	; 0x30
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	2000106c 	.word	0x2000106c

08005154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800515a:	e048      	b.n	80051ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800515c:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <prvSwitchTimerLists+0xc0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005166:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <prvSwitchTimerLists+0xc0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd fd0d 	bl	8002b94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02e      	beq.n	80051ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90e      	bls.n	80051c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ae:	4b19      	ldr	r3, [pc, #100]	; (8005214 <prvSwitchTimerLists+0xc0>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f7fd fcb2 	bl	8002b22 <vListInsert>
 80051be:	e016      	b.n	80051ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	2100      	movs	r1, #0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fd60 	bl	8004c90 <xTimerGenericCommand>
 80051d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	603b      	str	r3, [r7, #0]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <prvSwitchTimerLists+0xc0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1b1      	bne.n	800515c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <prvSwitchTimerLists+0xc0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <prvSwitchTimerLists+0xc4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a04      	ldr	r2, [pc, #16]	; (8005214 <prvSwitchTimerLists+0xc0>)
 8005204:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005206:	4a04      	ldr	r2, [pc, #16]	; (8005218 <prvSwitchTimerLists+0xc4>)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20001064 	.word	0x20001064
 8005218:	20001068 	.word	0x20001068

0800521c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005222:	f000 f967 	bl	80054f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <prvCheckForValidListAndQueue+0x60>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d120      	bne.n	8005270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800522e:	4814      	ldr	r0, [pc, #80]	; (8005280 <prvCheckForValidListAndQueue+0x64>)
 8005230:	f7fd fc26 	bl	8002a80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005234:	4813      	ldr	r0, [pc, #76]	; (8005284 <prvCheckForValidListAndQueue+0x68>)
 8005236:	f7fd fc23 	bl	8002a80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800523a:	4b13      	ldr	r3, [pc, #76]	; (8005288 <prvCheckForValidListAndQueue+0x6c>)
 800523c:	4a10      	ldr	r2, [pc, #64]	; (8005280 <prvCheckForValidListAndQueue+0x64>)
 800523e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <prvCheckForValidListAndQueue+0x70>)
 8005242:	4a10      	ldr	r2, [pc, #64]	; (8005284 <prvCheckForValidListAndQueue+0x68>)
 8005244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005246:	2300      	movs	r3, #0
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <prvCheckForValidListAndQueue+0x74>)
 800524c:	4a11      	ldr	r2, [pc, #68]	; (8005294 <prvCheckForValidListAndQueue+0x78>)
 800524e:	2110      	movs	r1, #16
 8005250:	200a      	movs	r0, #10
 8005252:	f7fd fd31 	bl	8002cb8 <xQueueGenericCreateStatic>
 8005256:	4603      	mov	r3, r0
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <prvCheckForValidListAndQueue+0x60>)
 800525a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <prvCheckForValidListAndQueue+0x60>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <prvCheckForValidListAndQueue+0x60>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	490b      	ldr	r1, [pc, #44]	; (8005298 <prvCheckForValidListAndQueue+0x7c>)
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fa6e 	bl	800374c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005270:	f000 f970 	bl	8005554 <vPortExitCritical>
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000106c 	.word	0x2000106c
 8005280:	2000103c 	.word	0x2000103c
 8005284:	20001050 	.word	0x20001050
 8005288:	20001064 	.word	0x20001064
 800528c:	20001068 	.word	0x20001068
 8005290:	20001118 	.word	0x20001118
 8005294:	20001078 	.word	0x20001078
 8005298:	0800b780 	.word	0x0800b780

0800529c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3b04      	subs	r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052cc:	4a0c      	ldr	r2, [pc, #48]	; (8005300 <pxPortInitialiseStack+0x64>)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b14      	subs	r3, #20
 80052d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3b04      	subs	r3, #4
 80052e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f06f 0202 	mvn.w	r2, #2
 80052ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b20      	subs	r3, #32
 80052f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052f2:	68fb      	ldr	r3, [r7, #12]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	08005305 	.word	0x08005305

08005304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <prvTaskExitError+0x54>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005316:	d00a      	beq.n	800532e <prvTaskExitError+0x2a>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	60fb      	str	r3, [r7, #12]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <prvTaskExitError+0x28>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60bb      	str	r3, [r7, #8]
}
 8005340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005342:	bf00      	nop
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0fc      	beq.n	8005344 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	20000010 	.word	0x20000010
 800535c:	00000000 	.word	0x00000000

08005360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <pxCurrentTCBConst2>)
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	6808      	ldr	r0, [r1, #0]
 8005366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	f380 8809 	msr	PSP, r0
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8811 	msr	BASEPRI, r0
 800537a:	4770      	bx	lr
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst2>:
 8005380:	20000b3c 	.word	0x20000b3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005388:	4808      	ldr	r0, [pc, #32]	; (80053ac <prvPortStartFirstTask+0x24>)
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	6800      	ldr	r0, [r0, #0]
 800538e:	f380 8808 	msr	MSP, r0
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8814 	msr	CONTROL, r0
 800539a:	b662      	cpsie	i
 800539c:	b661      	cpsie	f
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	df00      	svc	0
 80053a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053aa:	bf00      	nop
 80053ac:	e000ed08 	.word	0xe000ed08

080053b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053b6:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <xPortStartScheduler+0x120>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a46      	ldr	r2, [pc, #280]	; (80054d4 <xPortStartScheduler+0x124>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10a      	bne.n	80053d6 <xPortStartScheduler+0x26>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	613b      	str	r3, [r7, #16]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053d6:	4b3e      	ldr	r3, [pc, #248]	; (80054d0 <xPortStartScheduler+0x120>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a3f      	ldr	r2, [pc, #252]	; (80054d8 <xPortStartScheduler+0x128>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10a      	bne.n	80053f6 <xPortStartScheduler+0x46>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <xPortStartScheduler+0x12c>)
 80053f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005418:	b2da      	uxtb	r2, r3
 800541a:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <xPortStartScheduler+0x130>)
 800541c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800541e:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <xPortStartScheduler+0x134>)
 8005420:	2207      	movs	r2, #7
 8005422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005424:	e009      	b.n	800543a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <xPortStartScheduler+0x134>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3b01      	subs	r3, #1
 800542c:	4a2d      	ldr	r2, [pc, #180]	; (80054e4 <xPortStartScheduler+0x134>)
 800542e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d0ef      	beq.n	8005426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005446:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <xPortStartScheduler+0x134>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1c3 0307 	rsb	r3, r3, #7
 800544e:	2b04      	cmp	r3, #4
 8005450:	d00a      	beq.n	8005468 <xPortStartScheduler+0xb8>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	60bb      	str	r3, [r7, #8]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005468:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <xPortStartScheduler+0x134>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <xPortStartScheduler+0x134>)
 8005470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <xPortStartScheduler+0x134>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800547a:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <xPortStartScheduler+0x134>)
 800547c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005486:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <xPortStartScheduler+0x138>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <xPortStartScheduler+0x138>)
 800548c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <xPortStartScheduler+0x138>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <xPortStartScheduler+0x138>)
 8005498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800549c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800549e:	f000 f8dd 	bl	800565c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <xPortStartScheduler+0x13c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054a8:	f000 f8fc 	bl	80056a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054ac:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <xPortStartScheduler+0x140>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0f      	ldr	r2, [pc, #60]	; (80054f0 <xPortStartScheduler+0x140>)
 80054b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054b8:	f7ff ff66 	bl	8005388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054bc:	f7fe fd68 	bl	8003f90 <vTaskSwitchContext>
	prvTaskExitError();
 80054c0:	f7ff ff20 	bl	8005304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	e000ed00 	.word	0xe000ed00
 80054d4:	410fc271 	.word	0x410fc271
 80054d8:	410fc270 	.word	0x410fc270
 80054dc:	e000e400 	.word	0xe000e400
 80054e0:	20001168 	.word	0x20001168
 80054e4:	2000116c 	.word	0x2000116c
 80054e8:	e000ed20 	.word	0xe000ed20
 80054ec:	20000010 	.word	0x20000010
 80054f0:	e000ef34 	.word	0xe000ef34

080054f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	607b      	str	r3, [r7, #4]
}
 800550c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <vPortEnterCritical+0x58>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a0d      	ldr	r2, [pc, #52]	; (800554c <vPortEnterCritical+0x58>)
 8005516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <vPortEnterCritical+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10f      	bne.n	8005540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <vPortEnterCritical+0x5c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <vPortEnterCritical+0x4c>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	603b      	str	r3, [r7, #0]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <vPortEnterCritical+0x4a>
	}
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000010 	.word	0x20000010
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <vPortExitCritical+0x50>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <vPortExitCritical+0x24>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	607b      	str	r3, [r7, #4]
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <vPortExitCritical+0x50>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <vPortExitCritical+0x50>)
 8005580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <vPortExitCritical+0x50>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <vPortExitCritical+0x42>
 800558a:	2300      	movs	r3, #0
 800558c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f383 8811 	msr	BASEPRI, r3
}
 8005594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000010 	.word	0x20000010
	...

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f01e 0f10 	tst.w	lr, #16
 80055c0:	bf08      	it	eq
 80055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055d4:	f380 8811 	msr	BASEPRI, r0
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f7fe fcd6 	bl	8003f90 <vTaskSwitchContext>
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	bc09      	pop	{r0, r3}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f6:	f01e 0f10 	tst.w	lr, #16
 80055fa:	bf08      	it	eq
 80055fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005600:	f380 8809 	msr	PSP, r0
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst>:
 8005610:	20000b3c 	.word	0x20000b3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005632:	f7fe fbf3 	bl	8003e1c <xTaskIncrementTick>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <xPortSysTickHandler+0x40>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f383 8811 	msr	BASEPRI, r3
}
 800564e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <vPortSetupTimerInterrupt+0x34>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <vPortSetupTimerInterrupt+0x38>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <vPortSetupTimerInterrupt+0x3c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <vPortSetupTimerInterrupt+0x40>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <vPortSetupTimerInterrupt+0x44>)
 800567a:	3b01      	subs	r3, #1
 800567c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <vPortSetupTimerInterrupt+0x34>)
 8005680:	2207      	movs	r2, #7
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	e000e010 	.word	0xe000e010
 8005694:	e000e018 	.word	0xe000e018
 8005698:	2000001c 	.word	0x2000001c
 800569c:	10624dd3 	.word	0x10624dd3
 80056a0:	e000e014 	.word	0xe000e014

080056a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056b4 <vPortEnableVFP+0x10>
 80056a8:	6801      	ldr	r1, [r0, #0]
 80056aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ae:	6001      	str	r1, [r0, #0]
 80056b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056b2:	bf00      	nop
 80056b4:	e000ed88 	.word	0xe000ed88

080056b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056be:	f3ef 8305 	mrs	r3, IPSR
 80056c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b0f      	cmp	r3, #15
 80056c8:	d914      	bls.n	80056f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <vPortValidateInterruptPriority+0x70>)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <vPortValidateInterruptPriority+0x74>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	7afa      	ldrb	r2, [r7, #11]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d20a      	bcs.n	80056f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <vPortValidateInterruptPriority+0x78>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056fc:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <vPortValidateInterruptPriority+0x7c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d90a      	bls.n	800571a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	603b      	str	r3, [r7, #0]
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <vPortValidateInterruptPriority+0x60>
	}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	e000e3f0 	.word	0xe000e3f0
 800572c:	20001168 	.word	0x20001168
 8005730:	e000ed0c 	.word	0xe000ed0c
 8005734:	2000116c 	.word	0x2000116c

08005738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005744:	f7fe fa9c 	bl	8003c80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005748:	4b5b      	ldr	r3, [pc, #364]	; (80058b8 <pvPortMalloc+0x180>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005750:	f000 f920 	bl	8005994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005754:	4b59      	ldr	r3, [pc, #356]	; (80058bc <pvPortMalloc+0x184>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 8093 	bne.w	8005888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01d      	beq.n	80057a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005768:	2208      	movs	r2, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d014      	beq.n	80057a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f023 0307 	bic.w	r3, r3, #7
 8005780:	3308      	adds	r3, #8
 8005782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <pvPortMalloc+0x6c>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	617b      	str	r3, [r7, #20]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d06e      	beq.n	8005888 <pvPortMalloc+0x150>
 80057aa:	4b45      	ldr	r3, [pc, #276]	; (80058c0 <pvPortMalloc+0x188>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d869      	bhi.n	8005888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057b4:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <pvPortMalloc+0x18c>)
 80057b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057b8:	4b42      	ldr	r3, [pc, #264]	; (80058c4 <pvPortMalloc+0x18c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057be:	e004      	b.n	80057ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d903      	bls.n	80057dc <pvPortMalloc+0xa4>
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f1      	bne.n	80057c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057dc:	4b36      	ldr	r3, [pc, #216]	; (80058b8 <pvPortMalloc+0x180>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d050      	beq.n	8005888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2208      	movs	r2, #8
 80057ec:	4413      	add	r3, r2
 80057ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	2308      	movs	r3, #8
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	429a      	cmp	r2, r3
 8005806:	d91f      	bls.n	8005848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <pvPortMalloc+0xf8>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	613b      	str	r3, [r7, #16]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005842:	69b8      	ldr	r0, [r7, #24]
 8005844:	f000 f908 	bl	8005a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005848:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <pvPortMalloc+0x188>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <pvPortMalloc+0x188>)
 8005854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <pvPortMalloc+0x188>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <pvPortMalloc+0x190>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d203      	bcs.n	800586a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005862:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <pvPortMalloc+0x188>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <pvPortMalloc+0x190>)
 8005868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <pvPortMalloc+0x184>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	431a      	orrs	r2, r3
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <pvPortMalloc+0x194>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a11      	ldr	r2, [pc, #68]	; (80058cc <pvPortMalloc+0x194>)
 8005886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005888:	f7fe fa08 	bl	8003c9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <pvPortMalloc+0x174>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60fb      	str	r3, [r7, #12]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <pvPortMalloc+0x172>
	return pvReturn;
 80058ac:	69fb      	ldr	r3, [r7, #28]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3728      	adds	r7, #40	; 0x28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20001d30 	.word	0x20001d30
 80058bc:	20001d44 	.word	0x20001d44
 80058c0:	20001d34 	.word	0x20001d34
 80058c4:	20001d28 	.word	0x20001d28
 80058c8:	20001d38 	.word	0x20001d38
 80058cc:	20001d3c 	.word	0x20001d3c

080058d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d04d      	beq.n	800597e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058e2:	2308      	movs	r3, #8
 80058e4:	425b      	negs	r3, r3
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4413      	add	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	4b24      	ldr	r3, [pc, #144]	; (8005988 <vPortFree+0xb8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <vPortFree+0x44>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60fb      	str	r3, [r7, #12]
}
 8005910:	bf00      	nop
 8005912:	e7fe      	b.n	8005912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <vPortFree+0x62>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	60bb      	str	r3, [r7, #8]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <vPortFree+0xb8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01e      	beq.n	800597e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d11a      	bne.n	800597e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <vPortFree+0xb8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	43db      	mvns	r3, r3
 8005952:	401a      	ands	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005958:	f7fe f992 	bl	8003c80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <vPortFree+0xbc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4413      	add	r3, r2
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <vPortFree+0xbc>)
 8005968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f000 f874 	bl	8005a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005970:	4b07      	ldr	r3, [pc, #28]	; (8005990 <vPortFree+0xc0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	4a06      	ldr	r2, [pc, #24]	; (8005990 <vPortFree+0xc0>)
 8005978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800597a:	f7fe f98f 	bl	8003c9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20001d44 	.word	0x20001d44
 800598c:	20001d34 	.word	0x20001d34
 8005990:	20001d40 	.word	0x20001d40

08005994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800599a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800599e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <prvHeapInit+0xac>)
 80059a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3307      	adds	r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0307 	bic.w	r3, r3, #7
 80059ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <prvHeapInit+0xac>)
 80059c4:	4413      	add	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <prvHeapInit+0xb0>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059d2:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <prvHeapInit+0xb0>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4413      	add	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059e0:	2208      	movs	r2, #8
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <prvHeapInit+0xb4>)
 80059f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <prvHeapInit+0xb4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059fe:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <prvHeapInit+0xb4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <prvHeapInit+0xb4>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <prvHeapInit+0xb8>)
 8005a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <prvHeapInit+0xbc>)
 8005a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <prvHeapInit+0xc0>)
 8005a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	20001170 	.word	0x20001170
 8005a44:	20001d28 	.word	0x20001d28
 8005a48:	20001d30 	.word	0x20001d30
 8005a4c:	20001d38 	.word	0x20001d38
 8005a50:	20001d34 	.word	0x20001d34
 8005a54:	20001d44 	.word	0x20001d44

08005a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a60:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <prvInsertBlockIntoFreeList+0xac>)
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e002      	b.n	8005a6c <prvInsertBlockIntoFreeList+0x14>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d8f7      	bhi.n	8005a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	4413      	add	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d108      	bne.n	8005a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	441a      	add	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d118      	bne.n	8005ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <prvInsertBlockIntoFreeList+0xb0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d00d      	beq.n	8005ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	441a      	add	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e008      	b.n	8005ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <prvInsertBlockIntoFreeList+0xb0>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e003      	b.n	8005ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d002      	beq.n	8005af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20001d28 	.word	0x20001d28
 8005b08:	20001d30 	.word	0x20001d30

08005b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b16:	2003      	movs	r0, #3
 8005b18:	f000 f970 	bl	8005dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f000 f80d 	bl	8005b3c <HAL_InitTick>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	71fb      	strb	r3, [r7, #7]
 8005b2c:	e001      	b.n	8005b32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005b2e:	f004 f911 	bl	8009d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b32:	79fb      	ldrb	r3, [r7, #7]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005b48:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <HAL_InitTick+0x6c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d023      	beq.n	8005b98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005b50:	4b16      	ldr	r3, [pc, #88]	; (8005bac <HAL_InitTick+0x70>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <HAL_InitTick+0x6c>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f98b 	bl	8005e82 <HAL_SYSTICK_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b0f      	cmp	r3, #15
 8005b76:	d809      	bhi.n	8005b8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b80:	f000 f947 	bl	8005e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b84:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <HAL_InitTick+0x74>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	e007      	b.n	8005b9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
 8005b90:	e004      	b.n	8005b9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
 8005b96:	e001      	b.n	8005b9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000018 	.word	0x20000018
 8005bac:	2000001c 	.word	0x2000001c
 8005bb0:	20000014 	.word	0x20000014

08005bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <HAL_GetTick+0x14>)
 8005bba:	681b      	ldr	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20001d48 	.word	0x20001d48

08005bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bd4:	f7ff ffee 	bl	8005bb4 <HAL_GetTick>
 8005bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be4:	d005      	beq.n	8005bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <HAL_Delay+0x44>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bf2:	bf00      	nop
 8005bf4:	f7ff ffde 	bl	8005bb4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d8f7      	bhi.n	8005bf4 <HAL_Delay+0x28>
  {
  }
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000018 	.word	0x20000018

08005c14 <__NVIC_SetPriorityGrouping>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <__NVIC_SetPriorityGrouping+0x44>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c30:	4013      	ands	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c46:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <__NVIC_SetPriorityGrouping+0x44>)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	60d3      	str	r3, [r2, #12]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <__NVIC_GetPriorityGrouping>:
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c60:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <__NVIC_GetPriorityGrouping+0x18>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	f003 0307 	and.w	r3, r3, #7
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	e000ed00 	.word	0xe000ed00

08005c78 <__NVIC_EnableIRQ>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	db0b      	blt.n	8005ca2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	f003 021f 	and.w	r2, r3, #31
 8005c90:	4907      	ldr	r1, [pc, #28]	; (8005cb0 <__NVIC_EnableIRQ+0x38>)
 8005c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2001      	movs	r0, #1
 8005c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	e000e100 	.word	0xe000e100

08005cb4 <__NVIC_DisableIRQ>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	db12      	blt.n	8005cec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	f003 021f 	and.w	r2, r3, #31
 8005ccc:	490a      	ldr	r1, [pc, #40]	; (8005cf8 <__NVIC_DisableIRQ+0x44>)
 8005cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cda:	3320      	adds	r3, #32
 8005cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ce0:	f3bf 8f4f 	dsb	sy
}
 8005ce4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ce6:	f3bf 8f6f 	isb	sy
}
 8005cea:	bf00      	nop
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	e000e100 	.word	0xe000e100

08005cfc <__NVIC_SetPriority>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	6039      	str	r1, [r7, #0]
 8005d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	db0a      	blt.n	8005d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	490c      	ldr	r1, [pc, #48]	; (8005d48 <__NVIC_SetPriority+0x4c>)
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	0112      	lsls	r2, r2, #4
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	440b      	add	r3, r1
 8005d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d24:	e00a      	b.n	8005d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	4908      	ldr	r1, [pc, #32]	; (8005d4c <__NVIC_SetPriority+0x50>)
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	3b04      	subs	r3, #4
 8005d34:	0112      	lsls	r2, r2, #4
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	440b      	add	r3, r1
 8005d3a:	761a      	strb	r2, [r3, #24]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000e100 	.word	0xe000e100
 8005d4c:	e000ed00 	.word	0xe000ed00

08005d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b089      	sub	sp, #36	; 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f1c3 0307 	rsb	r3, r3, #7
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	bf28      	it	cs
 8005d6e:	2304      	movcs	r3, #4
 8005d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3304      	adds	r3, #4
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d902      	bls.n	8005d80 <NVIC_EncodePriority+0x30>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	3b03      	subs	r3, #3
 8005d7e:	e000      	b.n	8005d82 <NVIC_EncodePriority+0x32>
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43da      	mvns	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	401a      	ands	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005da2:	43d9      	mvns	r1, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da8:	4313      	orrs	r3, r2
         );
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3724      	adds	r7, #36	; 0x24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc8:	d301      	bcc.n	8005dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e00f      	b.n	8005dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <SysTick_Config+0x40>)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dd6:	210f      	movs	r1, #15
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ddc:	f7ff ff8e 	bl	8005cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <SysTick_Config+0x40>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <SysTick_Config+0x40>)
 8005de8:	2207      	movs	r2, #7
 8005dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	e000e010 	.word	0xe000e010

08005dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ff05 	bl	8005c14 <__NVIC_SetPriorityGrouping>
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	4603      	mov	r3, r0
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e24:	f7ff ff1a 	bl	8005c5c <__NVIC_GetPriorityGrouping>
 8005e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	6978      	ldr	r0, [r7, #20]
 8005e30:	f7ff ff8e 	bl	8005d50 <NVIC_EncodePriority>
 8005e34:	4602      	mov	r2, r0
 8005e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff ff5d 	bl	8005cfc <__NVIC_SetPriority>
}
 8005e42:	bf00      	nop
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	4603      	mov	r3, r0
 8005e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff ff0d 	bl	8005c78 <__NVIC_EnableIRQ>
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff ff1d 	bl	8005cb4 <__NVIC_DisableIRQ>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ff94 	bl	8005db8 <SysTick_Config>
 8005e90:	4603      	mov	r3, r0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e098      	b.n	8005fe0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <HAL_DMA_Init+0x150>)
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d80f      	bhi.n	8005eda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4b4b      	ldr	r3, [pc, #300]	; (8005ff0 <HAL_DMA_Init+0x154>)
 8005ec2:	4413      	add	r3, r2
 8005ec4:	4a4b      	ldr	r2, [pc, #300]	; (8005ff4 <HAL_DMA_Init+0x158>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	091b      	lsrs	r3, r3, #4
 8005ecc:	009a      	lsls	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a48      	ldr	r2, [pc, #288]	; (8005ff8 <HAL_DMA_Init+0x15c>)
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8005ed8:	e00e      	b.n	8005ef8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <HAL_DMA_Init+0x160>)
 8005ee2:	4413      	add	r3, r2
 8005ee4:	4a43      	ldr	r2, [pc, #268]	; (8005ff4 <HAL_DMA_Init+0x158>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	009a      	lsls	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a42      	ldr	r2, [pc, #264]	; (8006000 <HAL_DMA_Init+0x164>)
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f52:	d039      	beq.n	8005fc8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <HAL_DMA_Init+0x15c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d11a      	bne.n	8005f94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f5e:	4b29      	ldr	r3, [pc, #164]	; (8006004 <HAL_DMA_Init+0x168>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	f003 031c 	and.w	r3, r3, #28
 8005f6a:	210f      	movs	r1, #15
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	4924      	ldr	r1, [pc, #144]	; (8006004 <HAL_DMA_Init+0x168>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f78:	4b22      	ldr	r3, [pc, #136]	; (8006004 <HAL_DMA_Init+0x168>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	f003 031c 	and.w	r3, r3, #28
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	491d      	ldr	r1, [pc, #116]	; (8006004 <HAL_DMA_Init+0x168>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]
 8005f92:	e019      	b.n	8005fc8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f94:	4b1c      	ldr	r3, [pc, #112]	; (8006008 <HAL_DMA_Init+0x16c>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	f003 031c 	and.w	r3, r3, #28
 8005fa0:	210f      	movs	r1, #15
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	4917      	ldr	r1, [pc, #92]	; (8006008 <HAL_DMA_Init+0x16c>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <HAL_DMA_Init+0x16c>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	f003 031c 	and.w	r3, r3, #28
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	4911      	ldr	r1, [pc, #68]	; (8006008 <HAL_DMA_Init+0x16c>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40020407 	.word	0x40020407
 8005ff0:	bffdfff8 	.word	0xbffdfff8
 8005ff4:	cccccccd 	.word	0xcccccccd
 8005ff8:	40020000 	.word	0x40020000
 8005ffc:	bffdfbf8 	.word	0xbffdfbf8
 8006000:	40020400 	.word	0x40020400
 8006004:	400200a8 	.word	0x400200a8
 8006008:	400204a8 	.word	0x400204a8

0800600c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_DMA_Start_IT+0x20>
 8006028:	2302      	movs	r3, #2
 800602a:	e04b      	b.n	80060c4 <HAL_DMA_Start_IT+0xb8>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d13a      	bne.n	80060b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f969 	bl	800633c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 020e 	orr.w	r2, r2, #14
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e00f      	b.n	80060a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0204 	bic.w	r2, r2, #4
 8006092:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 020a 	orr.w	r2, r2, #10
 80060a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e005      	b.n	80060c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80060be:	2302      	movs	r3, #2
 80060c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d005      	beq.n	80060f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2204      	movs	r2, #4
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
 80060ee:	e029      	b.n	8006144 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 020e 	bic.w	r2, r2, #14
 80060fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006114:	f003 021c 	and.w	r2, r3, #28
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	2101      	movs	r1, #1
 800611e:	fa01 f202 	lsl.w	r2, r1, r2
 8006122:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
    }
  }
  return status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f003 031c 	and.w	r3, r3, #28
 800616e:	2204      	movs	r2, #4
 8006170:	409a      	lsls	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d026      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7a>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d021      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0204 	bic.w	r2, r2, #4
 80061a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f003 021c 	and.w	r2, r3, #28
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2104      	movs	r1, #4
 80061b0:	fa01 f202 	lsl.w	r2, r1, r2
 80061b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d071      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80061c6:	e06c      	b.n	80062a2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061cc:	f003 031c 	and.w	r3, r3, #28
 80061d0:	2202      	movs	r2, #2
 80061d2:	409a      	lsls	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02e      	beq.n	800623a <HAL_DMA_IRQHandler+0xec>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d029      	beq.n	800623a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 020a 	bic.w	r2, r2, #10
 8006202:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006210:	f003 021c 	and.w	r2, r3, #28
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	2102      	movs	r1, #2
 800621a:	fa01 f202 	lsl.w	r2, r1, r2
 800621e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d038      	beq.n	80062a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006238:	e033      	b.n	80062a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f003 031c 	and.w	r3, r3, #28
 8006242:	2208      	movs	r2, #8
 8006244:	409a      	lsls	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02a      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x156>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d025      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 020e 	bic.w	r2, r2, #14
 8006266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	f003 021c 	and.w	r2, r3, #28
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f202 	lsl.w	r2, r1, r2
 800627a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	2b00      	cmp	r3, #0
 8006298:	d004      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
}
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	460b      	mov	r3, r1
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_DMA_RegisterCallback+0x20>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e031      	b.n	8006330 <HAL_DMA_RegisterCallback+0x84>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d120      	bne.n	8006322 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d81a      	bhi.n	800631c <HAL_DMA_RegisterCallback+0x70>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <HAL_DMA_RegisterCallback+0x40>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006305 	.word	0x08006305
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006315 	.word	0x08006315
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8006302:	e010      	b.n	8006326 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800630a:	e00c      	b.n	8006326 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8006312:	e008      	b.n	8006326 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800631a:	e004      	b.n	8006326 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
           break;
 8006320:	e001      	b.n	8006326 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	f003 021c 	and.w	r2, r3, #28
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	2101      	movs	r1, #1
 8006358:	fa01 f202 	lsl.w	r2, r1, r2
 800635c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b10      	cmp	r3, #16
 800636c:	d108      	bne.n	8006380 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800637e:	e007      	b.n	8006390 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063aa:	e154      	b.n	8006656 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2101      	movs	r1, #1
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8146 	beq.w	8006650 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f003 0303 	and.w	r3, r3, #3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d005      	beq.n	80063dc <HAL_GPIO_Init+0x40>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d130      	bne.n	800643e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4013      	ands	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006412:	2201      	movs	r2, #1
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4013      	ands	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f003 0201 	and.w	r2, r3, #1
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b03      	cmp	r3, #3
 8006448:	d017      	beq.n	800647a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	2203      	movs	r2, #3
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4013      	ands	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d123      	bne.n	80064ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	08da      	lsrs	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3208      	adds	r2, #8
 800648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	220f      	movs	r2, #15
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4013      	ands	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	08da      	lsrs	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3208      	adds	r2, #8
 80064c8:	6939      	ldr	r1, [r7, #16]
 80064ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	2203      	movs	r2, #3
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4013      	ands	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f003 0203 	and.w	r2, r3, #3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a0 	beq.w	8006650 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006510:	4b58      	ldr	r3, [pc, #352]	; (8006674 <HAL_GPIO_Init+0x2d8>)
 8006512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006514:	4a57      	ldr	r2, [pc, #348]	; (8006674 <HAL_GPIO_Init+0x2d8>)
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	6613      	str	r3, [r2, #96]	; 0x60
 800651c:	4b55      	ldr	r3, [pc, #340]	; (8006674 <HAL_GPIO_Init+0x2d8>)
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006528:	4a53      	ldr	r2, [pc, #332]	; (8006678 <HAL_GPIO_Init+0x2dc>)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	3302      	adds	r3, #2
 8006530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	220f      	movs	r2, #15
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4013      	ands	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006552:	d019      	beq.n	8006588 <HAL_GPIO_Init+0x1ec>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a49      	ldr	r2, [pc, #292]	; (800667c <HAL_GPIO_Init+0x2e0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_GPIO_Init+0x1e8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a48      	ldr	r2, [pc, #288]	; (8006680 <HAL_GPIO_Init+0x2e4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00d      	beq.n	8006580 <HAL_GPIO_Init+0x1e4>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a47      	ldr	r2, [pc, #284]	; (8006684 <HAL_GPIO_Init+0x2e8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <HAL_GPIO_Init+0x1e0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a46      	ldr	r2, [pc, #280]	; (8006688 <HAL_GPIO_Init+0x2ec>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d101      	bne.n	8006578 <HAL_GPIO_Init+0x1dc>
 8006574:	2304      	movs	r3, #4
 8006576:	e008      	b.n	800658a <HAL_GPIO_Init+0x1ee>
 8006578:	2307      	movs	r3, #7
 800657a:	e006      	b.n	800658a <HAL_GPIO_Init+0x1ee>
 800657c:	2303      	movs	r3, #3
 800657e:	e004      	b.n	800658a <HAL_GPIO_Init+0x1ee>
 8006580:	2302      	movs	r3, #2
 8006582:	e002      	b.n	800658a <HAL_GPIO_Init+0x1ee>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <HAL_GPIO_Init+0x1ee>
 8006588:	2300      	movs	r3, #0
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	f002 0203 	and.w	r2, r2, #3
 8006590:	0092      	lsls	r2, r2, #2
 8006592:	4093      	lsls	r3, r2
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800659a:	4937      	ldr	r1, [pc, #220]	; (8006678 <HAL_GPIO_Init+0x2dc>)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	089b      	lsrs	r3, r3, #2
 80065a0:	3302      	adds	r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065a8:	4b38      	ldr	r3, [pc, #224]	; (800668c <HAL_GPIO_Init+0x2f0>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4013      	ands	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065cc:	4a2f      	ldr	r2, [pc, #188]	; (800668c <HAL_GPIO_Init+0x2f0>)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <HAL_GPIO_Init+0x2f0>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	43db      	mvns	r3, r3
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4013      	ands	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065f6:	4a25      	ldr	r2, [pc, #148]	; (800668c <HAL_GPIO_Init+0x2f0>)
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80065fc:	4b23      	ldr	r3, [pc, #140]	; (800668c <HAL_GPIO_Init+0x2f0>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	43db      	mvns	r3, r3
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4013      	ands	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006620:	4a1a      	ldr	r2, [pc, #104]	; (800668c <HAL_GPIO_Init+0x2f0>)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006626:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_GPIO_Init+0x2f0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	43db      	mvns	r3, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4013      	ands	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <HAL_GPIO_Init+0x2f0>)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3301      	adds	r3, #1
 8006654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	f47f aea3 	bne.w	80063ac <HAL_GPIO_Init+0x10>
  }
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40021000 	.word	0x40021000
 8006678:	40010000 	.word	0x40010000
 800667c:	48000400 	.word	0x48000400
 8006680:	48000800 	.word	0x48000800
 8006684:	48000c00 	.word	0x48000c00
 8006688:	48001000 	.word	0x48001000
 800668c:	40010400 	.word	0x40010400

08006690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066a0:	787b      	ldrb	r3, [r7, #1]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066ac:	e002      	b.n	80066b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d006      	beq.n	80066e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066d6:	4a05      	ldr	r2, [pc, #20]	; (80066ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f806 	bl	80066f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40010400 	.word	0x40010400

080066f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a04      	ldr	r2, [pc, #16]	; (8006724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006716:	6013      	str	r3, [r2, #0]
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40007000 	.word	0x40007000

08006728 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006730:	4b2b      	ldr	r3, [pc, #172]	; (80067e0 <HAL_PWR_ConfigPVD+0xb8>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f023 020e 	bic.w	r2, r3, #14
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4928      	ldr	r1, [pc, #160]	; (80067e0 <HAL_PWR_ConfigPVD+0xb8>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006742:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	4a27      	ldr	r2, [pc, #156]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800674e:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006758:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800675a:	4b22      	ldr	r3, [pc, #136]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4a21      	ldr	r2, [pc, #132]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006764:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006766:	4b1f      	ldr	r3, [pc, #124]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 800676c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006770:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800677e:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006788:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	4a12      	ldr	r2, [pc, #72]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a0:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80067ae:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 80067b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b8:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	4a06      	ldr	r2, [pc, #24]	; (80067e4 <HAL_PWR_ConfigPVD+0xbc>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d0:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40007000 	.word	0x40007000
 80067e4:	40010400 	.word	0x40010400

080067e8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <HAL_PWR_EnablePVD+0x1c>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a04      	ldr	r2, [pc, #16]	; (8006804 <HAL_PWR_EnablePVD+0x1c>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6053      	str	r3, [r2, #4]
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40007000 	.word	0x40007000

08006808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800680c:	4b04      	ldr	r3, [pc, #16]	; (8006820 <HAL_PWREx_GetVoltageRange+0x18>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40007000 	.word	0x40007000

08006824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006832:	d130      	bne.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006834:	4b23      	ldr	r3, [pc, #140]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800683c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006840:	d038      	beq.n	80068b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006842:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800684a:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800684c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006850:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2232      	movs	r2, #50	; 0x32
 8006858:	fb02 f303 	mul.w	r3, r2, r3
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	0c9b      	lsrs	r3, r3, #18
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006868:	e002      	b.n	8006870 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b01      	subs	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006870:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687c:	d102      	bne.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x60>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1f2      	bne.n	800686a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d110      	bne.n	80068b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e00f      	b.n	80068b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800689e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a2:	d007      	beq.n	80068b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068ac:	4a05      	ldr	r2, [pc, #20]	; (80068c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40007000 	.word	0x40007000
 80068c8:	2000001c 	.word	0x2000001c
 80068cc:	431bde83 	.word	0x431bde83

080068d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f000 bc02 	b.w	80070e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e4:	4b96      	ldr	r3, [pc, #600]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 030c 	and.w	r3, r3, #12
 80068ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ee:	4b94      	ldr	r3, [pc, #592]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80e4 	beq.w	8006ace <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <HAL_RCC_OscConfig+0x4c>
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	2b0c      	cmp	r3, #12
 8006910:	f040 808b 	bne.w	8006a2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b01      	cmp	r3, #1
 8006918:	f040 8087 	bne.w	8006a2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800691c:	4b88      	ldr	r3, [pc, #544]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_RCC_OscConfig+0x64>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e3d9      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	4b81      	ldr	r3, [pc, #516]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <HAL_RCC_OscConfig+0x7e>
 8006944:	4b7e      	ldr	r3, [pc, #504]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800694c:	e005      	b.n	800695a <HAL_RCC_OscConfig+0x8a>
 800694e:	4b7c      	ldr	r3, [pc, #496]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800695a:	4293      	cmp	r3, r2
 800695c:	d223      	bcs.n	80069a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fd54 	bl	8007410 <RCC_SetFlashLatencyFromMSIRange>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e3ba      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006972:	4b73      	ldr	r3, [pc, #460]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a72      	ldr	r2, [pc, #456]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006978:	f043 0308 	orr.w	r3, r3, #8
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	4b70      	ldr	r3, [pc, #448]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	496d      	ldr	r1, [pc, #436]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006990:	4b6b      	ldr	r3, [pc, #428]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	4968      	ldr	r1, [pc, #416]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	604b      	str	r3, [r1, #4]
 80069a4:	e025      	b.n	80069f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069a6:	4b66      	ldr	r3, [pc, #408]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a65      	ldr	r2, [pc, #404]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069ac:	f043 0308 	orr.w	r3, r3, #8
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b63      	ldr	r3, [pc, #396]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4960      	ldr	r1, [pc, #384]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069c4:	4b5e      	ldr	r3, [pc, #376]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	495b      	ldr	r1, [pc, #364]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fd14 	bl	8007410 <RCC_SetFlashLatencyFromMSIRange>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e37a      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069f2:	f000 fc81 	bl	80072f8 <HAL_RCC_GetSysClockFreq>
 80069f6:	4602      	mov	r2, r0
 80069f8:	4b51      	ldr	r3, [pc, #324]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	091b      	lsrs	r3, r3, #4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	4950      	ldr	r1, [pc, #320]	; (8006b44 <HAL_RCC_OscConfig+0x274>)
 8006a04:	5ccb      	ldrb	r3, [r1, r3]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0e:	4a4e      	ldr	r2, [pc, #312]	; (8006b48 <HAL_RCC_OscConfig+0x278>)
 8006a10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006a12:	4b4e      	ldr	r3, [pc, #312]	; (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff f890 	bl	8005b3c <HAL_InitTick>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d052      	beq.n	8006acc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	e35e      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d032      	beq.n	8006a98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006a32:	4b43      	ldr	r3, [pc, #268]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a42      	ldr	r2, [pc, #264]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a3e:	f7ff f8b9 	bl	8005bb4 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a46:	f7ff f8b5 	bl	8005bb4 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e347      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a58:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a64:	4b36      	ldr	r3, [pc, #216]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a35      	ldr	r2, [pc, #212]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a6a:	f043 0308 	orr.w	r3, r3, #8
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b33      	ldr	r3, [pc, #204]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	4930      	ldr	r1, [pc, #192]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a82:	4b2f      	ldr	r3, [pc, #188]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	492b      	ldr	r1, [pc, #172]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	604b      	str	r3, [r1, #4]
 8006a96:	e01a      	b.n	8006ace <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a98:	4b29      	ldr	r3, [pc, #164]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a28      	ldr	r2, [pc, #160]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006aa4:	f7ff f886 	bl	8005bb4 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006aac:	f7ff f882 	bl	8005bb4 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e314      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006abe:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x1dc>
 8006aca:	e000      	b.n	8006ace <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006acc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d073      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d005      	beq.n	8006aec <HAL_RCC_OscConfig+0x21c>
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d10e      	bne.n	8006b04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d10b      	bne.n	8006b04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aec:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d063      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x2f0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d15f      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e2f1      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d106      	bne.n	8006b1c <HAL_RCC_OscConfig+0x24c>
 8006b0e:	4b0c      	ldr	r3, [pc, #48]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a0b      	ldr	r2, [pc, #44]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e025      	b.n	8006b68 <HAL_RCC_OscConfig+0x298>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b24:	d114      	bne.n	8006b50 <HAL_RCC_OscConfig+0x280>
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a05      	ldr	r2, [pc, #20]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4b03      	ldr	r3, [pc, #12]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a02      	ldr	r2, [pc, #8]	; (8006b40 <HAL_RCC_OscConfig+0x270>)
 8006b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e013      	b.n	8006b68 <HAL_RCC_OscConfig+0x298>
 8006b40:	40021000 	.word	0x40021000
 8006b44:	0800b82c 	.word	0x0800b82c
 8006b48:	2000001c 	.word	0x2000001c
 8006b4c:	20000014 	.word	0x20000014
 8006b50:	4ba0      	ldr	r3, [pc, #640]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a9f      	ldr	r2, [pc, #636]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	4b9d      	ldr	r3, [pc, #628]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a9c      	ldr	r2, [pc, #624]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7ff f820 	bl	8005bb4 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b78:	f7ff f81c 	bl	8005bb4 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b64      	cmp	r3, #100	; 0x64
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e2ae      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8a:	4b92      	ldr	r3, [pc, #584]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x2a8>
 8006b96:	e014      	b.n	8006bc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7ff f80c 	bl	8005bb4 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba0:	f7ff f808 	bl	8005bb4 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b64      	cmp	r3, #100	; 0x64
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e29a      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bb2:	4b88      	ldr	r3, [pc, #544]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x2d0>
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d060      	beq.n	8006c90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_OscConfig+0x310>
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b0c      	cmp	r3, #12
 8006bd8:	d119      	bne.n	8006c0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d116      	bne.n	8006c0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be0:	4b7c      	ldr	r3, [pc, #496]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x328>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e277      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf8:	4b76      	ldr	r3, [pc, #472]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	4973      	ldr	r1, [pc, #460]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c0c:	e040      	b.n	8006c90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d023      	beq.n	8006c5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c16:	4b6f      	ldr	r3, [pc, #444]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6e      	ldr	r2, [pc, #440]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c22:	f7fe ffc7 	bl	8005bb4 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c2a:	f7fe ffc3 	bl	8005bb4 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e255      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c3c:	4b65      	ldr	r3, [pc, #404]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c48:	4b62      	ldr	r3, [pc, #392]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	495f      	ldr	r1, [pc, #380]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
 8006c5c:	e018      	b.n	8006c90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5e:	4b5d      	ldr	r3, [pc, #372]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5c      	ldr	r2, [pc, #368]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6a:	f7fe ffa3 	bl	8005bb4 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c72:	f7fe ff9f 	bl	8005bb4 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e231      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c84:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f0      	bne.n	8006c72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d03c      	beq.n	8006d16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01c      	beq.n	8006cde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ca4:	4b4b      	ldr	r3, [pc, #300]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006caa:	4a4a      	ldr	r2, [pc, #296]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7fe ff7e 	bl	8005bb4 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cbc:	f7fe ff7a 	bl	8005bb4 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e20c      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cce:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0ef      	beq.n	8006cbc <HAL_RCC_OscConfig+0x3ec>
 8006cdc:	e01b      	b.n	8006d16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cde:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ce4:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cee:	f7fe ff61 	bl	8005bb4 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cf6:	f7fe ff5d 	bl	8005bb4 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e1ef      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d08:	4b32      	ldr	r3, [pc, #200]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1ef      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80a6 	beq.w	8006e70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d24:	2300      	movs	r3, #0
 8006d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006d28:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10d      	bne.n	8006d50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d34:	4b27      	ldr	r3, [pc, #156]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8006d40:	4b24      	ldr	r3, [pc, #144]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d50:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <HAL_RCC_OscConfig+0x508>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d118      	bne.n	8006d8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d5c:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <HAL_RCC_OscConfig+0x508>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <HAL_RCC_OscConfig+0x508>)
 8006d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d68:	f7fe ff24 	bl	8005bb4 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d70:	f7fe ff20 	bl	8005bb4 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e1b2      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <HAL_RCC_OscConfig+0x508>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d108      	bne.n	8006da8 <HAL_RCC_OscConfig+0x4d8>
 8006d96:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006da6:	e029      	b.n	8006dfc <HAL_RCC_OscConfig+0x52c>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b05      	cmp	r3, #5
 8006dae:	d115      	bne.n	8006ddc <HAL_RCC_OscConfig+0x50c>
 8006db0:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	4a07      	ldr	r2, [pc, #28]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006db8:	f043 0304 	orr.w	r3, r3, #4
 8006dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	4a03      	ldr	r2, [pc, #12]	; (8006dd4 <HAL_RCC_OscConfig+0x504>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dd0:	e014      	b.n	8006dfc <HAL_RCC_OscConfig+0x52c>
 8006dd2:	bf00      	nop
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	40007000 	.word	0x40007000
 8006ddc:	4b9a      	ldr	r3, [pc, #616]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de2:	4a99      	ldr	r2, [pc, #612]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dec:	4b96      	ldr	r3, [pc, #600]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	4a95      	ldr	r2, [pc, #596]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006df4:	f023 0304 	bic.w	r3, r3, #4
 8006df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e04:	f7fe fed6 	bl	8005bb4 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e0a:	e00a      	b.n	8006e22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e0c:	f7fe fed2 	bl	8005bb4 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e162      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e22:	4b89      	ldr	r3, [pc, #548]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0ed      	beq.n	8006e0c <HAL_RCC_OscConfig+0x53c>
 8006e30:	e015      	b.n	8006e5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e32:	f7fe febf 	bl	8005bb4 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e38:	e00a      	b.n	8006e50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e3a:	f7fe febb 	bl	8005bb4 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e14b      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e50:	4b7d      	ldr	r3, [pc, #500]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1ed      	bne.n	8006e3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e5e:	7ffb      	ldrb	r3, [r7, #31]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d105      	bne.n	8006e70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e64:	4b78      	ldr	r3, [pc, #480]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e68:	4a77      	ldr	r2, [pc, #476]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d03c      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01c      	beq.n	8006ebe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e84:	4b70      	ldr	r3, [pc, #448]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e8a:	4a6f      	ldr	r2, [pc, #444]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006e8c:	f043 0301 	orr.w	r3, r3, #1
 8006e90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e94:	f7fe fe8e 	bl	8005bb4 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e9c:	f7fe fe8a 	bl	8005bb4 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e11c      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006eae:	4b66      	ldr	r3, [pc, #408]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0ef      	beq.n	8006e9c <HAL_RCC_OscConfig+0x5cc>
 8006ebc:	e01b      	b.n	8006ef6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ebe:	4b62      	ldr	r3, [pc, #392]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ec4:	4a60      	ldr	r2, [pc, #384]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ece:	f7fe fe71 	bl	8005bb4 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ed6:	f7fe fe6d 	bl	8005bb4 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0ff      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ee8:	4b57      	ldr	r3, [pc, #348]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1ef      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80f3 	beq.w	80070e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	f040 80c9 	bne.w	800709c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006f0a:	4b4f      	ldr	r3, [pc, #316]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 0203 	and.w	r2, r3, #3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d12c      	bne.n	8006f78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d123      	bne.n	8006f78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d11b      	bne.n	8006f78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d113      	bne.n	8006f78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d109      	bne.n	8006f78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	3b01      	subs	r3, #1
 8006f72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d06b      	beq.n	8007050 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b0c      	cmp	r3, #12
 8006f7c:	d062      	beq.n	8007044 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006f7e:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0ac      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f8e:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f9a:	f7fe fe0b 	bl	8005bb4 <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa2:	f7fe fe07 	bl	8005bb4 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e099      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f0      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fc0:	4b21      	ldr	r3, [pc, #132]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <HAL_RCC_OscConfig+0x77c>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006fd0:	3a01      	subs	r2, #1
 8006fd2:	0112      	lsls	r2, r2, #4
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fda:	0212      	lsls	r2, r2, #8
 8006fdc:	4311      	orrs	r1, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006fe2:	0852      	lsrs	r2, r2, #1
 8006fe4:	3a01      	subs	r2, #1
 8006fe6:	0552      	lsls	r2, r2, #21
 8006fe8:	4311      	orrs	r1, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006fee:	0852      	lsrs	r2, r2, #1
 8006ff0:	3a01      	subs	r2, #1
 8006ff2:	0652      	lsls	r2, r2, #25
 8006ff4:	4311      	orrs	r1, r2
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ffa:	06d2      	lsls	r2, r2, #27
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	4912      	ldr	r1, [pc, #72]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8007000:	4313      	orrs	r3, r2
 8007002:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007004:	4b10      	ldr	r3, [pc, #64]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a0f      	ldr	r2, [pc, #60]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 800700a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800700e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007010:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	4a0c      	ldr	r2, [pc, #48]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8007016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800701a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800701c:	f7fe fdca 	bl	8005bb4 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007024:	f7fe fdc6 	bl	8005bb4 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e058      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007036:	4b04      	ldr	r3, [pc, #16]	; (8007048 <HAL_RCC_OscConfig+0x778>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007042:	e050      	b.n	80070e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e04f      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
 8007048:	40021000 	.word	0x40021000
 800704c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007050:	4b27      	ldr	r3, [pc, #156]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d144      	bne.n	80070e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800705c:	4b24      	ldr	r3, [pc, #144]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a23      	ldr	r2, [pc, #140]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 8007062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007066:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007068:	4b21      	ldr	r3, [pc, #132]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a20      	ldr	r2, [pc, #128]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 800706e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007072:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007074:	f7fe fd9e 	bl	8005bb4 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800707c:	f7fe fd9a 	bl	8005bb4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e02c      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800708e:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x7ac>
 800709a:	e024      	b.n	80070e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b0c      	cmp	r3, #12
 80070a0:	d01f      	beq.n	80070e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 80070a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ae:	f7fe fd81 	bl	8005bb4 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b6:	f7fe fd7d 	bl	8005bb4 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e00f      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f0      	bne.n	80070b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	4905      	ldr	r1, [pc, #20]	; (80070f0 <HAL_RCC_OscConfig+0x820>)
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_RCC_OscConfig+0x824>)
 80070dc:	4013      	ands	r3, r2
 80070de:	60cb      	str	r3, [r1, #12]
 80070e0:	e001      	b.n	80070e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40021000 	.word	0x40021000
 80070f4:	feeefffc 	.word	0xfeeefffc

080070f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0e7      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800710c:	4b75      	ldr	r3, [pc, #468]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d910      	bls.n	800713c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711a:	4b72      	ldr	r3, [pc, #456]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f023 0207 	bic.w	r2, r3, #7
 8007122:	4970      	ldr	r1, [pc, #448]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712a:	4b6e      	ldr	r3, [pc, #440]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d001      	beq.n	800713c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0cf      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d010      	beq.n	800716a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	4b66      	ldr	r3, [pc, #408]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007154:	429a      	cmp	r2, r3
 8007156:	d908      	bls.n	800716a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007158:	4b63      	ldr	r3, [pc, #396]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4960      	ldr	r1, [pc, #384]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007166:	4313      	orrs	r3, r2
 8007168:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d04c      	beq.n	8007210 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b03      	cmp	r3, #3
 800717c:	d107      	bne.n	800718e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800717e:	4b5a      	ldr	r3, [pc, #360]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d121      	bne.n	80071ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0a6      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d107      	bne.n	80071a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007196:	4b54      	ldr	r3, [pc, #336]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d115      	bne.n	80071ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e09a      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d107      	bne.n	80071be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071ae:	4b4e      	ldr	r3, [pc, #312]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e08e      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071be:	4b4a      	ldr	r3, [pc, #296]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e086      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071ce:	4b46      	ldr	r3, [pc, #280]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f023 0203 	bic.w	r2, r3, #3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	4943      	ldr	r1, [pc, #268]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e0:	f7fe fce8 	bl	8005bb4 <HAL_GetTick>
 80071e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e6:	e00a      	b.n	80071fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e8:	f7fe fce4 	bl	8005bb4 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e06e      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071fe:	4b3a      	ldr	r3, [pc, #232]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 020c 	and.w	r2, r3, #12
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	429a      	cmp	r2, r3
 800720e:	d1eb      	bne.n	80071e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b31      	ldr	r3, [pc, #196]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007228:	429a      	cmp	r2, r3
 800722a:	d208      	bcs.n	800723e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800722c:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	492b      	ldr	r1, [pc, #172]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 800723a:	4313      	orrs	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800723e:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0307 	and.w	r3, r3, #7
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d210      	bcs.n	800726e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724c:	4b25      	ldr	r3, [pc, #148]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f023 0207 	bic.w	r2, r3, #7
 8007254:	4923      	ldr	r1, [pc, #140]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	4313      	orrs	r3, r2
 800725a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725c:	4b21      	ldr	r3, [pc, #132]	; (80072e4 <HAL_RCC_ClockConfig+0x1ec>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d001      	beq.n	800726e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e036      	b.n	80072dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	4918      	ldr	r1, [pc, #96]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 8007288:	4313      	orrs	r3, r2
 800728a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4910      	ldr	r1, [pc, #64]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072ac:	f000 f824 	bl	80072f8 <HAL_RCC_GetSysClockFreq>
 80072b0:	4602      	mov	r2, r0
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <HAL_RCC_ClockConfig+0x1f0>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	490b      	ldr	r1, [pc, #44]	; (80072ec <HAL_RCC_ClockConfig+0x1f4>)
 80072be:	5ccb      	ldrb	r3, [r1, r3]
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <HAL_RCC_ClockConfig+0x1f8>)
 80072ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <HAL_RCC_ClockConfig+0x1fc>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fc33 	bl	8005b3c <HAL_InitTick>
 80072d6:	4603      	mov	r3, r0
 80072d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80072da:	7afb      	ldrb	r3, [r7, #11]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40022000 	.word	0x40022000
 80072e8:	40021000 	.word	0x40021000
 80072ec:	0800b82c 	.word	0x0800b82c
 80072f0:	2000001c 	.word	0x2000001c
 80072f4:	20000014 	.word	0x20000014

080072f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b089      	sub	sp, #36	; 0x24
 80072fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	2300      	movs	r3, #0
 8007304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007306:	4b3e      	ldr	r3, [pc, #248]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 030c 	and.w	r3, r3, #12
 800730e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007310:	4b3b      	ldr	r3, [pc, #236]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d005      	beq.n	800732c <HAL_RCC_GetSysClockFreq+0x34>
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b0c      	cmp	r3, #12
 8007324:	d121      	bne.n	800736a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d11e      	bne.n	800736a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800732c:	4b34      	ldr	r3, [pc, #208]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d107      	bne.n	8007348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 800733a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e005      	b.n	8007354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	091b      	lsrs	r3, r3, #4
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007354:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800735c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10d      	bne.n	8007380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007368:	e00a      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b04      	cmp	r3, #4
 800736e:	d102      	bne.n	8007376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <HAL_RCC_GetSysClockFreq+0x110>)
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e004      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b08      	cmp	r3, #8
 800737a:	d101      	bne.n	8007380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800737c:	4b23      	ldr	r3, [pc, #140]	; (800740c <HAL_RCC_GetSysClockFreq+0x114>)
 800737e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b0c      	cmp	r3, #12
 8007384:	d134      	bne.n	80073f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007386:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d003      	beq.n	800739e <HAL_RCC_GetSysClockFreq+0xa6>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d003      	beq.n	80073a4 <HAL_RCC_GetSysClockFreq+0xac>
 800739c:	e005      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_RCC_GetSysClockFreq+0x110>)
 80073a0:	617b      	str	r3, [r7, #20]
      break;
 80073a2:	e005      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_RCC_GetSysClockFreq+0x114>)
 80073a6:	617b      	str	r3, [r7, #20]
      break;
 80073a8:	e002      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	617b      	str	r3, [r7, #20]
      break;
 80073ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073b0:	4b13      	ldr	r3, [pc, #76]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	3301      	adds	r3, #1
 80073bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80073be:	4b10      	ldr	r3, [pc, #64]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	fb03 f202 	mul.w	r2, r3, r2
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073d6:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <HAL_RCC_GetSysClockFreq+0x108>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	0e5b      	lsrs	r3, r3, #25
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	3301      	adds	r3, #1
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80073f0:	69bb      	ldr	r3, [r7, #24]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3724      	adds	r7, #36	; 0x24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40021000 	.word	0x40021000
 8007404:	0800b83c 	.word	0x0800b83c
 8007408:	00f42400 	.word	0x00f42400
 800740c:	02dc6c00 	.word	0x02dc6c00

08007410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800741c:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800741e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007428:	f7ff f9ee 	bl	8006808 <HAL_PWREx_GetVoltageRange>
 800742c:	6178      	str	r0, [r7, #20]
 800742e:	e014      	b.n	800745a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007430:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007434:	4a24      	ldr	r2, [pc, #144]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743a:	6593      	str	r3, [r2, #88]	; 0x58
 800743c:	4b22      	ldr	r3, [pc, #136]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007448:	f7ff f9de 	bl	8006808 <HAL_PWREx_GetVoltageRange>
 800744c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007458:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007460:	d10b      	bne.n	800747a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d919      	bls.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2ba0      	cmp	r3, #160	; 0xa0
 800746c:	d902      	bls.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800746e:	2302      	movs	r3, #2
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	e013      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007474:	2301      	movs	r3, #1
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e010      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b80      	cmp	r3, #128	; 0x80
 800747e:	d902      	bls.n	8007486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007480:	2303      	movs	r3, #3
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	e00a      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d102      	bne.n	8007492 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800748c:	2302      	movs	r3, #2
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e004      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b70      	cmp	r3, #112	; 0x70
 8007496:	d101      	bne.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007498:	2301      	movs	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800749c:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f023 0207 	bic.w	r2, r3, #7
 80074a4:	4909      	ldr	r1, [pc, #36]	; (80074cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074ac:	4b07      	ldr	r3, [pc, #28]	; (80074cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d001      	beq.n	80074be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40022000 	.word	0x40022000

080074d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074d8:	2300      	movs	r3, #0
 80074da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074dc:	2300      	movs	r3, #0
 80074de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d031      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074f4:	d01a      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80074f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074fa:	d814      	bhi.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d009      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007504:	d10f      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007506:	4b5d      	ldr	r3, [pc, #372]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	4a5c      	ldr	r2, [pc, #368]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007512:	e00c      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f9f0 	bl	8007900 <RCCEx_PLLSAI1_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007524:	e003      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	74fb      	strb	r3, [r7, #19]
      break;
 800752a:	e000      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800752c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800752e:	7cfb      	ldrb	r3, [r7, #19]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007534:	4b51      	ldr	r3, [pc, #324]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	494e      	ldr	r1, [pc, #312]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800754a:	e001      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	7cfb      	ldrb	r3, [r7, #19]
 800754e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 809e 	beq.w	800769a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800755e:	2300      	movs	r3, #0
 8007560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007562:	4b46      	ldr	r3, [pc, #280]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007578:	4b40      	ldr	r3, [pc, #256]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800757a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757c:	4a3f      	ldr	r2, [pc, #252]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800757e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007582:	6593      	str	r3, [r2, #88]	; 0x58
 8007584:	4b3d      	ldr	r3, [pc, #244]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758c:	60bb      	str	r3, [r7, #8]
 800758e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007590:	2301      	movs	r3, #1
 8007592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007594:	4b3a      	ldr	r3, [pc, #232]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a39      	ldr	r2, [pc, #228]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800759a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075a0:	f7fe fb08 	bl	8005bb4 <HAL_GetTick>
 80075a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075a6:	e009      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a8:	f7fe fb04 	bl	8005bb4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d902      	bls.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	74fb      	strb	r3, [r7, #19]
        break;
 80075ba:	e005      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075bc:	4b30      	ldr	r3, [pc, #192]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0ef      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80075c8:	7cfb      	ldrb	r3, [r7, #19]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d15a      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075ce:	4b2b      	ldr	r3, [pc, #172]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01e      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d019      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075ea:	4b24      	ldr	r3, [pc, #144]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075f6:	4b21      	ldr	r3, [pc, #132]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fc:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007606:	4b1d      	ldr	r3, [pc, #116]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760c:	4a1b      	ldr	r2, [pc, #108]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800760e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007616:	4a19      	ldr	r2, [pc, #100]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d016      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fe fac4 	bl	8005bb4 <HAL_GetTick>
 800762c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800762e:	e00b      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007630:	f7fe fac0 	bl	8005bb4 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	f241 3288 	movw	r2, #5000	; 0x1388
 800763e:	4293      	cmp	r3, r2
 8007640:	d902      	bls.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	74fb      	strb	r3, [r7, #19]
            break;
 8007646:	e006      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0ec      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007656:	7cfb      	ldrb	r3, [r7, #19]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	4904      	ldr	r1, [pc, #16]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007672:	e009      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007674:	7cfb      	ldrb	r3, [r7, #19]
 8007676:	74bb      	strb	r3, [r7, #18]
 8007678:	e006      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800767a:	bf00      	nop
 800767c:	40021000 	.word	0x40021000
 8007680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007688:	7c7b      	ldrb	r3, [r7, #17]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d105      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800768e:	4b9b      	ldr	r3, [pc, #620]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007692:	4a9a      	ldr	r2, [pc, #616]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076a6:	4b95      	ldr	r3, [pc, #596]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	f023 0203 	bic.w	r2, r3, #3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	4991      	ldr	r1, [pc, #580]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076c8:	4b8c      	ldr	r3, [pc, #560]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f023 020c 	bic.w	r2, r3, #12
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	4989      	ldr	r1, [pc, #548]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0304 	and.w	r3, r3, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076ea:	4b84      	ldr	r3, [pc, #528]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	4980      	ldr	r1, [pc, #512]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800770c:	4b7b      	ldr	r3, [pc, #492]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	4978      	ldr	r1, [pc, #480]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800772e:	4b73      	ldr	r3, [pc, #460]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773c:	496f      	ldr	r1, [pc, #444]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007750:	4b6a      	ldr	r3, [pc, #424]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	4967      	ldr	r1, [pc, #412]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007772:	4b62      	ldr	r3, [pc, #392]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	495e      	ldr	r1, [pc, #376]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007794:	4b59      	ldr	r3, [pc, #356]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	4956      	ldr	r1, [pc, #344]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077b6:	4b51      	ldr	r3, [pc, #324]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	494d      	ldr	r1, [pc, #308]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d028      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077d8:	4b48      	ldr	r3, [pc, #288]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e6:	4945      	ldr	r1, [pc, #276]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f6:	d106      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077f8:	4b40      	ldr	r3, [pc, #256]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	4a3f      	ldr	r2, [pc, #252]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80077fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007802:	60d3      	str	r3, [r2, #12]
 8007804:	e011      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800780e:	d10c      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3304      	adds	r3, #4
 8007814:	2101      	movs	r1, #1
 8007816:	4618      	mov	r0, r3
 8007818:	f000 f872 	bl	8007900 <RCCEx_PLLSAI1_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007820:	7cfb      	ldrb	r3, [r7, #19]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007826:	7cfb      	ldrb	r3, [r7, #19]
 8007828:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d028      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007836:	4b31      	ldr	r3, [pc, #196]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800783c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007844:	492d      	ldr	r1, [pc, #180]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007854:	d106      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007856:	4b29      	ldr	r3, [pc, #164]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	4a28      	ldr	r2, [pc, #160]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800785c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007860:	60d3      	str	r3, [r2, #12]
 8007862:	e011      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800786c:	d10c      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3304      	adds	r3, #4
 8007872:	2101      	movs	r1, #1
 8007874:	4618      	mov	r0, r3
 8007876:	f000 f843 	bl	8007900 <RCCEx_PLLSAI1_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800787e:	7cfb      	ldrb	r3, [r7, #19]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01c      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007894:	4b19      	ldr	r3, [pc, #100]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	4916      	ldr	r1, [pc, #88]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b2:	d10c      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3304      	adds	r3, #4
 80078b8:	2102      	movs	r1, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f820 	bl	8007900 <RCCEx_PLLSAI1_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078c4:	7cfb      	ldrb	r3, [r7, #19]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80078ca:	7cfb      	ldrb	r3, [r7, #19]
 80078cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078da:	4b08      	ldr	r3, [pc, #32]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	4904      	ldr	r1, [pc, #16]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80078f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40021000 	.word	0x40021000

08007900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800790e:	4b74      	ldr	r3, [pc, #464]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800791a:	4b71      	ldr	r3, [pc, #452]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0203 	and.w	r2, r3, #3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d10d      	bne.n	8007946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
       ||
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007932:	4b6b      	ldr	r3, [pc, #428]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	091b      	lsrs	r3, r3, #4
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
       ||
 8007942:	429a      	cmp	r2, r3
 8007944:	d047      	beq.n	80079d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
 800794a:	e044      	b.n	80079d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b03      	cmp	r3, #3
 8007952:	d018      	beq.n	8007986 <RCCEx_PLLSAI1_Config+0x86>
 8007954:	2b03      	cmp	r3, #3
 8007956:	d825      	bhi.n	80079a4 <RCCEx_PLLSAI1_Config+0xa4>
 8007958:	2b01      	cmp	r3, #1
 800795a:	d002      	beq.n	8007962 <RCCEx_PLLSAI1_Config+0x62>
 800795c:	2b02      	cmp	r3, #2
 800795e:	d009      	beq.n	8007974 <RCCEx_PLLSAI1_Config+0x74>
 8007960:	e020      	b.n	80079a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007962:	4b5f      	ldr	r3, [pc, #380]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11d      	bne.n	80079aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007972:	e01a      	b.n	80079aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007974:	4b5a      	ldr	r3, [pc, #360]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797c:	2b00      	cmp	r3, #0
 800797e:	d116      	bne.n	80079ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007984:	e013      	b.n	80079ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007986:	4b56      	ldr	r3, [pc, #344]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10f      	bne.n	80079b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007992:	4b53      	ldr	r3, [pc, #332]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079a2:	e006      	b.n	80079b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]
      break;
 80079a8:	e004      	b.n	80079b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079aa:	bf00      	nop
 80079ac:	e002      	b.n	80079b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079ae:	bf00      	nop
 80079b0:	e000      	b.n	80079b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80079ba:	4b49      	ldr	r3, [pc, #292]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6819      	ldr	r1, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	430b      	orrs	r3, r1
 80079d0:	4943      	ldr	r1, [pc, #268]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d17c      	bne.n	8007ad6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80079dc:	4b40      	ldr	r3, [pc, #256]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a3f      	ldr	r2, [pc, #252]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80079e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e8:	f7fe f8e4 	bl	8005bb4 <HAL_GetTick>
 80079ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079ee:	e009      	b.n	8007a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079f0:	f7fe f8e0 	bl	8005bb4 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d902      	bls.n	8007a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	73fb      	strb	r3, [r7, #15]
        break;
 8007a02:	e005      	b.n	8007a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a04:	4b36      	ldr	r3, [pc, #216]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1ef      	bne.n	80079f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d15f      	bne.n	8007ad6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d110      	bne.n	8007a3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a1c:	4b30      	ldr	r3, [pc, #192]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6892      	ldr	r2, [r2, #8]
 8007a2c:	0211      	lsls	r1, r2, #8
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68d2      	ldr	r2, [r2, #12]
 8007a32:	06d2      	lsls	r2, r2, #27
 8007a34:	430a      	orrs	r2, r1
 8007a36:	492a      	ldr	r1, [pc, #168]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	610b      	str	r3, [r1, #16]
 8007a3c:	e027      	b.n	8007a8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d112      	bne.n	8007a6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a44:	4b26      	ldr	r3, [pc, #152]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6892      	ldr	r2, [r2, #8]
 8007a54:	0211      	lsls	r1, r2, #8
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6912      	ldr	r2, [r2, #16]
 8007a5a:	0852      	lsrs	r2, r2, #1
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	0552      	lsls	r2, r2, #21
 8007a60:	430a      	orrs	r2, r1
 8007a62:	491f      	ldr	r1, [pc, #124]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	610b      	str	r3, [r1, #16]
 8007a68:	e011      	b.n	8007a8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6892      	ldr	r2, [r2, #8]
 8007a7a:	0211      	lsls	r1, r2, #8
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6952      	ldr	r2, [r2, #20]
 8007a80:	0852      	lsrs	r2, r2, #1
 8007a82:	3a01      	subs	r2, #1
 8007a84:	0652      	lsls	r2, r2, #25
 8007a86:	430a      	orrs	r2, r1
 8007a88:	4915      	ldr	r1, [pc, #84]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9a:	f7fe f88b 	bl	8005bb4 <HAL_GetTick>
 8007a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007aa0:	e009      	b.n	8007ab6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007aa2:	f7fe f887 	bl	8005bb4 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d902      	bls.n	8007ab6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ab4:	e005      	b.n	8007ac2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ef      	beq.n	8007aa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	4903      	ldr	r1, [pc, #12]	; (8007ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40021000 	.word	0x40021000

08007ae4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d06c      	beq.n	8007bd0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 f954 	bl	8009db8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	22ca      	movs	r2, #202	; 0xca
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2253      	movs	r2, #83	; 0x53
 8007b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f87c 	bl	8007c26 <RTC_EnterInitMode>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d14b      	bne.n	8007bd0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6899      	ldr	r1, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68d2      	ldr	r2, [r2, #12]
 8007b72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6919      	ldr	r1, [r3, #16]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	041a      	lsls	r2, r3, #16
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f87f 	bl	8007c8c <RTC_ExitInitMode>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d11b      	bne.n	8007bd0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0203 	bic.w	r2, r2, #3
 8007ba6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69da      	ldr	r2, [r3, #28]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bf0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007bf2:	f7fd ffdf 	bl	8005bb4 <HAL_GetTick>
 8007bf6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007bf8:	e009      	b.n	8007c0e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bfa:	f7fd ffdb 	bl	8005bb4 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c08:	d901      	bls.n	8007c0e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e007      	b.n	8007c1e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0ee      	beq.n	8007bfa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d120      	bne.n	8007c82 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c48:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c4a:	f7fd ffb3 	bl	8005bb4 <HAL_GetTick>
 8007c4e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c50:	e00d      	b.n	8007c6e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c52:	f7fd ffaf 	bl	8005bb4 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c60:	d905      	bls.n	8007c6e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <RTC_EnterInitMode+0x5c>
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d1e7      	bne.n	8007c52 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	4a19      	ldr	r2, [pc, #100]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007ca4:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10c      	bne.n	8007cca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ff92 	bl	8007bda <HAL_RTC_WaitForSynchro>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01e      	beq.n	8007cfa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e017      	b.n	8007cfa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4a0d      	ldr	r2, [pc, #52]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007cd0:	f023 0320 	bic.w	r3, r3, #32
 8007cd4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff ff7f 	bl	8007bda <HAL_RTC_WaitForSynchro>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <RTC_ExitInitMode+0x78>)
 8007cf4:	f043 0320 	orr.w	r3, r3, #32
 8007cf8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40002800 	.word	0x40002800

08007d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e049      	b.n	8007dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f002 f85e 	bl	8009df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 fe2e 	bl	80089a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e049      	b.n	8007e5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f002 f901 	bl	8009fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f000 fdd7 	bl	80089a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d109      	bne.n	8007e90 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	bf0c      	ite	eq
 8007e88:	2301      	moveq	r3, #1
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	e03c      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d109      	bne.n	8007eaa <HAL_TIM_PWM_Start_DMA+0x46>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	bf0c      	ite	eq
 8007ea2:	2301      	moveq	r3, #1
 8007ea4:	2300      	movne	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	e02f      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d109      	bne.n	8007ec4 <HAL_TIM_PWM_Start_DMA+0x60>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	e022      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b0c      	cmp	r3, #12
 8007ec8:	d109      	bne.n	8007ede <HAL_TIM_PWM_Start_DMA+0x7a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	e015      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d109      	bne.n	8007ef8 <HAL_TIM_PWM_Start_DMA+0x94>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	bf0c      	ite	eq
 8007ef0:	2301      	moveq	r3, #1
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	e008      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e18d      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	bf0c      	ite	eq
 8007f24:	2301      	moveq	r3, #1
 8007f26:	2300      	movne	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	e03c      	b.n	8007fa6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d109      	bne.n	8007f46 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	e02f      	b.n	8007fa6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d109      	bne.n	8007f60 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	e022      	b.n	8007fa6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b0c      	cmp	r3, #12
 8007f64:	d109      	bne.n	8007f7a <HAL_TIM_PWM_Start_DMA+0x116>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	bf0c      	ite	eq
 8007f72:	2301      	moveq	r3, #1
 8007f74:	2300      	movne	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	e015      	b.n	8007fa6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d109      	bne.n	8007f94 <HAL_TIM_PWM_Start_DMA+0x130>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e008      	b.n	8007fa6 <HAL_TIM_PWM_Start_DMA+0x142>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d034      	beq.n	8008014 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_TIM_PWM_Start_DMA+0x152>
 8007fb0:	887b      	ldrh	r3, [r7, #2]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e139      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <HAL_TIM_PWM_Start_DMA+0x166>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc8:	e026      	b.n	8008018 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_PWM_Start_DMA+0x176>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd8:	e01e      	b.n	8008018 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d104      	bne.n	8007fea <HAL_TIM_PWM_Start_DMA+0x186>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe8:	e016      	b.n	8008018 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	d104      	bne.n	8007ffa <HAL_TIM_PWM_Start_DMA+0x196>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ff8:	e00e      	b.n	8008018 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	d104      	bne.n	800800a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008008:	e006      	b.n	8008018 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008012:	e001      	b.n	8008018 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e10a      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b0c      	cmp	r3, #12
 800801c:	f200 80ae 	bhi.w	800817c <HAL_TIM_PWM_Start_DMA+0x318>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800805d 	.word	0x0800805d
 800802c:	0800817d 	.word	0x0800817d
 8008030:	0800817d 	.word	0x0800817d
 8008034:	0800817d 	.word	0x0800817d
 8008038:	080080a5 	.word	0x080080a5
 800803c:	0800817d 	.word	0x0800817d
 8008040:	0800817d 	.word	0x0800817d
 8008044:	0800817d 	.word	0x0800817d
 8008048:	080080ed 	.word	0x080080ed
 800804c:	0800817d 	.word	0x0800817d
 8008050:	0800817d 	.word	0x0800817d
 8008054:	0800817d 	.word	0x0800817d
 8008058:	08008135 	.word	0x08008135
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	4a75      	ldr	r2, [pc, #468]	; (8008238 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	4a74      	ldr	r2, [pc, #464]	; (800823c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800806a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	4a73      	ldr	r2, [pc, #460]	; (8008240 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3334      	adds	r3, #52	; 0x34
 8008080:	461a      	mov	r2, r3
 8008082:	887b      	ldrh	r3, [r7, #2]
 8008084:	f7fd ffc2 	bl	800600c <HAL_DMA_Start_IT>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e0cd      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a0:	60da      	str	r2, [r3, #12]
      break;
 80080a2:	e06e      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	4a63      	ldr	r2, [pc, #396]	; (8008238 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80080aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	4a62      	ldr	r2, [pc, #392]	; (800823c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	4a61      	ldr	r2, [pc, #388]	; (8008240 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80080ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3338      	adds	r3, #56	; 0x38
 80080c8:	461a      	mov	r2, r3
 80080ca:	887b      	ldrh	r3, [r7, #2]
 80080cc:	f7fd ff9e 	bl	800600c <HAL_DMA_Start_IT>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e0a9      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080e8:	60da      	str	r2, [r3, #12]
      break;
 80080ea:	e04a      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4a51      	ldr	r2, [pc, #324]	; (8008238 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	4a50      	ldr	r2, [pc, #320]	; (800823c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	4a4f      	ldr	r2, [pc, #316]	; (8008240 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008102:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	333c      	adds	r3, #60	; 0x3c
 8008110:	461a      	mov	r2, r3
 8008112:	887b      	ldrh	r3, [r7, #2]
 8008114:	f7fd ff7a 	bl	800600c <HAL_DMA_Start_IT>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e085      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008130:	60da      	str	r2, [r3, #12]
      break;
 8008132:	e026      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	4a3f      	ldr	r2, [pc, #252]	; (8008238 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	4a3e      	ldr	r2, [pc, #248]	; (800823c <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8008142:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	4a3d      	ldr	r2, [pc, #244]	; (8008240 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800814a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3340      	adds	r3, #64	; 0x40
 8008158:	461a      	mov	r2, r3
 800815a:	887b      	ldrh	r3, [r7, #2]
 800815c:	f7fd ff56 	bl	800600c <HAL_DMA_Start_IT>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e061      	b.n	800822e <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008178:	60da      	str	r2, [r3, #12]
      break;
 800817a:	e002      	b.n	8008182 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	75fb      	strb	r3, [r7, #23]
      break;
 8008180:	bf00      	nop
  }

  if (status == HAL_OK)
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d151      	bne.n	800822c <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2201      	movs	r2, #1
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 ff85 	bl	80090a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIM_PWM_Start_DMA+0x350>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a28      	ldr	r2, [pc, #160]	; (8008248 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_PWM_Start_DMA+0x350>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a27      	ldr	r2, [pc, #156]	; (800824c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_PWM_Start_DMA+0x354>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <HAL_TIM_PWM_Start_DMA+0x356>
 80081b8:	2300      	movs	r3, #0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d007      	beq.n	80081ce <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1c      	ldr	r2, [pc, #112]	; (8008244 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_TIM_PWM_Start_DMA+0x388>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e0:	d004      	beq.n	80081ec <HAL_TIM_PWM_Start_DMA+0x388>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a18      	ldr	r2, [pc, #96]	; (8008248 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d115      	bne.n	8008218 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	4b17      	ldr	r3, [pc, #92]	; (8008250 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b06      	cmp	r3, #6
 80081fc:	d015      	beq.n	800822a <HAL_TIM_PWM_Start_DMA+0x3c6>
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008204:	d011      	beq.n	800822a <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 0201 	orr.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008216:	e008      	b.n	800822a <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e000      	b.n	800822c <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800822c:	7dfb      	ldrb	r3, [r7, #23]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	08008899 	.word	0x08008899
 800823c:	08008941 	.word	0x08008941
 8008240:	08008807 	.word	0x08008807
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40014000 	.word	0x40014000
 800824c:	40014400 	.word	0x40014400
 8008250:	00010007 	.word	0x00010007

08008254 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b0c      	cmp	r3, #12
 8008266:	d855      	bhi.n	8008314 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	080082a5 	.word	0x080082a5
 8008274:	08008315 	.word	0x08008315
 8008278:	08008315 	.word	0x08008315
 800827c:	08008315 	.word	0x08008315
 8008280:	080082c1 	.word	0x080082c1
 8008284:	08008315 	.word	0x08008315
 8008288:	08008315 	.word	0x08008315
 800828c:	08008315 	.word	0x08008315
 8008290:	080082dd 	.word	0x080082dd
 8008294:	08008315 	.word	0x08008315
 8008298:	08008315 	.word	0x08008315
 800829c:	08008315 	.word	0x08008315
 80082a0:	080082f9 	.word	0x080082f9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80082b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fd ff07 	bl	80060cc <HAL_DMA_Abort_IT>
      break;
 80082be:	e02c      	b.n	800831a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fef9 	bl	80060cc <HAL_DMA_Abort_IT>
      break;
 80082da:	e01e      	b.n	800831a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fd feeb 	bl	80060cc <HAL_DMA_Abort_IT>
      break;
 80082f6:	e010      	b.n	800831a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008306:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd fedd 	bl	80060cc <HAL_DMA_Abort_IT>
      break;
 8008312:	e002      	b.n	800831a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	bf00      	nop
  }

  if (status == HAL_OK)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d176      	bne.n	800840e <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 feb9 	bl	80090a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a39      	ldr	r2, [pc, #228]	; (8008418 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d009      	beq.n	800834c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a37      	ldr	r2, [pc, #220]	; (800841c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d004      	beq.n	800834c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a36      	ldr	r2, [pc, #216]	; (8008420 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d101      	bne.n	8008350 <HAL_TIM_PWM_Stop_DMA+0xfc>
 800834c:	2301      	movs	r3, #1
 800834e:	e000      	b.n	8008352 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008350:	2300      	movs	r3, #0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d017      	beq.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6a1a      	ldr	r2, [r3, #32]
 800835c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10f      	bne.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x132>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a1a      	ldr	r2, [r3, #32]
 800836c:	f240 4344 	movw	r3, #1092	; 0x444
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d107      	bne.n	8008386 <HAL_TIM_PWM_Stop_DMA+0x132>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008384:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6a1a      	ldr	r2, [r3, #32]
 800838c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10f      	bne.n	80083b6 <HAL_TIM_PWM_Stop_DMA+0x162>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6a1a      	ldr	r2, [r3, #32]
 800839c:	f240 4344 	movw	r3, #1092	; 0x444
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d107      	bne.n	80083b6 <HAL_TIM_PWM_Stop_DMA+0x162>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0201 	bic.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_PWM_Stop_DMA+0x172>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c4:	e023      	b.n	800840e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d104      	bne.n	80083d6 <HAL_TIM_PWM_Stop_DMA+0x182>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d4:	e01b      	b.n	800840e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d104      	bne.n	80083e6 <HAL_TIM_PWM_Stop_DMA+0x192>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e4:	e013      	b.n	800840e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b0c      	cmp	r3, #12
 80083ea:	d104      	bne.n	80083f6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083f4:	e00b      	b.n	800840e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008404:	e003      	b.n	800840e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400

08008424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800843e:	2302      	movs	r3, #2
 8008440:	e0ff      	b.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b14      	cmp	r3, #20
 800844e:	f200 80f0 	bhi.w	8008632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008452:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	080084ad 	.word	0x080084ad
 800845c:	08008633 	.word	0x08008633
 8008460:	08008633 	.word	0x08008633
 8008464:	08008633 	.word	0x08008633
 8008468:	080084ed 	.word	0x080084ed
 800846c:	08008633 	.word	0x08008633
 8008470:	08008633 	.word	0x08008633
 8008474:	08008633 	.word	0x08008633
 8008478:	0800852f 	.word	0x0800852f
 800847c:	08008633 	.word	0x08008633
 8008480:	08008633 	.word	0x08008633
 8008484:	08008633 	.word	0x08008633
 8008488:	0800856f 	.word	0x0800856f
 800848c:	08008633 	.word	0x08008633
 8008490:	08008633 	.word	0x08008633
 8008494:	08008633 	.word	0x08008633
 8008498:	080085b1 	.word	0x080085b1
 800849c:	08008633 	.word	0x08008633
 80084a0:	08008633 	.word	0x08008633
 80084a4:	08008633 	.word	0x08008633
 80084a8:	080085f1 	.word	0x080085f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fadc 	bl	8008a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0208 	orr.w	r2, r2, #8
 80084c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0204 	bic.w	r2, r2, #4
 80084d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6999      	ldr	r1, [r3, #24]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	691a      	ldr	r2, [r3, #16]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	619a      	str	r2, [r3, #24]
      break;
 80084ea:	e0a5      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fb38 	bl	8008b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6999      	ldr	r1, [r3, #24]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	021a      	lsls	r2, r3, #8
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	619a      	str	r2, [r3, #24]
      break;
 800852c:	e084      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fb91 	bl	8008c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0208 	orr.w	r2, r2, #8
 8008548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0204 	bic.w	r2, r2, #4
 8008558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69d9      	ldr	r1, [r3, #28]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	61da      	str	r2, [r3, #28]
      break;
 800856c:	e064      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fbe9 	bl	8008d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69d9      	ldr	r1, [r3, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	021a      	lsls	r2, r3, #8
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	61da      	str	r2, [r3, #28]
      break;
 80085ae:	e043      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fc26 	bl	8008e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0208 	orr.w	r2, r2, #8
 80085ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0204 	bic.w	r2, r2, #4
 80085da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085ee:	e023      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fc5e 	bl	8008eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800860a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800861a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	021a      	lsls	r2, r3, #8
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008630:	e002      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
      break;
 8008636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop

0800864c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <HAL_TIM_ConfigClockSource+0x1c>
 8008664:	2302      	movs	r3, #2
 8008666:	e0b6      	b.n	80087d6 <HAL_TIM_ConfigClockSource+0x18a>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800868a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a4:	d03e      	beq.n	8008724 <HAL_TIM_ConfigClockSource+0xd8>
 80086a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086aa:	f200 8087 	bhi.w	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b2:	f000 8086 	beq.w	80087c2 <HAL_TIM_ConfigClockSource+0x176>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	d87f      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086bc:	2b70      	cmp	r3, #112	; 0x70
 80086be:	d01a      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0xaa>
 80086c0:	2b70      	cmp	r3, #112	; 0x70
 80086c2:	d87b      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086c4:	2b60      	cmp	r3, #96	; 0x60
 80086c6:	d050      	beq.n	800876a <HAL_TIM_ConfigClockSource+0x11e>
 80086c8:	2b60      	cmp	r3, #96	; 0x60
 80086ca:	d877      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	d03c      	beq.n	800874a <HAL_TIM_ConfigClockSource+0xfe>
 80086d0:	2b50      	cmp	r3, #80	; 0x50
 80086d2:	d873      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	d058      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x13e>
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d86f      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086dc:	2b30      	cmp	r3, #48	; 0x30
 80086de:	d064      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x15e>
 80086e0:	2b30      	cmp	r3, #48	; 0x30
 80086e2:	d86b      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d060      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x15e>
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d867      	bhi.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d05c      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x15e>
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d05a      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x15e>
 80086f4:	e062      	b.n	80087bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6899      	ldr	r1, [r3, #8]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f000 fcab 	bl	8009060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	609a      	str	r2, [r3, #8]
      break;
 8008722:	e04f      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	6899      	ldr	r1, [r3, #8]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f000 fc94 	bl	8009060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008746:	609a      	str	r2, [r3, #8]
      break;
 8008748:	e03c      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	f000 fc08 	bl	8008f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2150      	movs	r1, #80	; 0x50
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fc61 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008768:	e02c      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6859      	ldr	r1, [r3, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	461a      	mov	r2, r3
 8008778:	f000 fc27 	bl	8008fca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2160      	movs	r1, #96	; 0x60
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fc51 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008788:	e01c      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6859      	ldr	r1, [r3, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	461a      	mov	r2, r3
 8008798:	f000 fbe8 	bl	8008f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2140      	movs	r1, #64	; 0x40
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fc41 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 80087a8:	e00c      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f000 fc38 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 80087ba:	e003      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
      break;
 80087c0:	e000      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80087c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d107      	bne.n	800882e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800882c:	e02a      	b.n	8008884 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d107      	bne.n	8008848 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2202      	movs	r2, #2
 800883c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008846:	e01d      	b.n	8008884 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	429a      	cmp	r2, r3
 8008850:	d107      	bne.n	8008862 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2204      	movs	r2, #4
 8008856:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008860:	e010      	b.n	8008884 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	429a      	cmp	r2, r3
 800886a:	d107      	bne.n	800887c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2208      	movs	r2, #8
 8008870:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800887a:	e003      	b.n	8008884 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff ffb4 	bl	80087f2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	771a      	strb	r2, [r3, #28]
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d10b      	bne.n	80088c8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d136      	bne.n	800892c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c6:	e031      	b.n	800892c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d10b      	bne.n	80088ea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2202      	movs	r2, #2
 80088d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d125      	bne.n	800892c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088e8:	e020      	b.n	800892c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d10b      	bne.n	800890c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2204      	movs	r2, #4
 80088f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d114      	bne.n	800892c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800890a:	e00f      	b.n	800892c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	429a      	cmp	r2, r3
 8008914:	d10a      	bne.n	800892c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2208      	movs	r2, #8
 800891a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d103      	bne.n	800892c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f001 fccf 	bl	800a2d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d103      	bne.n	8008960 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	771a      	strb	r2, [r3, #28]
 800895e:	e019      	b.n	8008994 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d103      	bne.n	8008972 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2202      	movs	r2, #2
 800896e:	771a      	strb	r2, [r3, #28]
 8008970:	e010      	b.n	8008994 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	429a      	cmp	r2, r3
 800897a:	d103      	bne.n	8008984 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2204      	movs	r2, #4
 8008980:	771a      	strb	r2, [r3, #28]
 8008982:	e007      	b.n	8008994 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d102      	bne.n	8008994 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2208      	movs	r2, #8
 8008992:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff ff22 	bl	80087de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a2a      	ldr	r2, [pc, #168]	; (8008a64 <TIM_Base_SetConfig+0xbc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d003      	beq.n	80089c8 <TIM_Base_SetConfig+0x20>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c6:	d108      	bne.n	80089da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a21      	ldr	r2, [pc, #132]	; (8008a64 <TIM_Base_SetConfig+0xbc>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d00b      	beq.n	80089fa <TIM_Base_SetConfig+0x52>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e8:	d007      	beq.n	80089fa <TIM_Base_SetConfig+0x52>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a1e      	ldr	r2, [pc, #120]	; (8008a68 <TIM_Base_SetConfig+0xc0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d003      	beq.n	80089fa <TIM_Base_SetConfig+0x52>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a1d      	ldr	r2, [pc, #116]	; (8008a6c <TIM_Base_SetConfig+0xc4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d108      	bne.n	8008a0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <TIM_Base_SetConfig+0xbc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d007      	beq.n	8008a48 <TIM_Base_SetConfig+0xa0>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a0b      	ldr	r2, [pc, #44]	; (8008a68 <TIM_Base_SetConfig+0xc0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_Base_SetConfig+0xa0>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <TIM_Base_SetConfig+0xc4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d103      	bne.n	8008a50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	615a      	str	r2, [r3, #20]
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400

08008a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	f023 0201 	bic.w	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f023 0302 	bic.w	r3, r3, #2
 8008abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a24      	ldr	r2, [pc, #144]	; (8008b5c <TIM_OC1_SetConfig+0xec>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_OC1_SetConfig+0x70>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a23      	ldr	r2, [pc, #140]	; (8008b60 <TIM_OC1_SetConfig+0xf0>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC1_SetConfig+0x70>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a22      	ldr	r2, [pc, #136]	; (8008b64 <TIM_OC1_SetConfig+0xf4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d10c      	bne.n	8008afa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f023 0308 	bic.w	r3, r3, #8
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f023 0304 	bic.w	r3, r3, #4
 8008af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <TIM_OC1_SetConfig+0xec>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d007      	beq.n	8008b12 <TIM_OC1_SetConfig+0xa2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a16      	ldr	r2, [pc, #88]	; (8008b60 <TIM_OC1_SetConfig+0xf0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d003      	beq.n	8008b12 <TIM_OC1_SetConfig+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a15      	ldr	r2, [pc, #84]	; (8008b64 <TIM_OC1_SetConfig+0xf4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d111      	bne.n	8008b36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	621a      	str	r2, [r3, #32]
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400

08008b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f023 0210 	bic.w	r2, r3, #16
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f023 0320 	bic.w	r3, r3, #32
 8008bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a22      	ldr	r2, [pc, #136]	; (8008c50 <TIM_OC2_SetConfig+0xe8>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d10d      	bne.n	8008be8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a19      	ldr	r2, [pc, #100]	; (8008c50 <TIM_OC2_SetConfig+0xe8>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d007      	beq.n	8008c00 <TIM_OC2_SetConfig+0x98>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a18      	ldr	r2, [pc, #96]	; (8008c54 <TIM_OC2_SetConfig+0xec>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d003      	beq.n	8008c00 <TIM_OC2_SetConfig+0x98>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <TIM_OC2_SetConfig+0xf0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d113      	bne.n	8008c28 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	621a      	str	r2, [r3, #32]
}
 8008c42:	bf00      	nop
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40012c00 	.word	0x40012c00
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400

08008c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	021b      	lsls	r3, r3, #8
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <TIM_OC3_SetConfig+0xe4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d10d      	bne.n	8008cda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a18      	ldr	r2, [pc, #96]	; (8008d40 <TIM_OC3_SetConfig+0xe4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d007      	beq.n	8008cf2 <TIM_OC3_SetConfig+0x96>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a17      	ldr	r2, [pc, #92]	; (8008d44 <TIM_OC3_SetConfig+0xe8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d003      	beq.n	8008cf2 <TIM_OC3_SetConfig+0x96>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a16      	ldr	r2, [pc, #88]	; (8008d48 <TIM_OC3_SetConfig+0xec>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d113      	bne.n	8008d1a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	621a      	str	r2, [r3, #32]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	40012c00 	.word	0x40012c00
 8008d44:	40014000 	.word	0x40014000
 8008d48:	40014400 	.word	0x40014400

08008d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	031b      	lsls	r3, r3, #12
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a14      	ldr	r2, [pc, #80]	; (8008dfc <TIM_OC4_SetConfig+0xb0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d007      	beq.n	8008dc0 <TIM_OC4_SetConfig+0x74>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <TIM_OC4_SetConfig+0xb4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_OC4_SetConfig+0x74>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a12      	ldr	r2, [pc, #72]	; (8008e04 <TIM_OC4_SetConfig+0xb8>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d109      	bne.n	8008dd4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	019b      	lsls	r3, r3, #6
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400

08008e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	041b      	lsls	r3, r3, #16
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a13      	ldr	r2, [pc, #76]	; (8008eac <TIM_OC5_SetConfig+0xa4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d007      	beq.n	8008e72 <TIM_OC5_SetConfig+0x6a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a12      	ldr	r2, [pc, #72]	; (8008eb0 <TIM_OC5_SetConfig+0xa8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d003      	beq.n	8008e72 <TIM_OC5_SetConfig+0x6a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a11      	ldr	r2, [pc, #68]	; (8008eb4 <TIM_OC5_SetConfig+0xac>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d109      	bne.n	8008e86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	621a      	str	r2, [r3, #32]
}
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	40012c00 	.word	0x40012c00
 8008eb0:	40014000 	.word	0x40014000
 8008eb4:	40014400 	.word	0x40014400

08008eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	051b      	lsls	r3, r3, #20
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a14      	ldr	r2, [pc, #80]	; (8008f60 <TIM_OC6_SetConfig+0xa8>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d007      	beq.n	8008f24 <TIM_OC6_SetConfig+0x6c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <TIM_OC6_SetConfig+0xac>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d003      	beq.n	8008f24 <TIM_OC6_SetConfig+0x6c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a12      	ldr	r2, [pc, #72]	; (8008f68 <TIM_OC6_SetConfig+0xb0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d109      	bne.n	8008f38 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	029b      	lsls	r3, r3, #10
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	40012c00 	.word	0x40012c00
 8008f64:	40014000 	.word	0x40014000
 8008f68:	40014400 	.word	0x40014400

08008f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	f023 0201 	bic.w	r2, r3, #1
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f023 030a 	bic.w	r3, r3, #10
 8008fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b087      	sub	sp, #28
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f023 0210 	bic.w	r2, r3, #16
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	031b      	lsls	r3, r3, #12
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	621a      	str	r2, [r3, #32]
}
 800901e:	bf00      	nop
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	f043 0307 	orr.w	r3, r3, #7
 800904c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	609a      	str	r2, [r3, #8]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800907a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	021a      	lsls	r2, r3, #8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	431a      	orrs	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4313      	orrs	r3, r2
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	4313      	orrs	r3, r2
 800908c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	609a      	str	r2, [r3, #8]
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f003 031f 	and.w	r3, r3, #31
 80090b2:	2201      	movs	r2, #1
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a1a      	ldr	r2, [r3, #32]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	43db      	mvns	r3, r3
 80090c2:	401a      	ands	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f003 031f 	and.w	r3, r3, #31
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	fa01 f303 	lsl.w	r3, r1, r3
 80090d8:	431a      	orrs	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]
}
 80090de:	bf00      	nop
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009100:	2302      	movs	r3, #2
 8009102:	e04f      	b.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a21      	ldr	r2, [pc, #132]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d108      	bne.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009134:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a14      	ldr	r2, [pc, #80]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d009      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916c:	d004      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10c      	bne.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800917e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	4313      	orrs	r3, r2
 8009188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	40014000 	.word	0x40014000

080091b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e060      	b.n	8009296 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	041b      	lsls	r3, r3, #16
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a14      	ldr	r2, [pc, #80]	; (80092a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d115      	bne.n	8009284 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	051b      	lsls	r3, r3, #20
 8009264:	4313      	orrs	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40012c00 	.word	0x40012c00

080092a8 <board_init_common_rtc_init>:
volatile int datasentflag = 0;
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};

static void board_init_common_rtc_init(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 80092ac:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092ae:	4a11      	ldr	r2, [pc, #68]	; (80092f4 <board_init_common_rtc_init+0x4c>)
 80092b0:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 80092b2:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092ba:	227f      	movs	r2, #127	; 0x7f
 80092bc:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 80092be:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092c0:	22ff      	movs	r2, #255	; 0xff
 80092c2:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80092ca:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80092d0:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80092d6:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092d8:	2200      	movs	r2, #0
 80092da:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 80092dc:	4804      	ldr	r0, [pc, #16]	; (80092f0 <board_init_common_rtc_init+0x48>)
 80092de:	f7fe fc01 	bl	8007ae4 <HAL_RTC_Init>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <board_init_common_rtc_init+0x44>
 80092e8:	f000 fbd4 	bl	8009a94 <Error_Handler>
}
 80092ec:	bf00      	nop
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20001eb4 	.word	0x20001eb4
 80092f4:	40002800 	.word	0x40002800

080092f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b0ae      	sub	sp, #184	; 0xb8
 80092fc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80092fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009302:	2244      	movs	r2, #68	; 0x44
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f001 f98a 	bl	800a620 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800930c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	609a      	str	r2, [r3, #8]
 8009318:	60da      	str	r2, [r3, #12]
 800931a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	225c      	movs	r2, #92	; 0x5c
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f001 f97c 	bl	800a620 <memset>

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8009328:	f7fd f9ee 	bl	8006708 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800932c:	4b26      	ldr	r3, [pc, #152]	; (80093c8 <SystemClock_Config+0xd0>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	4a25      	ldr	r2, [pc, #148]	; (80093c8 <SystemClock_Config+0xd0>)
 8009334:	f023 0318 	bic.w	r3, r3, #24
 8009338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800933c:	2305      	movs	r3, #5
 800933e:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009344:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009346:	2301      	movs	r3, #1
 8009348:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800934a:	2300      	movs	r3, #0
 800934c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8009350:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009354:	4618      	mov	r0, r3
 8009356:	f7fd fabb 	bl	80068d0 <HAL_RCC_OscConfig>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <SystemClock_Config+0x6c>
 8009360:	f000 fb98 	bl	8009a94 <Error_Handler>
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009364:	230f      	movs	r3, #15
 8009366:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009368:	2302      	movs	r3, #2
 800936a:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800936c:	2300      	movs	r3, #0
 800936e:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009370:	2300      	movs	r3, #0
 8009372:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009374:	2300      	movs	r3, #0
 8009376:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) Error_Handler();
 8009378:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800937c:	2102      	movs	r1, #2
 800937e:	4618      	mov	r0, r3
 8009380:	f7fd feba 	bl	80070f8 <HAL_RCC_ClockConfig>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <SystemClock_Config+0x96>
 800938a:	f000 fb83 	bl	8009a94 <Error_Handler>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800938e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009392:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009398:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f897 	bl	80074d0 <HAL_RCCEx_PeriphCLKConfig>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <SystemClock_Config+0xb4>
 80093a8:	f000 fb74 	bl	8009a94 <Error_Handler>
    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80093ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80093b0:	f7fd fa38 	bl	8006824 <HAL_PWREx_ControlVoltageScaling>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <SystemClock_Config+0xc6>
 80093ba:	f000 fb6b 	bl	8009a94 <Error_Handler>
}
 80093be:	bf00      	nop
 80093c0:	37b8      	adds	r7, #184	; 0xb8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40021000 	.word	0x40021000

080093cc <board_init_common_timer_init>:


static void board_init_common_timer_init(timer_e timer)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b0a2      	sub	sp, #136	; 0x88
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	609a      	str	r2, [r3, #8]
 80093e2:	60da      	str	r2, [r3, #12]
 80093e4:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	605a      	str	r2, [r3, #4]
 80093f0:	609a      	str	r2, [r3, #8]
 80093f2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	605a      	str	r2, [r3, #4]
 80093fe:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	609a      	str	r2, [r3, #8]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	611a      	str	r2, [r3, #16]
 8009410:	615a      	str	r2, [r3, #20]
 8009412:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009414:	f107 0310 	add.w	r3, r7, #16
 8009418:	222c      	movs	r2, #44	; 0x2c
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f001 f8ff 	bl	800a620 <memset>
    switch (timer)
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	2b02      	cmp	r3, #2
 8009426:	f000 8153 	beq.w	80096d0 <board_init_common_timer_init+0x304>
 800942a:	2b02      	cmp	r3, #2
 800942c:	f300 81f5 	bgt.w	800981a <board_init_common_timer_init+0x44e>
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <board_init_common_timer_init+0x70>
 8009434:	2b01      	cmp	r3, #1
 8009436:	f000 80bb 	beq.w	80095b0 <board_init_common_timer_init+0x1e4>
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
            GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
        break;
        default:
        break;
 800943a:	e1ee      	b.n	800981a <board_init_common_timer_init+0x44e>
            g_tim1_handle.Instance = TIM1;
 800943c:	4b9e      	ldr	r3, [pc, #632]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 800943e:	4a9f      	ldr	r2, [pc, #636]	; (80096bc <board_init_common_timer_init+0x2f0>)
 8009440:	601a      	str	r2, [r3, #0]
            g_tim1_handle.Init.Prescaler = 0;
 8009442:	4b9d      	ldr	r3, [pc, #628]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]
            g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009448:	4b9b      	ldr	r3, [pc, #620]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 800944a:	2200      	movs	r2, #0
 800944c:	609a      	str	r2, [r3, #8]
            g_tim1_handle.Init.Period = 60-1;
 800944e:	4b9a      	ldr	r3, [pc, #616]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009450:	223b      	movs	r2, #59	; 0x3b
 8009452:	60da      	str	r2, [r3, #12]
            g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009454:	4b98      	ldr	r3, [pc, #608]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009456:	2200      	movs	r2, #0
 8009458:	611a      	str	r2, [r3, #16]
            g_tim1_handle.Init.RepetitionCounter = 0;
 800945a:	4b97      	ldr	r3, [pc, #604]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 800945c:	2200      	movs	r2, #0
 800945e:	615a      	str	r2, [r3, #20]
            g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009460:	4b95      	ldr	r3, [pc, #596]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009462:	2200      	movs	r2, #0
 8009464:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009466:	4894      	ldr	r0, [pc, #592]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009468:	f7fe fc4e 	bl	8007d08 <HAL_TIM_Base_Init>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <board_init_common_timer_init+0xaa>
 8009472:	f000 fb0f 	bl	8009a94 <Error_Handler>
            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800947a:	667b      	str	r3, [r7, #100]	; 0x64
            if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800947c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009480:	4619      	mov	r1, r3
 8009482:	488d      	ldr	r0, [pc, #564]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009484:	f7ff f8e2 	bl	800864c <HAL_TIM_ConfigClockSource>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <board_init_common_timer_init+0xc6>
 800948e:	f000 fb01 	bl	8009a94 <Error_Handler>
            if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009492:	4889      	ldr	r0, [pc, #548]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009494:	f7fe fc8f 	bl	8007db6 <HAL_TIM_PWM_Init>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <board_init_common_timer_init+0xd6>
 800949e:	f000 faf9 	bl	8009a94 <Error_Handler>
            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094a2:	2300      	movs	r3, #0
 80094a4:	65bb      	str	r3, [r7, #88]	; 0x58
            sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80094a6:	2300      	movs	r3, #0
 80094a8:	65fb      	str	r3, [r7, #92]	; 0x5c
            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	663b      	str	r3, [r7, #96]	; 0x60
            if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 80094ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094b2:	4619      	mov	r1, r3
 80094b4:	4880      	ldr	r0, [pc, #512]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 80094b6:	f7ff fe19 	bl	80090ec <HAL_TIMEx_MasterConfigSynchronization>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <board_init_common_timer_init+0xf8>
 80094c0:	f000 fae8 	bl	8009a94 <Error_Handler>
            sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094c4:	2360      	movs	r3, #96	; 0x60
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
            sConfigOC.Pulse = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	643b      	str	r3, [r7, #64]	; 0x40
            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094cc:	2300      	movs	r3, #0
 80094ce:	647b      	str	r3, [r7, #68]	; 0x44
            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80094d0:	2300      	movs	r3, #0
 80094d2:	64bb      	str	r3, [r7, #72]	; 0x48
            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80094d8:	2300      	movs	r3, #0
 80094da:	653b      	str	r3, [r7, #80]	; 0x50
            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80094dc:	2300      	movs	r3, #0
 80094de:	657b      	str	r3, [r7, #84]	; 0x54
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80094e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094e4:	2200      	movs	r2, #0
 80094e6:	4619      	mov	r1, r3
 80094e8:	4873      	ldr	r0, [pc, #460]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 80094ea:	f7fe ff9b 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <board_init_common_timer_init+0x12c>
 80094f4:	f000 face 	bl	8009a94 <Error_Handler>
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80094f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094fc:	2204      	movs	r2, #4
 80094fe:	4619      	mov	r1, r3
 8009500:	486d      	ldr	r0, [pc, #436]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009502:	f7fe ff8f 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <board_init_common_timer_init+0x144>
 800950c:	f000 fac2 	bl	8009a94 <Error_Handler>
            if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8009510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009514:	2208      	movs	r2, #8
 8009516:	4619      	mov	r1, r3
 8009518:	4867      	ldr	r0, [pc, #412]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 800951a:	f7fe ff83 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <board_init_common_timer_init+0x15c>
 8009524:	f000 fab6 	bl	8009a94 <Error_Handler>
            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009528:	2300      	movs	r3, #0
 800952a:	613b      	str	r3, [r7, #16]
            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800952c:	2300      	movs	r3, #0
 800952e:	617b      	str	r3, [r7, #20]
            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009530:	2300      	movs	r3, #0
 8009532:	61bb      	str	r3, [r7, #24]
            sBreakDeadTimeConfig.DeadTime = 0;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]
            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009538:	2300      	movs	r3, #0
 800953a:	623b      	str	r3, [r7, #32]
            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800953c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009540:	627b      	str	r3, [r7, #36]	; 0x24
            sBreakDeadTimeConfig.BreakFilter = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	62bb      	str	r3, [r7, #40]	; 0x28
            sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009546:	2300      	movs	r3, #0
 8009548:	62fb      	str	r3, [r7, #44]	; 0x2c
            sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800954a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
            sBreakDeadTimeConfig.Break2Filter = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009554:	2300      	movs	r3, #0
 8009556:	63bb      	str	r3, [r7, #56]	; 0x38
            if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8009558:	f107 0310 	add.w	r3, r7, #16
 800955c:	4619      	mov	r1, r3
 800955e:	4856      	ldr	r0, [pc, #344]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009560:	f7ff fe2a 	bl	80091b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <board_init_common_timer_init+0x1a2>
 800956a:	f000 fa93 	bl	8009a94 <Error_Handler>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800956e:	2100      	movs	r1, #0
 8009570:	4851      	ldr	r0, [pc, #324]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009572:	f7fe fe6f 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8009576:	2104      	movs	r1, #4
 8009578:	484f      	ldr	r0, [pc, #316]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 800957a:	f7fe fe6b 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800957e:	2108      	movs	r1, #8
 8009580:	484d      	ldr	r0, [pc, #308]	; (80096b8 <board_init_common_timer_init+0x2ec>)
 8009582:	f7fe fe67 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
            GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8009586:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800958a:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800958c:	2302      	movs	r3, #2
 800958e:	67bb      	str	r3, [r7, #120]	; 0x78
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009590:	2300      	movs	r3, #0
 8009592:	67fb      	str	r3, [r7, #124]	; 0x7c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009594:	2300      	movs	r3, #0
 8009596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800959a:	2301      	movs	r3, #1
 800959c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80095a4:	4619      	mov	r1, r3
 80095a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095aa:	f7fc fef7 	bl	800639c <HAL_GPIO_Init>
        break;
 80095ae:	e135      	b.n	800981c <board_init_common_timer_init+0x450>
            g_tim15_handle.Instance = TIM15;
 80095b0:	4b43      	ldr	r3, [pc, #268]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095b2:	4a44      	ldr	r2, [pc, #272]	; (80096c4 <board_init_common_timer_init+0x2f8>)
 80095b4:	601a      	str	r2, [r3, #0]
            g_tim15_handle.Init.Prescaler = 0;
 80095b6:	4b42      	ldr	r3, [pc, #264]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	605a      	str	r2, [r3, #4]
            g_tim15_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095bc:	4b40      	ldr	r3, [pc, #256]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095be:	2200      	movs	r2, #0
 80095c0:	609a      	str	r2, [r3, #8]
            g_tim15_handle.Init.Period = 60-1;
 80095c2:	4b3f      	ldr	r3, [pc, #252]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095c4:	223b      	movs	r2, #59	; 0x3b
 80095c6:	60da      	str	r2, [r3, #12]
            g_tim15_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095c8:	4b3d      	ldr	r3, [pc, #244]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	611a      	str	r2, [r3, #16]
            g_tim15_handle.Init.RepetitionCounter = 0;
 80095ce:	4b3c      	ldr	r3, [pc, #240]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	615a      	str	r2, [r3, #20]
            g_tim15_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095d4:	4b3a      	ldr	r3, [pc, #232]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_PWM_Init(&g_tim15_handle) != HAL_OK) Error_Handler();
 80095da:	4839      	ldr	r0, [pc, #228]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095dc:	f7fe fbeb 	bl	8007db6 <HAL_TIM_PWM_Init>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <board_init_common_timer_init+0x21e>
 80095e6:	f000 fa55 	bl	8009a94 <Error_Handler>
            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095ea:	2300      	movs	r3, #0
 80095ec:	65bb      	str	r3, [r7, #88]	; 0x58
            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	663b      	str	r3, [r7, #96]	; 0x60
            if (HAL_TIMEx_MasterConfigSynchronization(&g_tim15_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 80095f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80095f6:	4619      	mov	r1, r3
 80095f8:	4831      	ldr	r0, [pc, #196]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 80095fa:	f7ff fd77 	bl	80090ec <HAL_TIMEx_MasterConfigSynchronization>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <board_init_common_timer_init+0x23c>
 8009604:	f000 fa46 	bl	8009a94 <Error_Handler>
            sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009608:	2360      	movs	r3, #96	; 0x60
 800960a:	63fb      	str	r3, [r7, #60]	; 0x3c
            sConfigOC.Pulse = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	643b      	str	r3, [r7, #64]	; 0x40
            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009610:	2300      	movs	r3, #0
 8009612:	647b      	str	r3, [r7, #68]	; 0x44
            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009614:	2300      	movs	r3, #0
 8009616:	64bb      	str	r3, [r7, #72]	; 0x48
            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009618:	2300      	movs	r3, #0
 800961a:	64fb      	str	r3, [r7, #76]	; 0x4c
            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800961c:	2300      	movs	r3, #0
 800961e:	653b      	str	r3, [r7, #80]	; 0x50
            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009620:	2300      	movs	r3, #0
 8009622:	657b      	str	r3, [r7, #84]	; 0x54
            if (HAL_TIM_PWM_ConfigChannel(&g_tim15_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8009624:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009628:	2200      	movs	r2, #0
 800962a:	4619      	mov	r1, r3
 800962c:	4824      	ldr	r0, [pc, #144]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 800962e:	f7fe fef9 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <board_init_common_timer_init+0x270>
 8009638:	f000 fa2c 	bl	8009a94 <Error_Handler>
            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800963c:	2300      	movs	r3, #0
 800963e:	613b      	str	r3, [r7, #16]
            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009640:	2300      	movs	r3, #0
 8009642:	617b      	str	r3, [r7, #20]
            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009644:	2300      	movs	r3, #0
 8009646:	61bb      	str	r3, [r7, #24]
            sBreakDeadTimeConfig.DeadTime = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800964c:	2300      	movs	r3, #0
 800964e:	623b      	str	r3, [r7, #32]
            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009656:	2300      	movs	r3, #0
 8009658:	63bb      	str	r3, [r7, #56]	; 0x38
            if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim15_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800965a:	f107 0310 	add.w	r3, r7, #16
 800965e:	4619      	mov	r1, r3
 8009660:	4817      	ldr	r0, [pc, #92]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 8009662:	f7ff fda9 	bl	80091b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <board_init_common_timer_init+0x2a4>
 800966c:	f000 fa12 	bl	8009a94 <Error_Handler>
            HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
 8009670:	2100      	movs	r1, #0
 8009672:	4813      	ldr	r0, [pc, #76]	; (80096c0 <board_init_common_timer_init+0x2f4>)
 8009674:	f7fe fdee 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8009678:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <board_init_common_timer_init+0x2fc>)
 800967a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967c:	4a12      	ldr	r2, [pc, #72]	; (80096c8 <board_init_common_timer_init+0x2fc>)
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009684:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <board_init_common_timer_init+0x2fc>)
 8009686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	68fb      	ldr	r3, [r7, #12]
            GPIO_InitStruct.Pin = PIN_TIM15_CH1;
 8009690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009694:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009696:	2302      	movs	r3, #2
 8009698:	67bb      	str	r3, [r7, #120]	; 0x78
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969a:	2300      	movs	r3, #0
 800969c:	67fb      	str	r3, [r7, #124]	; 0x7c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800969e:	2300      	movs	r3, #0
 80096a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80096a4:	230e      	movs	r3, #14
 80096a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80096ae:	4619      	mov	r1, r3
 80096b0:	4806      	ldr	r0, [pc, #24]	; (80096cc <board_init_common_timer_init+0x300>)
 80096b2:	f7fc fe73 	bl	800639c <HAL_GPIO_Init>
        break;
 80096b6:	e0b1      	b.n	800981c <board_init_common_timer_init+0x450>
 80096b8:	20001ed8 	.word	0x20001ed8
 80096bc:	40012c00 	.word	0x40012c00
 80096c0:	20001f24 	.word	0x20001f24
 80096c4:	40014000 	.word	0x40014000
 80096c8:	40021000 	.word	0x40021000
 80096cc:	48000400 	.word	0x48000400
            g_tim16_handle.Instance = TIM16;
 80096d0:	4b54      	ldr	r3, [pc, #336]	; (8009824 <board_init_common_timer_init+0x458>)
 80096d2:	4a55      	ldr	r2, [pc, #340]	; (8009828 <board_init_common_timer_init+0x45c>)
 80096d4:	601a      	str	r2, [r3, #0]
            g_tim16_handle.Init.Prescaler = 0;
 80096d6:	4b53      	ldr	r3, [pc, #332]	; (8009824 <board_init_common_timer_init+0x458>)
 80096d8:	2200      	movs	r2, #0
 80096da:	605a      	str	r2, [r3, #4]
            g_tim16_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096dc:	4b51      	ldr	r3, [pc, #324]	; (8009824 <board_init_common_timer_init+0x458>)
 80096de:	2200      	movs	r2, #0
 80096e0:	609a      	str	r2, [r3, #8]
            g_tim16_handle.Init.Period = 60-1;
 80096e2:	4b50      	ldr	r3, [pc, #320]	; (8009824 <board_init_common_timer_init+0x458>)
 80096e4:	223b      	movs	r2, #59	; 0x3b
 80096e6:	60da      	str	r2, [r3, #12]
            g_tim16_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096e8:	4b4e      	ldr	r3, [pc, #312]	; (8009824 <board_init_common_timer_init+0x458>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	611a      	str	r2, [r3, #16]
            g_tim16_handle.Init.RepetitionCounter = 0;
 80096ee:	4b4d      	ldr	r3, [pc, #308]	; (8009824 <board_init_common_timer_init+0x458>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	615a      	str	r2, [r3, #20]
            g_tim16_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096f4:	4b4b      	ldr	r3, [pc, #300]	; (8009824 <board_init_common_timer_init+0x458>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	619a      	str	r2, [r3, #24]
            if (HAL_TIM_Base_Init(&g_tim16_handle) != HAL_OK) Error_Handler();
 80096fa:	484a      	ldr	r0, [pc, #296]	; (8009824 <board_init_common_timer_init+0x458>)
 80096fc:	f7fe fb04 	bl	8007d08 <HAL_TIM_Base_Init>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <board_init_common_timer_init+0x33e>
 8009706:	f000 f9c5 	bl	8009a94 <Error_Handler>
            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800970a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800970e:	667b      	str	r3, [r7, #100]	; 0x64
            if (HAL_TIM_ConfigClockSource(&g_tim16_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8009710:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009714:	4619      	mov	r1, r3
 8009716:	4843      	ldr	r0, [pc, #268]	; (8009824 <board_init_common_timer_init+0x458>)
 8009718:	f7fe ff98 	bl	800864c <HAL_TIM_ConfigClockSource>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <board_init_common_timer_init+0x35a>
 8009722:	f000 f9b7 	bl	8009a94 <Error_Handler>
            if (HAL_TIM_PWM_Init(&g_tim16_handle) != HAL_OK) Error_Handler();
 8009726:	483f      	ldr	r0, [pc, #252]	; (8009824 <board_init_common_timer_init+0x458>)
 8009728:	f7fe fb45 	bl	8007db6 <HAL_TIM_PWM_Init>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <board_init_common_timer_init+0x36a>
 8009732:	f000 f9af 	bl	8009a94 <Error_Handler>
            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009736:	2300      	movs	r3, #0
 8009738:	65bb      	str	r3, [r7, #88]	; 0x58
            sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800973a:	2300      	movs	r3, #0
 800973c:	65fb      	str	r3, [r7, #92]	; 0x5c
            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800973e:	2300      	movs	r3, #0
 8009740:	663b      	str	r3, [r7, #96]	; 0x60
            if (HAL_TIMEx_MasterConfigSynchronization(&g_tim16_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8009742:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009746:	4619      	mov	r1, r3
 8009748:	4836      	ldr	r0, [pc, #216]	; (8009824 <board_init_common_timer_init+0x458>)
 800974a:	f7ff fccf 	bl	80090ec <HAL_TIMEx_MasterConfigSynchronization>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <board_init_common_timer_init+0x38c>
 8009754:	f000 f99e 	bl	8009a94 <Error_Handler>
            sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009758:	2360      	movs	r3, #96	; 0x60
 800975a:	63fb      	str	r3, [r7, #60]	; 0x3c
            sConfigOC.Pulse = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	643b      	str	r3, [r7, #64]	; 0x40
            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009760:	2300      	movs	r3, #0
 8009762:	647b      	str	r3, [r7, #68]	; 0x44
            sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009764:	2300      	movs	r3, #0
 8009766:	64bb      	str	r3, [r7, #72]	; 0x48
            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009768:	2300      	movs	r3, #0
 800976a:	64fb      	str	r3, [r7, #76]	; 0x4c
            sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800976c:	2300      	movs	r3, #0
 800976e:	653b      	str	r3, [r7, #80]	; 0x50
            sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009770:	2300      	movs	r3, #0
 8009772:	657b      	str	r3, [r7, #84]	; 0x54
            if (HAL_TIM_PWM_ConfigChannel(&g_tim16_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8009774:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009778:	2200      	movs	r2, #0
 800977a:	4619      	mov	r1, r3
 800977c:	4829      	ldr	r0, [pc, #164]	; (8009824 <board_init_common_timer_init+0x458>)
 800977e:	f7fe fe51 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <board_init_common_timer_init+0x3c0>
 8009788:	f000 f984 	bl	8009a94 <Error_Handler>
            sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800978c:	2300      	movs	r3, #0
 800978e:	613b      	str	r3, [r7, #16]
            sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
            sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009794:	2300      	movs	r3, #0
 8009796:	61bb      	str	r3, [r7, #24]
            sBreakDeadTimeConfig.DeadTime = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	61fb      	str	r3, [r7, #28]
            sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800979c:	2300      	movs	r3, #0
 800979e:	623b      	str	r3, [r7, #32]
            sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80097a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
            sBreakDeadTimeConfig.BreakFilter = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	62bb      	str	r3, [r7, #40]	; 0x28
            sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80097ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097b2:	633b      	str	r3, [r7, #48]	; 0x30
            sBreakDeadTimeConfig.Break2Filter = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
            sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	63bb      	str	r3, [r7, #56]	; 0x38
            if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim16_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 80097bc:	f107 0310 	add.w	r3, r7, #16
 80097c0:	4619      	mov	r1, r3
 80097c2:	4818      	ldr	r0, [pc, #96]	; (8009824 <board_init_common_timer_init+0x458>)
 80097c4:	f7ff fcf8 	bl	80091b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <board_init_common_timer_init+0x406>
 80097ce:	f000 f961 	bl	8009a94 <Error_Handler>
            HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 80097d2:	2100      	movs	r1, #0
 80097d4:	4815      	ldr	r0, [pc, #84]	; (800982c <board_init_common_timer_init+0x460>)
 80097d6:	f7fe fd3d 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 80097da:	4b15      	ldr	r3, [pc, #84]	; (8009830 <board_init_common_timer_init+0x464>)
 80097dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097de:	4a14      	ldr	r2, [pc, #80]	; (8009830 <board_init_common_timer_init+0x464>)
 80097e0:	f043 0301 	orr.w	r3, r3, #1
 80097e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097e6:	4b12      	ldr	r3, [pc, #72]	; (8009830 <board_init_common_timer_init+0x464>)
 80097e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	68bb      	ldr	r3, [r7, #8]
            GPIO_InitStruct.Pin = PIN_TIM16_CH1;
 80097f2:	2340      	movs	r3, #64	; 0x40
 80097f4:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f6:	2302      	movs	r3, #2
 80097f8:	67bb      	str	r3, [r7, #120]	; 0x78
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	67fb      	str	r3, [r7, #124]	; 0x7c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097fe:	2300      	movs	r3, #0
 8009800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8009804:	230e      	movs	r3, #14
 8009806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800980a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800980e:	4619      	mov	r1, r3
 8009810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009814:	f7fc fdc2 	bl	800639c <HAL_GPIO_Init>
        break;
 8009818:	e000      	b.n	800981c <board_init_common_timer_init+0x450>
        break;
 800981a:	bf00      	nop
    }
}
 800981c:	bf00      	nop
 800981e:	3788      	adds	r7, #136	; 0x88
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20001f70 	.word	0x20001f70
 8009828:	40014400 	.word	0x40014400
 800982c:	20001ed8 	.word	0x20001ed8
 8009830:	40021000 	.word	0x40021000

08009834 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8009838:	2200      	movs	r2, #0
 800983a:	2118      	movs	r1, #24
 800983c:	2006      	movs	r0, #6
 800983e:	f7fc fae8 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009842:	2006      	movs	r0, #6
 8009844:	f7fc fb01 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8009848:	2200      	movs	r2, #0
 800984a:	2118      	movs	r1, #24
 800984c:	2008      	movs	r0, #8
 800984e:	f7fc fae0 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8009852:	2008      	movs	r0, #8
 8009854:	f7fc faf9 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn , 24, 0);
 8009858:	2200      	movs	r2, #0
 800985a:	2118      	movs	r1, #24
 800985c:	2017      	movs	r0, #23
 800985e:	f7fc fad8 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009862:	2017      	movs	r0, #23
 8009864:	f7fc faf1 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8009868:	2200      	movs	r2, #0
 800986a:	2118      	movs	r1, #24
 800986c:	2028      	movs	r0, #40	; 0x28
 800986e:	f7fc fad0 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009872:	2028      	movs	r0, #40	; 0x28
 8009874:	f7fc fae9 	bl	8005e4a <HAL_NVIC_EnableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009878:	4b1a      	ldr	r3, [pc, #104]	; (80098e4 <board_init_common_nvic_setup_interrupts+0xb0>)
 800987a:	2206      	movs	r2, #6
 800987c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800987e:	4b19      	ldr	r3, [pc, #100]	; (80098e4 <board_init_common_nvic_setup_interrupts+0xb0>)
 8009880:	2217      	movs	r2, #23
 8009882:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009884:	4b17      	ldr	r3, [pc, #92]	; (80098e4 <board_init_common_nvic_setup_interrupts+0xb0>)
 8009886:	2228      	movs	r2, #40	; 0x28
 8009888:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800988a:	4b16      	ldr	r3, [pc, #88]	; (80098e4 <board_init_common_nvic_setup_interrupts+0xb0>)
 800988c:	2208      	movs	r2, #8
 800988e:	615a      	str	r2, [r3, #20]
//    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 20, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
//    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 20, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009890:	2200      	movs	r2, #0
 8009892:	2100      	movs	r1, #0
 8009894:	200c      	movs	r0, #12
 8009896:	f7fc fabc 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800989a:	200c      	movs	r0, #12
 800989c:	f7fc fad5 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80098a0:	2200      	movs	r2, #0
 80098a2:	2100      	movs	r1, #0
 80098a4:	200d      	movs	r0, #13
 80098a6:	f7fc fab4 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80098aa:	200d      	movs	r0, #13
 80098ac:	f7fc facd 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80098b0:	2200      	movs	r2, #0
 80098b2:	2100      	movs	r1, #0
 80098b4:	200f      	movs	r0, #15
 80098b6:	f7fc faac 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80098ba:	200f      	movs	r0, #15
 80098bc:	f7fc fac5 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80098c0:	2200      	movs	r2, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	2010      	movs	r0, #16
 80098c6:	f7fc faa4 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80098ca:	2010      	movs	r0, #16
 80098cc:	f7fc fabd 	bl	8005e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80098d0:	2200      	movs	r2, #0
 80098d2:	2100      	movs	r1, #0
 80098d4:	2011      	movs	r0, #17
 80098d6:	f7fc fa9c 	bl	8005e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80098da:	2011      	movs	r0, #17
 80098dc:	f7fc fab5 	bl	8005e4a <HAL_NVIC_EnableIRQ>
}
 80098e0:	bf00      	nop
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	40010400 	.word	0x40010400

080098e8 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08c      	sub	sp, #48	; 0x30
 80098ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098ee:	f107 0318 	add.w	r3, r7, #24
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	605a      	str	r2, [r3, #4]
 80098f8:	609a      	str	r2, [r3, #8]
 80098fa:	60da      	str	r2, [r3, #12]
 80098fc:	611a      	str	r2, [r3, #16]

    srand(time(0));
 80098fe:	2000      	movs	r0, #0
 8009900:	f000 fff2 	bl	800a8e8 <time>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4613      	mov	r3, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f000 ff70 	bl	800a7f0 <srand>
    HAL_Init();
 8009910:	f7fc f8fc 	bl	8005b0c <HAL_Init>
    SystemClock_Config();
 8009914:	f7ff fcf0 	bl	80092f8 <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009918:	4b44      	ldr	r3, [pc, #272]	; (8009a2c <board_init_common_board_init+0x144>)
 800991a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991c:	4a43      	ldr	r2, [pc, #268]	; (8009a2c <board_init_common_board_init+0x144>)
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009924:	4b41      	ldr	r3, [pc, #260]	; (8009a2c <board_init_common_board_init+0x144>)
 8009926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	617b      	str	r3, [r7, #20]
 800992e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009930:	4b3e      	ldr	r3, [pc, #248]	; (8009a2c <board_init_common_board_init+0x144>)
 8009932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009934:	4a3d      	ldr	r2, [pc, #244]	; (8009a2c <board_init_common_board_init+0x144>)
 8009936:	f043 0302 	orr.w	r3, r3, #2
 800993a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800993c:	4b3b      	ldr	r3, [pc, #236]	; (8009a2c <board_init_common_board_init+0x144>)
 800993e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009948:	4b38      	ldr	r3, [pc, #224]	; (8009a2c <board_init_common_board_init+0x144>)
 800994a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994c:	4a37      	ldr	r2, [pc, #220]	; (8009a2c <board_init_common_board_init+0x144>)
 800994e:	f043 0304 	orr.w	r3, r3, #4
 8009952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009954:	4b35      	ldr	r3, [pc, #212]	; (8009a2c <board_init_common_board_init+0x144>)
 8009956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009960:	4b32      	ldr	r3, [pc, #200]	; (8009a2c <board_init_common_board_init+0x144>)
 8009962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009964:	4a31      	ldr	r2, [pc, #196]	; (8009a2c <board_init_common_board_init+0x144>)
 8009966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800996c:	4b2f      	ldr	r3, [pc, #188]	; (8009a2c <board_init_common_board_init+0x144>)
 800996e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8009978:	4b2c      	ldr	r3, [pc, #176]	; (8009a2c <board_init_common_board_init+0x144>)
 800997a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997c:	4a2b      	ldr	r2, [pc, #172]	; (8009a2c <board_init_common_board_init+0x144>)
 800997e:	f043 0301 	orr.w	r3, r3, #1
 8009982:	6493      	str	r3, [r2, #72]	; 0x48
 8009984:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <board_init_common_board_init+0x144>)
 8009986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	607b      	str	r3, [r7, #4]
 800998e:	687b      	ldr	r3, [r7, #4]

    // setup the wakeups as only interrupts without the WKUP enabled yet... TODO
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8009990:	2305      	movs	r3, #5
 8009992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009994:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800999a:	2301      	movs	r3, #1
 800999c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800999e:	f107 0318 	add.w	r3, r7, #24
 80099a2:	4619      	mov	r1, r3
 80099a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80099a8:	f7fc fcf8 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 80099ac:	f242 0320 	movw	r3, #8224	; 0x2020
 80099b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80099b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80099b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80099b8:	2301      	movs	r3, #1
 80099ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80099bc:	f107 0318 	add.w	r3, r7, #24
 80099c0:	4619      	mov	r1, r3
 80099c2:	481b      	ldr	r0, [pc, #108]	; (8009a30 <board_init_common_board_init+0x148>)
 80099c4:	f7fc fcea 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_EN | PIN_LED_OUT_1 | PIN_LED_OUT_2;
 80099c8:	238c      	movs	r3, #140	; 0x8c
 80099ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099cc:	2301      	movs	r3, #1
 80099ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80099d0:	2302      	movs	r3, #2
 80099d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80099d4:	f107 0318 	add.w	r3, r7, #24
 80099d8:	4619      	mov	r1, r3
 80099da:	4815      	ldr	r0, [pc, #84]	; (8009a30 <board_init_common_board_init+0x148>)
 80099dc:	f7fc fcde 	bl	800639c <HAL_GPIO_Init>

    board_init_specific();
 80099e0:	f000 f85e 	bl	8009aa0 <board_init_specific>

    for (uint8_t iii = 0; iii < NUM_TIMERS; iii++) board_init_common_timer_init(iii);
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099ea:	e009      	b.n	8009a00 <board_init_common_board_init+0x118>
 80099ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fceb 	bl	80093cc <board_init_common_timer_init>
 80099f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099fa:	3301      	adds	r3, #1
 80099fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d9f1      	bls.n	80099ec <board_init_common_board_init+0x104>

    board_init_common_nvic_setup_interrupts();
 8009a08:	f7ff ff14 	bl	8009834 <board_init_common_nvic_setup_interrupts>

    board_init_common_rtc_init();
 8009a0c:	f7ff fc4c 	bl	80092a8 <board_init_common_rtc_init>
    ws2812b_init();
 8009a10:	f7f8 fdee 	bl	80025f0 <ws2812b_init>

    color_led_init();
 8009a14:	f7f7 fe1a 	bl	800164c <color_led_init>
    //animate_led_init(); // not yet defined..

    HAL_GPIO_WritePin(GPIOC, PIN_LED_OUT_1|PIN_LED_OUT_2, GPIO_PIN_RESET);
 8009a18:	2200      	movs	r2, #0
 8009a1a:	210c      	movs	r1, #12
 8009a1c:	4804      	ldr	r0, [pc, #16]	; (8009a30 <board_init_common_board_init+0x148>)
 8009a1e:	f7fc fe37 	bl	8006690 <HAL_GPIO_WritePin>
}
 8009a22:	bf00      	nop
 8009a24:	3730      	adds	r7, #48	; 0x30
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	40021000 	.word	0x40021000
 8009a30:	48000800 	.word	0x48000800

08009a34 <board_init_common_stop_timer>:
    button_press_state[(uint8_t)button] = true;
}


void board_init_common_stop_timer(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <board_init_common_stop_timer+0x28>)
 8009a3c:	f7fe fc0a 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8009a40:	2104      	movs	r1, #4
 8009a42:	4806      	ldr	r0, [pc, #24]	; (8009a5c <board_init_common_stop_timer+0x28>)
 8009a44:	f7fe fc06 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8009a48:	2108      	movs	r1, #8
 8009a4a:	4804      	ldr	r0, [pc, #16]	; (8009a5c <board_init_common_stop_timer+0x28>)
 8009a4c:	f7fe fc02 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim15_handle, TIM_CHANNEL_1);
 8009a50:	2100      	movs	r1, #0
 8009a52:	4803      	ldr	r0, [pc, #12]	; (8009a60 <board_init_common_stop_timer+0x2c>)
 8009a54:	f7fe fbfe 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
}
 8009a58:	bf00      	nop
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20001ed8 	.word	0x20001ed8
 8009a60:	20001f24 	.word	0x20001f24

08009a64 <board_init_red_led_on>:


void board_init_red_led_on(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_SET);
 8009a68:	2201      	movs	r2, #1
 8009a6a:	2104      	movs	r1, #4
 8009a6c:	4802      	ldr	r0, [pc, #8]	; (8009a78 <board_init_red_led_on+0x14>)
 8009a6e:	f7fc fe0f 	bl	8006690 <HAL_GPIO_WritePin>
}
 8009a72:	bf00      	nop
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	48000800 	.word	0x48000800

08009a7c <board_init_red_led_off>:


void board_init_red_led_off(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PIN_PORT_C, RED_LED, GPIO_PIN_RESET);
 8009a80:	2200      	movs	r2, #0
 8009a82:	2104      	movs	r1, #4
 8009a84:	4802      	ldr	r0, [pc, #8]	; (8009a90 <board_init_red_led_off+0x14>)
 8009a86:	f7fc fe03 	bl	8006690 <HAL_GPIO_WritePin>
}
 8009a8a:	bf00      	nop
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	48000800 	.word	0x48000800

08009a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009a98:	b672      	cpsid	i
}
 8009a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009a9c:	e7fe      	b.n	8009a9c <Error_Handler+0x8>
	...

08009aa0 <board_init_specific>:
#include "stm32l4xx_hal.h"
#include "board_specific.h"


void board_init_specific(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa6:	1d3b      	adds	r3, r7, #4
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	609a      	str	r2, [r3, #8]
 8009ab0:	60da      	str	r2, [r3, #12]
 8009ab2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_GPIO0|PIN_GPIO1|PIN_GPIO3;
 8009ab4:	23e0      	movs	r3, #224	; 0xe0
 8009ab6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009ac0:	1d3b      	adds	r3, r7, #4
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4818      	ldr	r0, [pc, #96]	; (8009b28 <board_init_specific+0x88>)
 8009ac6:	f7fc fc69 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_ANALOG_IN;
 8009aca:	2302      	movs	r3, #2
 8009acc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8009ace:	230b      	movs	r3, #11
 8009ad0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009ad6:	1d3b      	adds	r3, r7, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ade:	f7fc fc5d 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_SPI3_NSS;
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009aee:	1d3b      	adds	r3, r7, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009af6:	f7fc fc51 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009afe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b00:	2301      	movs	r3, #1
 8009b02:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009b08:	1d3b      	adds	r3, r7, #4
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4807      	ldr	r0, [pc, #28]	; (8009b2c <board_init_specific+0x8c>)
 8009b0e:	f7fc fc45 	bl	800639c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8009b12:	2201      	movs	r2, #1
 8009b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b18:	4804      	ldr	r0, [pc, #16]	; (8009b2c <board_init_specific+0x8c>)
 8009b1a:	f7fc fdb9 	bl	8006690 <HAL_GPIO_WritePin>
}
 8009b1e:	bf00      	nop
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	48000400 	.word	0x48000400
 8009b2c:	48000800 	.word	0x48000800

08009b30 <main>:
#include "semaphore_create.h"
#include "task_create.h"


int main(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8009b34:	f7ff fed8 	bl	80098e8 <board_init_common_board_init>
	task_create();
 8009b38:	f000 f820 	bl	8009b7c <task_create>
	semaphore_create();
 8009b3c:	f7f7 fe48 	bl	80017d0 <semaphore_create>
    reset_ws2812b();
 8009b40:	f7f8 faf8 	bl	8002134 <reset_ws2812b>
	osKernelStart();
 8009b44:	f7f8 fe94 	bl	8002870 <osKernelStart>
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 8009b58:	f000 fe78 	bl	800a84c <rand>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	1acb      	subs	r3, r1, r3
 8009b66:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b6a:	fb01 f303 	mul.w	r3, r1, r3
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4413      	add	r3, r2
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8009b80:	f7f8 fe52 	bl	8002828 <osKernelInitialize>
    g_led_ctrl_handle = osThreadNew(task_led_ctrl, NULL, &g_task_led_ctrl_attributes);
 8009b84:	4a0e      	ldr	r2, [pc, #56]	; (8009bc0 <task_create+0x44>)
 8009b86:	2100      	movs	r1, #0
 8009b88:	480e      	ldr	r0, [pc, #56]	; (8009bc4 <task_create+0x48>)
 8009b8a:	f7f8 fe97 	bl	80028bc <osThreadNew>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	4a0d      	ldr	r2, [pc, #52]	; (8009bc8 <task_create+0x4c>)
 8009b92:	6013      	str	r3, [r2, #0]
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 8009b94:	4a0d      	ldr	r2, [pc, #52]	; (8009bcc <task_create+0x50>)
 8009b96:	2100      	movs	r1, #0
 8009b98:	480d      	ldr	r0, [pc, #52]	; (8009bd0 <task_create+0x54>)
 8009b9a:	f7f8 fe8f 	bl	80028bc <osThreadNew>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4a0c      	ldr	r2, [pc, #48]	; (8009bd4 <task_create+0x58>)
 8009ba2:	6013      	str	r3, [r2, #0]
    g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
 8009ba4:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <task_create+0x5c>)
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	480c      	ldr	r0, [pc, #48]	; (8009bdc <task_create+0x60>)
 8009baa:	f7f8 fe87 	bl	80028bc <osThreadNew>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <task_create+0x64>)
 8009bb2:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <task_create+0x68>)
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	701a      	strb	r2, [r3, #0]
}
 8009bba:	bf00      	nop
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800b7e4 	.word	0x0800b7e4
 8009bc4:	08001c11 	.word	0x08001c11
 8009bc8:	20001fbc 	.word	0x20001fbc
 8009bcc:	0800b7c0 	.word	0x0800b7c0
 8009bd0:	080019a9 	.word	0x080019a9
 8009bd4:	20001fc4 	.word	0x20001fc4
 8009bd8:	0800b808 	.word	0x0800b808
 8009bdc:	08009be9 	.word	0x08009be9
 8009be0:	20001fc0 	.word	0x20001fc0
 8009be4:	200038dc 	.word	0x200038dc

08009be8 <task_dma_transfer>:
extern p_pwm_data_t gp_pwm_data_ping;
extern p_pwm_data_t gp_pwm_data_pong;
extern p_pwm_data_t gp_pwm_data_fill;

void task_dma_transfer(void *argument)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
    uint32_t dma_transfer_state = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
    uint32_t count = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
    uint16_t offset = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	827b      	strh	r3, [r7, #18]
    while (1)
    {
        xTaskNotifyWait(0, dma_transfer_state, &dma_transfer_state, portMAX_DELAY);
 8009bfc:	68f9      	ldr	r1, [r7, #12]
 8009bfe:	f107 020c 	add.w	r2, r7, #12
 8009c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c06:	2000      	movs	r0, #0
 8009c08:	f7fa fdb8 	bl	800477c <xTaskNotifyWait>
        if (WS2812B_PING == ws2812b_ping_or_pong())
 8009c0c:	f7f8 fbf4 	bl	80023f8 <ws2812b_ping_or_pong>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <task_dma_transfer+0x38>
        {
            gp_pwm_data_fill = gp_pwm_data_ping;
 8009c16:	4b32      	ldr	r3, [pc, #200]	; (8009ce0 <task_dma_transfer+0xf8>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a32      	ldr	r2, [pc, #200]	; (8009ce4 <task_dma_transfer+0xfc>)
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	e003      	b.n	8009c28 <task_dma_transfer+0x40>
        }
        else
        {
            gp_pwm_data_fill = gp_pwm_data_pong;
 8009c20:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <task_dma_transfer+0x100>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a2f      	ldr	r2, [pc, #188]	; (8009ce4 <task_dma_transfer+0xfc>)
 8009c26:	6013      	str	r3, [r2, #0]
        }
        dma_transfer_state = (task_dma_transfer_state_e)dma_transfer_state;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	60fb      	str	r3, [r7, #12]
        if (TASK_DMA_TRANSFER_CMPLT == dma_transfer_state)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2bff      	cmp	r3, #255	; 0xff
 8009c32:	d10c      	bne.n	8009c4e <task_dma_transfer+0x66>
        {
            count++;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	3301      	adds	r3, #1
 8009c38:	617b      	str	r3, [r7, #20]
            if (NUM_STRIPS == count)
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d106      	bne.n	8009c4e <task_dma_transfer+0x66>
            {
                xSemaphoreGive(g_dma_transfer_semaphore);
 8009c40:	4b2a      	ldr	r3, [pc, #168]	; (8009cec <task_dma_transfer+0x104>)
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	2200      	movs	r2, #0
 8009c48:	2100      	movs	r1, #0
 8009c4a:	f7f9 f8d1 	bl	8002df0 <xQueueGenericSend>
            }
        }
        if (TASK_DMA_TRANSFER_STATE_RESET == dma_transfer_state)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <task_dma_transfer+0x82>
        {
#if defined(STRIP_1_LENGTH)
            offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8009c54:	2001      	movs	r0, #1
 8009c56:	f7f8 fa9f 	bl	8002198 <ws2812_get_pwm_strip_offset>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	827b      	strh	r3, [r7, #18]
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, 50);
 8009c5e:	2332      	movs	r3, #50	; 0x32
 8009c60:	4a23      	ldr	r2, [pc, #140]	; (8009cf0 <task_dma_transfer+0x108>)
 8009c62:	2100      	movs	r1, #0
 8009c64:	4823      	ldr	r0, [pc, #140]	; (8009cf4 <task_dma_transfer+0x10c>)
 8009c66:	f7fe f8fd 	bl	8007e64 <HAL_TIM_PWM_Start_DMA>
            offset = ws2812_get_pwm_strip_offset(STRIP_BIT_5);
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)g_pwm_reset, 50);
#endif
        }
#if defined(STRIP_1_LENGTH)
        if (dma_transfer_state & TASK_DMA_TRANSFER_STATE_TIM1_CHANNEL_1)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d016      	beq.n	8009ca2 <task_dma_transfer+0xba>
        {
            offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8009c74:	2001      	movs	r0, #1
 8009c76:	f7f8 fa8f 	bl	8002198 <ws2812_get_pwm_strip_offset>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	827b      	strh	r3, [r7, #18]
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + (offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (STRIP_NUM_1 * (uint32_t)WS2812B_BIT_RESET_CYCLES)), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8009c7e:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <task_dma_transfer+0xfc>)
 8009c80:	6819      	ldr	r1, [r3, #0]
 8009c82:	8a7a      	ldrh	r2, [r7, #18]
 8009c84:	4613      	mov	r3, r2
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	4413      	add	r3, r2
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	18ca      	adds	r2, r1, r3
 8009c8e:	f641 6378 	movw	r3, #7800	; 0x1e78
 8009c92:	2100      	movs	r1, #0
 8009c94:	4817      	ldr	r0, [pc, #92]	; (8009cf4 <task_dma_transfer+0x10c>)
 8009c96:	f7fe f8e5 	bl	8007e64 <HAL_TIM_PWM_Start_DMA>
        {
            offset = ws2812_get_pwm_strip_offset(STRIP_BIT_5);
            HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)(gp_pwm_data_fill + (offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (STRIP_NUM_5 * (uint32_t)WS2812B_BIT_RESET_CYCLES)), (STRIP_5_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
        }
#endif
        while (!g_tim_pwm_transfer_cmplt)
 8009c9a:	e002      	b.n	8009ca2 <task_dma_transfer+0xba>
        {
            osDelay(1);
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	f7f8 fe9f 	bl	80029e0 <osDelay>
        while (!g_tim_pwm_transfer_cmplt)
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <task_dma_transfer+0x110>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	f083 0301 	eor.w	r3, r3, #1
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f5      	bne.n	8009c9c <task_dma_transfer+0xb4>
        }
        if (WS2812B_PING == ws2812b_ping_or_pong())
 8009cb0:	f7f8 fba2 	bl	80023f8 <ws2812b_ping_or_pong>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d106      	bne.n	8009cc8 <task_dma_transfer+0xe0>
        {
            xSemaphoreGive(g_dma_fill_semaphore);
 8009cba:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <task_dma_transfer+0x114>)
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	f7f9 f894 	bl	8002df0 <xQueueGenericSend>
        }
        g_tim_pwm_transfer_cmplt = false;
 8009cc8:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <task_dma_transfer+0x110>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]
        xSemaphoreGive(g_dma_transfer_semaphore);
 8009cce:	4b07      	ldr	r3, [pc, #28]	; (8009cec <task_dma_transfer+0x104>)
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	f7f9 f88a 	bl	8002df0 <xQueueGenericSend>
        xTaskNotifyWait(0, dma_transfer_state, &dma_transfer_state, portMAX_DELAY);
 8009cdc:	e78e      	b.n	8009bfc <task_dma_transfer+0x14>
 8009cde:	bf00      	nop
 8009ce0:	2000042c 	.word	0x2000042c
 8009ce4:	20000434 	.word	0x20000434
 8009ce8:	20000430 	.word	0x20000430
 8009cec:	200000f8 	.word	0x200000f8
 8009cf0:	200038e0 	.word	0x200038e0
 8009cf4:	20001ed8 	.word	0x20001ed8
 8009cf8:	20003944 	.word	0x20003944
 8009cfc:	2000014c 	.word	0x2000014c

08009d00 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d04:	4a0d      	ldr	r2, [pc, #52]	; (8009d3c <HAL_Set_DMA_Callbacks+0x3c>)
 8009d06:	2100      	movs	r1, #0
 8009d08:	480d      	ldr	r0, [pc, #52]	; (8009d40 <HAL_Set_DMA_Callbacks+0x40>)
 8009d0a:	f7fc facf 	bl	80062ac <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d0e:	4a0b      	ldr	r2, [pc, #44]	; (8009d3c <HAL_Set_DMA_Callbacks+0x3c>)
 8009d10:	2100      	movs	r1, #0
 8009d12:	480c      	ldr	r0, [pc, #48]	; (8009d44 <HAL_Set_DMA_Callbacks+0x44>)
 8009d14:	f7fc faca 	bl	80062ac <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <HAL_Set_DMA_Callbacks+0x3c>)
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	480a      	ldr	r0, [pc, #40]	; (8009d48 <HAL_Set_DMA_Callbacks+0x48>)
 8009d1e:	f7fc fac5 	bl	80062ac <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d22:	4a06      	ldr	r2, [pc, #24]	; (8009d3c <HAL_Set_DMA_Callbacks+0x3c>)
 8009d24:	2100      	movs	r1, #0
 8009d26:	4809      	ldr	r0, [pc, #36]	; (8009d4c <HAL_Set_DMA_Callbacks+0x4c>)
 8009d28:	f7fc fac0 	bl	80062ac <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d2c:	4a03      	ldr	r2, [pc, #12]	; (8009d3c <HAL_Set_DMA_Callbacks+0x3c>)
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4807      	ldr	r0, [pc, #28]	; (8009d50 <HAL_Set_DMA_Callbacks+0x50>)
 8009d32:	f7fc fabb 	bl	80062ac <HAL_DMA_RegisterCallback>
}
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0800a2c5 	.word	0x0800a2c5
 8009d40:	20001d4c 	.word	0x20001d4c
 8009d44:	20001d94 	.word	0x20001d94
 8009d48:	20001ddc 	.word	0x20001ddc
 8009d4c:	20001e24 	.word	0x20001e24
 8009d50:	20001e6c 	.word	0x20001e6c

08009d54 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d64:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <HAL_MspInit+0x60>)
 8009d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d68:	4a12      	ldr	r2, [pc, #72]	; (8009db4 <HAL_MspInit+0x60>)
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	6613      	str	r3, [r2, #96]	; 0x60
 8009d70:	4b10      	ldr	r3, [pc, #64]	; (8009db4 <HAL_MspInit+0x60>)
 8009d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	607b      	str	r3, [r7, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <HAL_MspInit+0x60>)
 8009d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d80:	4a0c      	ldr	r2, [pc, #48]	; (8009db4 <HAL_MspInit+0x60>)
 8009d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d86:	6593      	str	r3, [r2, #88]	; 0x58
 8009d88:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <HAL_MspInit+0x60>)
 8009d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d90:	603b      	str	r3, [r7, #0]
 8009d92:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fc fcc1 	bl	8006728 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8009da6:	f7fc fd1f 	bl	80067e8 <HAL_PWR_EnablePVD>
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	40021000 	.word	0x40021000

08009db8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a08      	ldr	r2, [pc, #32]	; (8009de8 <HAL_RTC_MspInit+0x30>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d107      	bne.n	8009dda <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009dca:	4b08      	ldr	r3, [pc, #32]	; (8009dec <HAL_RTC_MspInit+0x34>)
 8009dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd0:	4a06      	ldr	r2, [pc, #24]	; (8009dec <HAL_RTC_MspInit+0x34>)
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	40002800 	.word	0x40002800
 8009dec:	40021000 	.word	0x40021000

08009df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a6e      	ldr	r2, [pc, #440]	; (8009fb8 <HAL_TIM_Base_MspInit+0x1c8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	f040 8091 	bne.w	8009f26 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009e04:	4b6d      	ldr	r3, [pc, #436]	; (8009fbc <HAL_TIM_Base_MspInit+0x1cc>)
 8009e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e08:	4a6c      	ldr	r2, [pc, #432]	; (8009fbc <HAL_TIM_Base_MspInit+0x1cc>)
 8009e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e0e:	6613      	str	r3, [r2, #96]	; 0x60
 8009e10:	4b6a      	ldr	r3, [pc, #424]	; (8009fbc <HAL_TIM_Base_MspInit+0x1cc>)
 8009e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009e1c:	4b68      	ldr	r3, [pc, #416]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e1e:	4a69      	ldr	r2, [pc, #420]	; (8009fc4 <HAL_TIM_Base_MspInit+0x1d4>)
 8009e20:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8009e22:	4b67      	ldr	r3, [pc, #412]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e24:	2207      	movs	r2, #7
 8009e26:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e28:	4b65      	ldr	r3, [pc, #404]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e2a:	2210      	movs	r2, #16
 8009e2c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e2e:	4b64      	ldr	r3, [pc, #400]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009e34:	4b62      	ldr	r3, [pc, #392]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e36:	2280      	movs	r2, #128	; 0x80
 8009e38:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009e3a:	4b61      	ldr	r3, [pc, #388]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e40:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009e42:	4b5f      	ldr	r3, [pc, #380]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e48:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8009e4a:	4b5d      	ldr	r3, [pc, #372]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009e50:	4b5b      	ldr	r3, [pc, #364]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e52:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009e56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8009e58:	4859      	ldr	r0, [pc, #356]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e5a:	f7fc f81f 	bl	8005e9c <HAL_DMA_Init>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8009e64:	f7ff fe16 	bl	8009a94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a55      	ldr	r2, [pc, #340]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8009e6e:	4a54      	ldr	r2, [pc, #336]	; (8009fc0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8009e74:	4b54      	ldr	r3, [pc, #336]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e76:	4a55      	ldr	r2, [pc, #340]	; (8009fcc <HAL_TIM_Base_MspInit+0x1dc>)
 8009e78:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8009e7a:	4b53      	ldr	r3, [pc, #332]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e7c:	2207      	movs	r2, #7
 8009e7e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e80:	4b51      	ldr	r3, [pc, #324]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e82:	2210      	movs	r2, #16
 8009e84:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e86:	4b50      	ldr	r3, [pc, #320]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009e8c:	4b4e      	ldr	r3, [pc, #312]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e8e:	2280      	movs	r2, #128	; 0x80
 8009e90:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009e92:	4b4d      	ldr	r3, [pc, #308]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e98:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009e9a:	4b4b      	ldr	r3, [pc, #300]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ea0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8009ea2:	4b49      	ldr	r3, [pc, #292]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009ea8:	4b47      	ldr	r3, [pc, #284]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009eaa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009eae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8009eb0:	4845      	ldr	r0, [pc, #276]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009eb2:	f7fb fff3 	bl	8005e9c <HAL_DMA_Init>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009ebc:	f7ff fdea 	bl	8009a94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a41      	ldr	r2, [pc, #260]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8009ec6:	4a40      	ldr	r2, [pc, #256]	; (8009fc8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009ecc:	4b40      	ldr	r3, [pc, #256]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009ece:	4a41      	ldr	r2, [pc, #260]	; (8009fd4 <HAL_TIM_Base_MspInit+0x1e4>)
 8009ed0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8009ed2:	4b3f      	ldr	r3, [pc, #252]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009ed8:	4b3d      	ldr	r3, [pc, #244]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009eda:	2210      	movs	r2, #16
 8009edc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ede:	4b3c      	ldr	r3, [pc, #240]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009ee4:	4b3a      	ldr	r3, [pc, #232]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009ee6:	2280      	movs	r2, #128	; 0x80
 8009ee8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009eea:	4b39      	ldr	r3, [pc, #228]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ef0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009ef2:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ef8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8009efa:	4b35      	ldr	r3, [pc, #212]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009f00:	4b33      	ldr	r3, [pc, #204]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f02:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009f06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8009f08:	4831      	ldr	r0, [pc, #196]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f0a:	f7fb ffc7 	bl	8005e9c <HAL_DMA_Init>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8009f14:	f7ff fdbe 	bl	8009a94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a2d      	ldr	r2, [pc, #180]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009f1e:	4a2c      	ldr	r2, [pc, #176]	; (8009fd0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6293      	str	r3, [r2, #40]	; 0x28
 8009f24:	e041      	b.n	8009faa <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a2b      	ldr	r2, [pc, #172]	; (8009fd8 <HAL_TIM_Base_MspInit+0x1e8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d13c      	bne.n	8009faa <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009f30:	4b22      	ldr	r3, [pc, #136]	; (8009fbc <HAL_TIM_Base_MspInit+0x1cc>)
 8009f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f34:	4a21      	ldr	r2, [pc, #132]	; (8009fbc <HAL_TIM_Base_MspInit+0x1cc>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8009f3c:	4b1f      	ldr	r3, [pc, #124]	; (8009fbc <HAL_TIM_Base_MspInit+0x1cc>)
 8009f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f44:	60bb      	str	r3, [r7, #8]
 8009f46:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8009f48:	4b24      	ldr	r3, [pc, #144]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f4a:	4a25      	ldr	r2, [pc, #148]	; (8009fe0 <HAL_TIM_Base_MspInit+0x1f0>)
 8009f4c:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8009f4e:	4b23      	ldr	r3, [pc, #140]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f50:	2204      	movs	r2, #4
 8009f52:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f54:	4b21      	ldr	r3, [pc, #132]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f56:	2210      	movs	r2, #16
 8009f58:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f5a:	4b20      	ldr	r3, [pc, #128]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8009f60:	4b1e      	ldr	r3, [pc, #120]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f62:	2280      	movs	r2, #128	; 0x80
 8009f64:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f66:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6c:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009f6e:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f74:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8009f76:	4b19      	ldr	r3, [pc, #100]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8009f7c:	4b17      	ldr	r3, [pc, #92]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8009f82:	4816      	ldr	r0, [pc, #88]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f84:	f7fb ff8a 	bl	8005e9c <HAL_DMA_Init>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8009f8e:	f7ff fd81 	bl	8009a94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24
 8009f98:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009fa2:	621a      	str	r2, [r3, #32]
 8009fa4:	4a0d      	ldr	r2, [pc, #52]	; (8009fdc <HAL_TIM_Base_MspInit+0x1ec>)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8009faa:	f7ff fea9 	bl	8009d00 <HAL_Set_DMA_Callbacks>
}
 8009fae:	bf00      	nop
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40012c00 	.word	0x40012c00
 8009fbc:	40021000 	.word	0x40021000
 8009fc0:	20001d4c 	.word	0x20001d4c
 8009fc4:	4002001c 	.word	0x4002001c
 8009fc8:	20001d94 	.word	0x20001d94
 8009fcc:	40020030 	.word	0x40020030
 8009fd0:	20001ddc 	.word	0x20001ddc
 8009fd4:	40020080 	.word	0x40020080
 8009fd8:	40014400 	.word	0x40014400
 8009fdc:	20001e6c 	.word	0x20001e6c
 8009fe0:	4002006c 	.word	0x4002006c

08009fe4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a28      	ldr	r2, [pc, #160]	; (800a094 <HAL_TIM_PWM_MspInit+0xb0>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d149      	bne.n	800a08a <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009ff6:	4b28      	ldr	r3, [pc, #160]	; (800a098 <HAL_TIM_PWM_MspInit+0xb4>)
 8009ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ffa:	4a27      	ldr	r2, [pc, #156]	; (800a098 <HAL_TIM_PWM_MspInit+0xb4>)
 8009ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a000:	6613      	str	r3, [r2, #96]	; 0x60
 800a002:	4b25      	ldr	r3, [pc, #148]	; (800a098 <HAL_TIM_PWM_MspInit+0xb4>)
 800a004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800a00e:	4b23      	ldr	r3, [pc, #140]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a010:	4a23      	ldr	r2, [pc, #140]	; (800a0a0 <HAL_TIM_PWM_MspInit+0xbc>)
 800a012:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800a014:	4b21      	ldr	r3, [pc, #132]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a016:	2207      	movs	r2, #7
 800a018:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a01a:	4b20      	ldr	r3, [pc, #128]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a01c:	2210      	movs	r2, #16
 800a01e:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800a020:	4b1e      	ldr	r3, [pc, #120]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a022:	2200      	movs	r2, #0
 800a024:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800a026:	4b1d      	ldr	r3, [pc, #116]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a028:	2280      	movs	r2, #128	; 0x80
 800a02a:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a02c:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a02e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a032:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a03a:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800a03c:	4b17      	ldr	r3, [pc, #92]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a03e:	2200      	movs	r2, #0
 800a040:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a042:	4b16      	ldr	r3, [pc, #88]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a044:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a048:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800a04a:	4814      	ldr	r0, [pc, #80]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a04c:	f7fb ff26 	bl	8005e9c <HAL_DMA_Init>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a056:	f7ff fd1d 	bl	8009a94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a0f      	ldr	r2, [pc, #60]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24
 800a060:	4a0e      	ldr	r2, [pc, #56]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a06a:	621a      	str	r2, [r3, #32]
 800a06c:	4a0b      	ldr	r2, [pc, #44]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a09      	ldr	r2, [pc, #36]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
 800a078:	4a08      	ldr	r2, [pc, #32]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a06      	ldr	r2, [pc, #24]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a082:	635a      	str	r2, [r3, #52]	; 0x34
 800a084:	4a05      	ldr	r2, [pc, #20]	; (800a09c <HAL_TIM_PWM_MspInit+0xb8>)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	40014000 	.word	0x40014000
 800a098:	40021000 	.word	0x40021000
 800a09c:	20001e24 	.word	0x20001e24
 800a0a0:	40020058 	.word	0x40020058

0800a0a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	71fb      	strb	r3, [r7, #7]
 800a0ae:	e009      	b.n	800a0c4 <NMI_Handler+0x20>
        {
            board_init_red_led_on();
 800a0b0:	f7ff fcd8 	bl	8009a64 <board_init_red_led_on>
            HAL_Delay(100);
 800a0b4:	2064      	movs	r0, #100	; 0x64
 800a0b6:	f7fb fd89 	bl	8005bcc <HAL_Delay>
            board_init_red_led_off();
 800a0ba:	f7ff fcdf 	bl	8009a7c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	71fb      	strb	r3, [r7, #7]
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0f2      	beq.n	800a0b0 <NMI_Handler+0xc>
        }
        HAL_Delay(3000);
 800a0ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a0ce:	f7fb fd7d 	bl	8005bcc <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a0d2:	e7ea      	b.n	800a0aa <NMI_Handler+0x6>

0800a0d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800a0da:	2300      	movs	r3, #0
 800a0dc:	71fb      	strb	r3, [r7, #7]
 800a0de:	e009      	b.n	800a0f4 <HardFault_Handler+0x20>
        {
            board_init_red_led_on();
 800a0e0:	f7ff fcc0 	bl	8009a64 <board_init_red_led_on>
            HAL_Delay(100);
 800a0e4:	2064      	movs	r0, #100	; 0x64
 800a0e6:	f7fb fd71 	bl	8005bcc <HAL_Delay>
            board_init_red_led_off();
 800a0ea:	f7ff fcc7 	bl	8009a7c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	71fb      	strb	r3, [r7, #7]
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d9f2      	bls.n	800a0e0 <HardFault_Handler+0xc>
        }
        HAL_Delay(3000);
 800a0fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a0fe:	f7fb fd65 	bl	8005bcc <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a102:	e7ea      	b.n	800a0da <HardFault_Handler+0x6>

0800a104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800a10a:	2300      	movs	r3, #0
 800a10c:	71fb      	strb	r3, [r7, #7]
 800a10e:	e009      	b.n	800a124 <MemManage_Handler+0x20>
        {
            board_init_red_led_on();
 800a110:	f7ff fca8 	bl	8009a64 <board_init_red_led_on>
            HAL_Delay(100);
 800a114:	2064      	movs	r0, #100	; 0x64
 800a116:	f7fb fd59 	bl	8005bcc <HAL_Delay>
            board_init_red_led_off();
 800a11a:	f7ff fcaf 	bl	8009a7c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	3301      	adds	r3, #1
 800a122:	71fb      	strb	r3, [r7, #7]
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d9f2      	bls.n	800a110 <MemManage_Handler+0xc>
        }
        HAL_Delay(3000);
 800a12a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a12e:	f7fb fd4d 	bl	8005bcc <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a132:	e7ea      	b.n	800a10a <MemManage_Handler+0x6>

0800a134 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800a13a:	2300      	movs	r3, #0
 800a13c:	71fb      	strb	r3, [r7, #7]
 800a13e:	e009      	b.n	800a154 <BusFault_Handler+0x20>
        {
            board_init_red_led_on();
 800a140:	f7ff fc90 	bl	8009a64 <board_init_red_led_on>
            HAL_Delay(100);
 800a144:	2064      	movs	r0, #100	; 0x64
 800a146:	f7fb fd41 	bl	8005bcc <HAL_Delay>
            board_init_red_led_off();
 800a14a:	f7ff fc97 	bl	8009a7c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	3301      	adds	r3, #1
 800a152:	71fb      	strb	r3, [r7, #7]
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	2b03      	cmp	r3, #3
 800a158:	d9f2      	bls.n	800a140 <BusFault_Handler+0xc>
        }
        HAL_Delay(3000);
 800a15a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a15e:	f7fb fd35 	bl	8005bcc <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a162:	e7ea      	b.n	800a13a <BusFault_Handler+0x6>

0800a164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	71fb      	strb	r3, [r7, #7]
 800a16e:	e009      	b.n	800a184 <UsageFault_Handler+0x20>
        {
            board_init_red_led_on();
 800a170:	f7ff fc78 	bl	8009a64 <board_init_red_led_on>
            HAL_Delay(100);
 800a174:	2064      	movs	r0, #100	; 0x64
 800a176:	f7fb fd29 	bl	8005bcc <HAL_Delay>
            board_init_red_led_off();
 800a17a:	f7ff fc7f 	bl	8009a7c <board_init_red_led_off>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	3301      	adds	r3, #1
 800a182:	71fb      	strb	r3, [r7, #7]
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	2b04      	cmp	r3, #4
 800a188:	d9f2      	bls.n	800a170 <UsageFault_Handler+0xc>
        }
        HAL_Delay(3000);
 800a18a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a18e:	f7fb fd1d 	bl	8005bcc <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a192:	e7ea      	b.n	800a16a <UsageFault_Handler+0x6>

0800a194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
}
 800a198:	bf00      	nop
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // B button is speed!
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_1);
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f7fc fa88 	bl	80066c0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT];
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <EXTI0_IRQHandler+0x40>)
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	4a0b      	ldr	r2, [pc, #44]	; (800a1e4 <EXTI0_IRQHandler+0x40>)
 800a1b6:	60d3      	str	r3, [r2, #12]
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a1b8:	f7f9 fe1e 	bl	8003df8 <xTaskGetTickCountFromISR>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	4a09      	ldr	r2, [pc, #36]	; (800a1e4 <EXTI0_IRQHandler+0x40>)
 800a1c0:	6093      	str	r3, [r2, #8]
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800a1c2:	2006      	movs	r0, #6
 800a1c4:	f7fb fe4f 	bl	8005e66 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a1c8:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <EXTI0_IRQHandler+0x44>)
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	1d3b      	adds	r3, r7, #4
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	f7fa fbe3 	bl	80049a0 <xTaskGenericNotifyFromISR>
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200001a0 	.word	0x200001a0
 800a1e8:	20001fc4 	.word	0x20001fc4

0800a1ec <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // C button is state!
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_4);
 800a1f2:	2004      	movs	r0, #4
 800a1f4:	f7fc fa64 	bl	80066c0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT];
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <EXTI2_IRQHandler+0x40>)
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	4a0b      	ldr	r2, [pc, #44]	; (800a22c <EXTI2_IRQHandler+0x40>)
 800a1fe:	6153      	str	r3, [r2, #20]
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a200:	f7f9 fdfa 	bl	8003df8 <xTaskGetTickCountFromISR>
 800a204:	4603      	mov	r3, r0
 800a206:	4a09      	ldr	r2, [pc, #36]	; (800a22c <EXTI2_IRQHandler+0x40>)
 800a208:	6113      	str	r3, [r2, #16]
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800a20a:	2008      	movs	r0, #8
 800a20c:	f7fb fe2b 	bl	8005e66 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_C, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a210:	4b07      	ldr	r3, [pc, #28]	; (800a230 <EXTI2_IRQHandler+0x44>)
 800a212:	6818      	ldr	r0, [r3, #0]
 800a214:	1d3b      	adds	r3, r7, #4
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2300      	movs	r3, #0
 800a21a:	2203      	movs	r2, #3
 800a21c:	2102      	movs	r1, #2
 800a21e:	f7fa fbbf 	bl	80049a0 <xTaskGenericNotifyFromISR>
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	200001a0 	.word	0x200001a0
 800a230:	20001fc4 	.word	0x20001fc4

0800a234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // A button is color
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_2);
 800a23a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a23e:	f7fc fa3f 	bl	80066c0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT];
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <EXTI15_10_IRQHandler+0x40>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <EXTI15_10_IRQHandler+0x40>)
 800a248:	6053      	str	r3, [r2, #4]
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a24a:	f7f9 fdd5 	bl	8003df8 <xTaskGetTickCountFromISR>
 800a24e:	4603      	mov	r3, r0
 800a250:	4a08      	ldr	r2, [pc, #32]	; (800a274 <EXTI15_10_IRQHandler+0x40>)
 800a252:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800a254:	2017      	movs	r0, #23
 800a256:	f7fb fe06 	bl	8005e66 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <EXTI15_10_IRQHandler+0x44>)
 800a25c:	6818      	ldr	r0, [r3, #0]
 800a25e:	1d3b      	adds	r3, r7, #4
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	2300      	movs	r3, #0
 800a264:	2203      	movs	r2, #3
 800a266:	2100      	movs	r1, #0
 800a268:	f7fa fb9a 	bl	80049a0 <xTaskGenericNotifyFromISR>
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200001a0 	.word	0x200001a0
 800a278:	20001fc4 	.word	0x20001fc4

0800a27c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // D button is pause
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_3);
 800a282:	2020      	movs	r0, #32
 800a284:	f7fc fa1c 	bl	80066c0 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT];
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <EXTI9_5_IRQHandler+0x40>)
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	4a0b      	ldr	r2, [pc, #44]	; (800a2bc <EXTI9_5_IRQHandler+0x40>)
 800a28e:	61d3      	str	r3, [r2, #28]
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a290:	f7f9 fdb2 	bl	8003df8 <xTaskGetTickCountFromISR>
 800a294:	4603      	mov	r3, r0
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <EXTI9_5_IRQHandler+0x40>)
 800a298:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a29a:	2028      	movs	r0, #40	; 0x28
 800a29c:	f7fb fde3 	bl	8005e66 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_D, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a2a0:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <EXTI9_5_IRQHandler+0x44>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	1d3b      	adds	r3, r7, #4
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	2203      	movs	r2, #3
 800a2ac:	2103      	movs	r1, #3
 800a2ae:	f7fa fb77 	bl	80049a0 <xTaskGenericNotifyFromISR>
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	200001a0 	.word	0x200001a0
 800a2c0:	20001fc4 	.word	0x20001fc4

0800a2c4 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
    while(1);
 800a2cc:	e7fe      	b.n	800a2cc <HAL_DMA_CMPLT_CALLBACK+0x8>
	...

0800a2d0 <HAL_TIM_PWM_PulseFinishedCallback>:


bool g_tim_pwm_transfer_cmplt = false;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
    static uint32_t count = 0;
    switch (htim->Channel)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7f1b      	ldrb	r3, [r3, #28]
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d010      	beq.n	800a302 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	dc13      	bgt.n	800a30c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d002      	beq.n	800a2ee <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d005      	beq.n	800a2f8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
        break;
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
        break;
        default:
        break;
 800a2ec:	e00e      	b.n	800a30c <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7fd ffaf 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
        break;
 800a2f6:	e00a      	b.n	800a30e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800a2f8:	2104      	movs	r1, #4
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7fd ffaa 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
        break;
 800a300:	e005      	b.n	800a30e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800a302:	2108      	movs	r1, #8
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7fd ffa5 	bl	8008254 <HAL_TIM_PWM_Stop_DMA>
        break;
 800a30a:	e000      	b.n	800a30e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
        break;
 800a30c:	bf00      	nop
    }
    //g_tim_pwm_transfer_cmplt = true;
    if (3 == count++)
 800a30e:	4b08      	ldr	r3, [pc, #32]	; (800a330 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	4906      	ldr	r1, [pc, #24]	; (800a330 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a316:	600a      	str	r2, [r1, #0]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d105      	bne.n	800a328 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
    {
        g_tim_pwm_transfer_cmplt = true;
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 800a31e:	2201      	movs	r2, #1
 800a320:	701a      	strb	r2, [r3, #0]
        count = 0;
 800a322:	4b03      	ldr	r3, [pc, #12]	; (800a330 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
    }
    //xTaskNotifyFromISR(g_dma_transfer_handle, 0xFF, eSetValueWithOverwrite, &xHigherPriorityTaskWokenTim);
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20003948 	.word	0x20003948
 800a334:	20003944 	.word	0x20003944

0800a338 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a33c:	4802      	ldr	r0, [pc, #8]	; (800a348 <DMA1_Channel2_IRQHandler+0x10>)
 800a33e:	f7fb ff06 	bl	800614e <HAL_DMA_IRQHandler>
}
 800a342:	bf00      	nop
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20001d4c 	.word	0x20001d4c

0800a34c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800a350:	4802      	ldr	r0, [pc, #8]	; (800a35c <DMA1_Channel3_IRQHandler+0x10>)
 800a352:	f7fb fefc 	bl	800614e <HAL_DMA_IRQHandler>
}
 800a356:	bf00      	nop
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20001d94 	.word	0x20001d94

0800a360 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800a364:	4802      	ldr	r0, [pc, #8]	; (800a370 <DMA1_Channel5_IRQHandler+0x10>)
 800a366:	f7fb fef2 	bl	800614e <HAL_DMA_IRQHandler>
}
 800a36a:	bf00      	nop
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20001e24 	.word	0x20001e24

0800a374 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a378:	4802      	ldr	r0, [pc, #8]	; (800a384 <DMA1_Channel6_IRQHandler+0x10>)
 800a37a:	f7fb fee8 	bl	800614e <HAL_DMA_IRQHandler>
}
 800a37e:	bf00      	nop
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20001e6c 	.word	0x20001e6c

0800a388 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800a38c:	4802      	ldr	r0, [pc, #8]	; (800a398 <DMA1_Channel7_IRQHandler+0x10>)
 800a38e:	f7fb fede 	bl	800614e <HAL_DMA_IRQHandler>
}
 800a392:	bf00      	nop
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20001ddc 	.word	0x20001ddc

0800a39c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
	return 1;
 800a3a0:	2301      	movs	r3, #1
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <_kill>:

int _kill(int pid, int sig)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a3b6:	f000 f8f3 	bl	800a5a0 <__errno>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2216      	movs	r2, #22
 800a3be:	601a      	str	r2, [r3, #0]
	return -1;
 800a3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <_exit>:

void _exit (int status)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a3d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7ff ffe7 	bl	800a3ac <_kill>
	while (1) {}		/* Make sure we hang here */
 800a3de:	e7fe      	b.n	800a3de <_exit+0x12>

0800a3e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e00a      	b.n	800a408 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a3f2:	f3af 8000 	nop.w
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	60ba      	str	r2, [r7, #8]
 800a3fe:	b2ca      	uxtb	r2, r1
 800a400:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	3301      	adds	r3, #1
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	dbf0      	blt.n	800a3f2 <_read+0x12>
	}

return len;
 800a410:	687b      	ldr	r3, [r7, #4]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e009      	b.n	800a440 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	60ba      	str	r2, [r7, #8]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	3301      	adds	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	429a      	cmp	r2, r3
 800a446:	dbf1      	blt.n	800a42c <_write+0x12>
	}
	return len;
 800a448:	687b      	ldr	r3, [r7, #4]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <_close>:

int _close(int file)
{
 800a452:	b480      	push	{r7}
 800a454:	b083      	sub	sp, #12
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
	return -1;
 800a45a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a45e:	4618      	mov	r0, r3
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a47a:	605a      	str	r2, [r3, #4]
	return 0;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <_isatty>:

int _isatty(int file)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
	return 1;
 800a492:	2301      	movs	r3, #1
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
	return 0;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a4c4:	4a14      	ldr	r2, [pc, #80]	; (800a518 <_sbrk+0x5c>)
 800a4c6:	4b15      	ldr	r3, [pc, #84]	; (800a51c <_sbrk+0x60>)
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a4d0:	4b13      	ldr	r3, [pc, #76]	; (800a520 <_sbrk+0x64>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d102      	bne.n	800a4de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a4d8:	4b11      	ldr	r3, [pc, #68]	; (800a520 <_sbrk+0x64>)
 800a4da:	4a12      	ldr	r2, [pc, #72]	; (800a524 <_sbrk+0x68>)
 800a4dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a4de:	4b10      	ldr	r3, [pc, #64]	; (800a520 <_sbrk+0x64>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d207      	bcs.n	800a4fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a4ec:	f000 f858 	bl	800a5a0 <__errno>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	220c      	movs	r2, #12
 800a4f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a4f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4fa:	e009      	b.n	800a510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <_sbrk+0x64>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <_sbrk+0x64>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4413      	add	r3, r2
 800a50a:	4a05      	ldr	r2, [pc, #20]	; (800a520 <_sbrk+0x64>)
 800a50c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a50e:	68fb      	ldr	r3, [r7, #12]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20010000 	.word	0x20010000
 800a51c:	00000400 	.word	0x00000400
 800a520:	2000394c 	.word	0x2000394c
 800a524:	20003960 	.word	0x20003960

0800a528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <SystemInit+0x20>)
 800a52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a532:	4a05      	ldr	r2, [pc, #20]	; (800a548 <SystemInit+0x20>)
 800a534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a53c:	bf00      	nop
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	e000ed00 	.word	0xe000ed00

0800a54c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a54c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a584 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a550:	f7ff ffea 	bl	800a528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a554:	480c      	ldr	r0, [pc, #48]	; (800a588 <LoopForever+0x6>)
  ldr r1, =_edata
 800a556:	490d      	ldr	r1, [pc, #52]	; (800a58c <LoopForever+0xa>)
  ldr r2, =_sidata
 800a558:	4a0d      	ldr	r2, [pc, #52]	; (800a590 <LoopForever+0xe>)
  movs r3, #0
 800a55a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a55c:	e002      	b.n	800a564 <LoopCopyDataInit>

0800a55e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a55e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a562:	3304      	adds	r3, #4

0800a564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a568:	d3f9      	bcc.n	800a55e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a56a:	4a0a      	ldr	r2, [pc, #40]	; (800a594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a56c:	4c0a      	ldr	r4, [pc, #40]	; (800a598 <LoopForever+0x16>)
  movs r3, #0
 800a56e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a570:	e001      	b.n	800a576 <LoopFillZerobss>

0800a572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a574:	3204      	adds	r2, #4

0800a576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a578:	d3fb      	bcc.n	800a572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a57a:	f000 f817 	bl	800a5ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a57e:	f7ff fad7 	bl	8009b30 <main>

0800a582 <LoopForever>:

LoopForever:
    b LoopForever
 800a582:	e7fe      	b.n	800a582 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a584:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a58c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800a590:	0800b9bc 	.word	0x0800b9bc
  ldr r2, =_sbss
 800a594:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800a598:	20003960 	.word	0x20003960

0800a59c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a59c:	e7fe      	b.n	800a59c <ADC1_IRQHandler>
	...

0800a5a0 <__errno>:
 800a5a0:	4b01      	ldr	r3, [pc, #4]	; (800a5a8 <__errno+0x8>)
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000020 	.word	0x20000020

0800a5ac <__libc_init_array>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4d0d      	ldr	r5, [pc, #52]	; (800a5e4 <__libc_init_array+0x38>)
 800a5b0:	4c0d      	ldr	r4, [pc, #52]	; (800a5e8 <__libc_init_array+0x3c>)
 800a5b2:	1b64      	subs	r4, r4, r5
 800a5b4:	10a4      	asrs	r4, r4, #2
 800a5b6:	2600      	movs	r6, #0
 800a5b8:	42a6      	cmp	r6, r4
 800a5ba:	d109      	bne.n	800a5d0 <__libc_init_array+0x24>
 800a5bc:	4d0b      	ldr	r5, [pc, #44]	; (800a5ec <__libc_init_array+0x40>)
 800a5be:	4c0c      	ldr	r4, [pc, #48]	; (800a5f0 <__libc_init_array+0x44>)
 800a5c0:	f001 f8c8 	bl	800b754 <_init>
 800a5c4:	1b64      	subs	r4, r4, r5
 800a5c6:	10a4      	asrs	r4, r4, #2
 800a5c8:	2600      	movs	r6, #0
 800a5ca:	42a6      	cmp	r6, r4
 800a5cc:	d105      	bne.n	800a5da <__libc_init_array+0x2e>
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d4:	4798      	blx	r3
 800a5d6:	3601      	adds	r6, #1
 800a5d8:	e7ee      	b.n	800a5b8 <__libc_init_array+0xc>
 800a5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5de:	4798      	blx	r3
 800a5e0:	3601      	adds	r6, #1
 800a5e2:	e7f2      	b.n	800a5ca <__libc_init_array+0x1e>
 800a5e4:	0800b9b4 	.word	0x0800b9b4
 800a5e8:	0800b9b4 	.word	0x0800b9b4
 800a5ec:	0800b9b4 	.word	0x0800b9b4
 800a5f0:	0800b9b8 	.word	0x0800b9b8

0800a5f4 <malloc>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <malloc+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f000 b885 	b.w	800a708 <_malloc_r>
 800a5fe:	bf00      	nop
 800a600:	20000020 	.word	0x20000020

0800a604 <memcpy>:
 800a604:	440a      	add	r2, r1
 800a606:	4291      	cmp	r1, r2
 800a608:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a60c:	d100      	bne.n	800a610 <memcpy+0xc>
 800a60e:	4770      	bx	lr
 800a610:	b510      	push	{r4, lr}
 800a612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a61a:	4291      	cmp	r1, r2
 800a61c:	d1f9      	bne.n	800a612 <memcpy+0xe>
 800a61e:	bd10      	pop	{r4, pc}

0800a620 <memset>:
 800a620:	4402      	add	r2, r0
 800a622:	4603      	mov	r3, r0
 800a624:	4293      	cmp	r3, r2
 800a626:	d100      	bne.n	800a62a <memset+0xa>
 800a628:	4770      	bx	lr
 800a62a:	f803 1b01 	strb.w	r1, [r3], #1
 800a62e:	e7f9      	b.n	800a624 <memset+0x4>

0800a630 <_free_r>:
 800a630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a632:	2900      	cmp	r1, #0
 800a634:	d044      	beq.n	800a6c0 <_free_r+0x90>
 800a636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63a:	9001      	str	r0, [sp, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f1a1 0404 	sub.w	r4, r1, #4
 800a642:	bfb8      	it	lt
 800a644:	18e4      	addlt	r4, r4, r3
 800a646:	f000 f9ab 	bl	800a9a0 <__malloc_lock>
 800a64a:	4a1e      	ldr	r2, [pc, #120]	; (800a6c4 <_free_r+0x94>)
 800a64c:	9801      	ldr	r0, [sp, #4]
 800a64e:	6813      	ldr	r3, [r2, #0]
 800a650:	b933      	cbnz	r3, 800a660 <_free_r+0x30>
 800a652:	6063      	str	r3, [r4, #4]
 800a654:	6014      	str	r4, [r2, #0]
 800a656:	b003      	add	sp, #12
 800a658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a65c:	f000 b9a6 	b.w	800a9ac <__malloc_unlock>
 800a660:	42a3      	cmp	r3, r4
 800a662:	d908      	bls.n	800a676 <_free_r+0x46>
 800a664:	6825      	ldr	r5, [r4, #0]
 800a666:	1961      	adds	r1, r4, r5
 800a668:	428b      	cmp	r3, r1
 800a66a:	bf01      	itttt	eq
 800a66c:	6819      	ldreq	r1, [r3, #0]
 800a66e:	685b      	ldreq	r3, [r3, #4]
 800a670:	1949      	addeq	r1, r1, r5
 800a672:	6021      	streq	r1, [r4, #0]
 800a674:	e7ed      	b.n	800a652 <_free_r+0x22>
 800a676:	461a      	mov	r2, r3
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	b10b      	cbz	r3, 800a680 <_free_r+0x50>
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	d9fa      	bls.n	800a676 <_free_r+0x46>
 800a680:	6811      	ldr	r1, [r2, #0]
 800a682:	1855      	adds	r5, r2, r1
 800a684:	42a5      	cmp	r5, r4
 800a686:	d10b      	bne.n	800a6a0 <_free_r+0x70>
 800a688:	6824      	ldr	r4, [r4, #0]
 800a68a:	4421      	add	r1, r4
 800a68c:	1854      	adds	r4, r2, r1
 800a68e:	42a3      	cmp	r3, r4
 800a690:	6011      	str	r1, [r2, #0]
 800a692:	d1e0      	bne.n	800a656 <_free_r+0x26>
 800a694:	681c      	ldr	r4, [r3, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	6053      	str	r3, [r2, #4]
 800a69a:	4421      	add	r1, r4
 800a69c:	6011      	str	r1, [r2, #0]
 800a69e:	e7da      	b.n	800a656 <_free_r+0x26>
 800a6a0:	d902      	bls.n	800a6a8 <_free_r+0x78>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	e7d6      	b.n	800a656 <_free_r+0x26>
 800a6a8:	6825      	ldr	r5, [r4, #0]
 800a6aa:	1961      	adds	r1, r4, r5
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	bf04      	itt	eq
 800a6b0:	6819      	ldreq	r1, [r3, #0]
 800a6b2:	685b      	ldreq	r3, [r3, #4]
 800a6b4:	6063      	str	r3, [r4, #4]
 800a6b6:	bf04      	itt	eq
 800a6b8:	1949      	addeq	r1, r1, r5
 800a6ba:	6021      	streq	r1, [r4, #0]
 800a6bc:	6054      	str	r4, [r2, #4]
 800a6be:	e7ca      	b.n	800a656 <_free_r+0x26>
 800a6c0:	b003      	add	sp, #12
 800a6c2:	bd30      	pop	{r4, r5, pc}
 800a6c4:	20003950 	.word	0x20003950

0800a6c8 <sbrk_aligned>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	4e0e      	ldr	r6, [pc, #56]	; (800a704 <sbrk_aligned+0x3c>)
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	6831      	ldr	r1, [r6, #0]
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	b911      	cbnz	r1, 800a6da <sbrk_aligned+0x12>
 800a6d4:	f000 f8f8 	bl	800a8c8 <_sbrk_r>
 800a6d8:	6030      	str	r0, [r6, #0]
 800a6da:	4621      	mov	r1, r4
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 f8f3 	bl	800a8c8 <_sbrk_r>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d00a      	beq.n	800a6fc <sbrk_aligned+0x34>
 800a6e6:	1cc4      	adds	r4, r0, #3
 800a6e8:	f024 0403 	bic.w	r4, r4, #3
 800a6ec:	42a0      	cmp	r0, r4
 800a6ee:	d007      	beq.n	800a700 <sbrk_aligned+0x38>
 800a6f0:	1a21      	subs	r1, r4, r0
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f8e8 	bl	800a8c8 <_sbrk_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d101      	bne.n	800a700 <sbrk_aligned+0x38>
 800a6fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a700:	4620      	mov	r0, r4
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	20003954 	.word	0x20003954

0800a708 <_malloc_r>:
 800a708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70c:	1ccd      	adds	r5, r1, #3
 800a70e:	f025 0503 	bic.w	r5, r5, #3
 800a712:	3508      	adds	r5, #8
 800a714:	2d0c      	cmp	r5, #12
 800a716:	bf38      	it	cc
 800a718:	250c      	movcc	r5, #12
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	4607      	mov	r7, r0
 800a71e:	db01      	blt.n	800a724 <_malloc_r+0x1c>
 800a720:	42a9      	cmp	r1, r5
 800a722:	d905      	bls.n	800a730 <_malloc_r+0x28>
 800a724:	230c      	movs	r3, #12
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	2600      	movs	r6, #0
 800a72a:	4630      	mov	r0, r6
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	4e2e      	ldr	r6, [pc, #184]	; (800a7ec <_malloc_r+0xe4>)
 800a732:	f000 f935 	bl	800a9a0 <__malloc_lock>
 800a736:	6833      	ldr	r3, [r6, #0]
 800a738:	461c      	mov	r4, r3
 800a73a:	bb34      	cbnz	r4, 800a78a <_malloc_r+0x82>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4638      	mov	r0, r7
 800a740:	f7ff ffc2 	bl	800a6c8 <sbrk_aligned>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	4604      	mov	r4, r0
 800a748:	d14d      	bne.n	800a7e6 <_malloc_r+0xde>
 800a74a:	6834      	ldr	r4, [r6, #0]
 800a74c:	4626      	mov	r6, r4
 800a74e:	2e00      	cmp	r6, #0
 800a750:	d140      	bne.n	800a7d4 <_malloc_r+0xcc>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	4631      	mov	r1, r6
 800a756:	4638      	mov	r0, r7
 800a758:	eb04 0803 	add.w	r8, r4, r3
 800a75c:	f000 f8b4 	bl	800a8c8 <_sbrk_r>
 800a760:	4580      	cmp	r8, r0
 800a762:	d13a      	bne.n	800a7da <_malloc_r+0xd2>
 800a764:	6821      	ldr	r1, [r4, #0]
 800a766:	3503      	adds	r5, #3
 800a768:	1a6d      	subs	r5, r5, r1
 800a76a:	f025 0503 	bic.w	r5, r5, #3
 800a76e:	3508      	adds	r5, #8
 800a770:	2d0c      	cmp	r5, #12
 800a772:	bf38      	it	cc
 800a774:	250c      	movcc	r5, #12
 800a776:	4629      	mov	r1, r5
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff ffa5 	bl	800a6c8 <sbrk_aligned>
 800a77e:	3001      	adds	r0, #1
 800a780:	d02b      	beq.n	800a7da <_malloc_r+0xd2>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	442b      	add	r3, r5
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	e00e      	b.n	800a7a8 <_malloc_r+0xa0>
 800a78a:	6822      	ldr	r2, [r4, #0]
 800a78c:	1b52      	subs	r2, r2, r5
 800a78e:	d41e      	bmi.n	800a7ce <_malloc_r+0xc6>
 800a790:	2a0b      	cmp	r2, #11
 800a792:	d916      	bls.n	800a7c2 <_malloc_r+0xba>
 800a794:	1961      	adds	r1, r4, r5
 800a796:	42a3      	cmp	r3, r4
 800a798:	6025      	str	r5, [r4, #0]
 800a79a:	bf18      	it	ne
 800a79c:	6059      	strne	r1, [r3, #4]
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	bf08      	it	eq
 800a7a2:	6031      	streq	r1, [r6, #0]
 800a7a4:	5162      	str	r2, [r4, r5]
 800a7a6:	604b      	str	r3, [r1, #4]
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f104 060b 	add.w	r6, r4, #11
 800a7ae:	f000 f8fd 	bl	800a9ac <__malloc_unlock>
 800a7b2:	f026 0607 	bic.w	r6, r6, #7
 800a7b6:	1d23      	adds	r3, r4, #4
 800a7b8:	1af2      	subs	r2, r6, r3
 800a7ba:	d0b6      	beq.n	800a72a <_malloc_r+0x22>
 800a7bc:	1b9b      	subs	r3, r3, r6
 800a7be:	50a3      	str	r3, [r4, r2]
 800a7c0:	e7b3      	b.n	800a72a <_malloc_r+0x22>
 800a7c2:	6862      	ldr	r2, [r4, #4]
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	bf0c      	ite	eq
 800a7c8:	6032      	streq	r2, [r6, #0]
 800a7ca:	605a      	strne	r2, [r3, #4]
 800a7cc:	e7ec      	b.n	800a7a8 <_malloc_r+0xa0>
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	6864      	ldr	r4, [r4, #4]
 800a7d2:	e7b2      	b.n	800a73a <_malloc_r+0x32>
 800a7d4:	4634      	mov	r4, r6
 800a7d6:	6876      	ldr	r6, [r6, #4]
 800a7d8:	e7b9      	b.n	800a74e <_malloc_r+0x46>
 800a7da:	230c      	movs	r3, #12
 800a7dc:	603b      	str	r3, [r7, #0]
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f000 f8e4 	bl	800a9ac <__malloc_unlock>
 800a7e4:	e7a1      	b.n	800a72a <_malloc_r+0x22>
 800a7e6:	6025      	str	r5, [r4, #0]
 800a7e8:	e7de      	b.n	800a7a8 <_malloc_r+0xa0>
 800a7ea:	bf00      	nop
 800a7ec:	20003950 	.word	0x20003950

0800a7f0 <srand>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4b10      	ldr	r3, [pc, #64]	; (800a834 <srand+0x44>)
 800a7f4:	681d      	ldr	r5, [r3, #0]
 800a7f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	b9b3      	cbnz	r3, 800a82a <srand+0x3a>
 800a7fc:	2018      	movs	r0, #24
 800a7fe:	f7ff fef9 	bl	800a5f4 <malloc>
 800a802:	4602      	mov	r2, r0
 800a804:	63a8      	str	r0, [r5, #56]	; 0x38
 800a806:	b920      	cbnz	r0, 800a812 <srand+0x22>
 800a808:	4b0b      	ldr	r3, [pc, #44]	; (800a838 <srand+0x48>)
 800a80a:	480c      	ldr	r0, [pc, #48]	; (800a83c <srand+0x4c>)
 800a80c:	2142      	movs	r1, #66	; 0x42
 800a80e:	f000 f885 	bl	800a91c <__assert_func>
 800a812:	490b      	ldr	r1, [pc, #44]	; (800a840 <srand+0x50>)
 800a814:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <srand+0x54>)
 800a816:	e9c0 1300 	strd	r1, r3, [r0]
 800a81a:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <srand+0x58>)
 800a81c:	6083      	str	r3, [r0, #8]
 800a81e:	230b      	movs	r3, #11
 800a820:	8183      	strh	r3, [r0, #12]
 800a822:	2100      	movs	r1, #0
 800a824:	2001      	movs	r0, #1
 800a826:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a82a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a82c:	2200      	movs	r2, #0
 800a82e:	611c      	str	r4, [r3, #16]
 800a830:	615a      	str	r2, [r3, #20]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	20000020 	.word	0x20000020
 800a838:	0800b870 	.word	0x0800b870
 800a83c:	0800b887 	.word	0x0800b887
 800a840:	abcd330e 	.word	0xabcd330e
 800a844:	e66d1234 	.word	0xe66d1234
 800a848:	0005deec 	.word	0x0005deec

0800a84c <rand>:
 800a84c:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <rand+0x5c>)
 800a84e:	b510      	push	{r4, lr}
 800a850:	681c      	ldr	r4, [r3, #0]
 800a852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a854:	b9b3      	cbnz	r3, 800a884 <rand+0x38>
 800a856:	2018      	movs	r0, #24
 800a858:	f7ff fecc 	bl	800a5f4 <malloc>
 800a85c:	63a0      	str	r0, [r4, #56]	; 0x38
 800a85e:	b928      	cbnz	r0, 800a86c <rand+0x20>
 800a860:	4602      	mov	r2, r0
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <rand+0x60>)
 800a864:	4812      	ldr	r0, [pc, #72]	; (800a8b0 <rand+0x64>)
 800a866:	214e      	movs	r1, #78	; 0x4e
 800a868:	f000 f858 	bl	800a91c <__assert_func>
 800a86c:	4a11      	ldr	r2, [pc, #68]	; (800a8b4 <rand+0x68>)
 800a86e:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <rand+0x6c>)
 800a870:	e9c0 2300 	strd	r2, r3, [r0]
 800a874:	4b11      	ldr	r3, [pc, #68]	; (800a8bc <rand+0x70>)
 800a876:	6083      	str	r3, [r0, #8]
 800a878:	230b      	movs	r3, #11
 800a87a:	8183      	strh	r3, [r0, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	2300      	movs	r3, #0
 800a880:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a884:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a886:	4a0e      	ldr	r2, [pc, #56]	; (800a8c0 <rand+0x74>)
 800a888:	6920      	ldr	r0, [r4, #16]
 800a88a:	6963      	ldr	r3, [r4, #20]
 800a88c:	490d      	ldr	r1, [pc, #52]	; (800a8c4 <rand+0x78>)
 800a88e:	4342      	muls	r2, r0
 800a890:	fb01 2203 	mla	r2, r1, r3, r2
 800a894:	fba0 0101 	umull	r0, r1, r0, r1
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	eb42 0001 	adc.w	r0, r2, r1
 800a89e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a8a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a8a6:	bd10      	pop	{r4, pc}
 800a8a8:	20000020 	.word	0x20000020
 800a8ac:	0800b870 	.word	0x0800b870
 800a8b0:	0800b887 	.word	0x0800b887
 800a8b4:	abcd330e 	.word	0xabcd330e
 800a8b8:	e66d1234 	.word	0xe66d1234
 800a8bc:	0005deec 	.word	0x0005deec
 800a8c0:	5851f42d 	.word	0x5851f42d
 800a8c4:	4c957f2d 	.word	0x4c957f2d

0800a8c8 <_sbrk_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d06      	ldr	r5, [pc, #24]	; (800a8e4 <_sbrk_r+0x1c>)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	602b      	str	r3, [r5, #0]
 800a8d4:	f7ff fdf2 	bl	800a4bc <_sbrk>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_sbrk_r+0x1a>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_sbrk_r+0x1a>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	20003958 	.word	0x20003958

0800a8e8 <time>:
 800a8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <time+0x30>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4669      	mov	r1, sp
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	f000 f842 	bl	800a97c <_gettimeofday_r>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	bfbe      	ittt	lt
 800a8fc:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800a900:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a904:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a90c:	b10c      	cbz	r4, 800a912 <time+0x2a>
 800a90e:	e9c4 0100 	strd	r0, r1, [r4]
 800a912:	b004      	add	sp, #16
 800a914:	bd10      	pop	{r4, pc}
 800a916:	bf00      	nop
 800a918:	20000020 	.word	0x20000020

0800a91c <__assert_func>:
 800a91c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a91e:	4614      	mov	r4, r2
 800a920:	461a      	mov	r2, r3
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <__assert_func+0x2c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4605      	mov	r5, r0
 800a928:	68d8      	ldr	r0, [r3, #12]
 800a92a:	b14c      	cbz	r4, 800a940 <__assert_func+0x24>
 800a92c:	4b07      	ldr	r3, [pc, #28]	; (800a94c <__assert_func+0x30>)
 800a92e:	9100      	str	r1, [sp, #0]
 800a930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a934:	4906      	ldr	r1, [pc, #24]	; (800a950 <__assert_func+0x34>)
 800a936:	462b      	mov	r3, r5
 800a938:	f000 f80e 	bl	800a958 <fiprintf>
 800a93c:	f000 fbea 	bl	800b114 <abort>
 800a940:	4b04      	ldr	r3, [pc, #16]	; (800a954 <__assert_func+0x38>)
 800a942:	461c      	mov	r4, r3
 800a944:	e7f3      	b.n	800a92e <__assert_func+0x12>
 800a946:	bf00      	nop
 800a948:	20000020 	.word	0x20000020
 800a94c:	0800b8e2 	.word	0x0800b8e2
 800a950:	0800b8ef 	.word	0x0800b8ef
 800a954:	0800b91d 	.word	0x0800b91d

0800a958 <fiprintf>:
 800a958:	b40e      	push	{r1, r2, r3}
 800a95a:	b503      	push	{r0, r1, lr}
 800a95c:	4601      	mov	r1, r0
 800a95e:	ab03      	add	r3, sp, #12
 800a960:	4805      	ldr	r0, [pc, #20]	; (800a978 <fiprintf+0x20>)
 800a962:	f853 2b04 	ldr.w	r2, [r3], #4
 800a966:	6800      	ldr	r0, [r0, #0]
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	f000 f84f 	bl	800aa0c <_vfiprintf_r>
 800a96e:	b002      	add	sp, #8
 800a970:	f85d eb04 	ldr.w	lr, [sp], #4
 800a974:	b003      	add	sp, #12
 800a976:	4770      	bx	lr
 800a978:	20000020 	.word	0x20000020

0800a97c <_gettimeofday_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	; (800a99c <_gettimeofday_r+0x20>)
 800a980:	2300      	movs	r3, #0
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	4611      	mov	r1, r2
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	f000 fedb 	bl	800b744 <_gettimeofday>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d102      	bne.n	800a998 <_gettimeofday_r+0x1c>
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	b103      	cbz	r3, 800a998 <_gettimeofday_r+0x1c>
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	bd38      	pop	{r3, r4, r5, pc}
 800a99a:	bf00      	nop
 800a99c:	20003958 	.word	0x20003958

0800a9a0 <__malloc_lock>:
 800a9a0:	4801      	ldr	r0, [pc, #4]	; (800a9a8 <__malloc_lock+0x8>)
 800a9a2:	f000 bd77 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800a9a6:	bf00      	nop
 800a9a8:	2000395c 	.word	0x2000395c

0800a9ac <__malloc_unlock>:
 800a9ac:	4801      	ldr	r0, [pc, #4]	; (800a9b4 <__malloc_unlock+0x8>)
 800a9ae:	f000 bd72 	b.w	800b496 <__retarget_lock_release_recursive>
 800a9b2:	bf00      	nop
 800a9b4:	2000395c 	.word	0x2000395c

0800a9b8 <__sfputc_r>:
 800a9b8:	6893      	ldr	r3, [r2, #8]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	b410      	push	{r4}
 800a9c0:	6093      	str	r3, [r2, #8]
 800a9c2:	da08      	bge.n	800a9d6 <__sfputc_r+0x1e>
 800a9c4:	6994      	ldr	r4, [r2, #24]
 800a9c6:	42a3      	cmp	r3, r4
 800a9c8:	db01      	blt.n	800a9ce <__sfputc_r+0x16>
 800a9ca:	290a      	cmp	r1, #10
 800a9cc:	d103      	bne.n	800a9d6 <__sfputc_r+0x1e>
 800a9ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9d2:	f000 badf 	b.w	800af94 <__swbuf_r>
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	1c58      	adds	r0, r3, #1
 800a9da:	6010      	str	r0, [r2, #0]
 800a9dc:	7019      	strb	r1, [r3, #0]
 800a9de:	4608      	mov	r0, r1
 800a9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <__sfputs_r>:
 800a9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	460f      	mov	r7, r1
 800a9ec:	4614      	mov	r4, r2
 800a9ee:	18d5      	adds	r5, r2, r3
 800a9f0:	42ac      	cmp	r4, r5
 800a9f2:	d101      	bne.n	800a9f8 <__sfputs_r+0x12>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e007      	b.n	800aa08 <__sfputs_r+0x22>
 800a9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fc:	463a      	mov	r2, r7
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7ff ffda 	bl	800a9b8 <__sfputc_r>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d1f3      	bne.n	800a9f0 <__sfputs_r+0xa>
 800aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa0c <_vfiprintf_r>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	460d      	mov	r5, r1
 800aa12:	b09d      	sub	sp, #116	; 0x74
 800aa14:	4614      	mov	r4, r2
 800aa16:	4698      	mov	r8, r3
 800aa18:	4606      	mov	r6, r0
 800aa1a:	b118      	cbz	r0, 800aa24 <_vfiprintf_r+0x18>
 800aa1c:	6983      	ldr	r3, [r0, #24]
 800aa1e:	b90b      	cbnz	r3, 800aa24 <_vfiprintf_r+0x18>
 800aa20:	f000 fc9a 	bl	800b358 <__sinit>
 800aa24:	4b89      	ldr	r3, [pc, #548]	; (800ac4c <_vfiprintf_r+0x240>)
 800aa26:	429d      	cmp	r5, r3
 800aa28:	d11b      	bne.n	800aa62 <_vfiprintf_r+0x56>
 800aa2a:	6875      	ldr	r5, [r6, #4]
 800aa2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa2e:	07d9      	lsls	r1, r3, #31
 800aa30:	d405      	bmi.n	800aa3e <_vfiprintf_r+0x32>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	059a      	lsls	r2, r3, #22
 800aa36:	d402      	bmi.n	800aa3e <_vfiprintf_r+0x32>
 800aa38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa3a:	f000 fd2b 	bl	800b494 <__retarget_lock_acquire_recursive>
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	071b      	lsls	r3, r3, #28
 800aa42:	d501      	bpl.n	800aa48 <_vfiprintf_r+0x3c>
 800aa44:	692b      	ldr	r3, [r5, #16]
 800aa46:	b9eb      	cbnz	r3, 800aa84 <_vfiprintf_r+0x78>
 800aa48:	4629      	mov	r1, r5
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f000 faf4 	bl	800b038 <__swsetup_r>
 800aa50:	b1c0      	cbz	r0, 800aa84 <_vfiprintf_r+0x78>
 800aa52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa54:	07dc      	lsls	r4, r3, #31
 800aa56:	d50e      	bpl.n	800aa76 <_vfiprintf_r+0x6a>
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa5c:	b01d      	add	sp, #116	; 0x74
 800aa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa62:	4b7b      	ldr	r3, [pc, #492]	; (800ac50 <_vfiprintf_r+0x244>)
 800aa64:	429d      	cmp	r5, r3
 800aa66:	d101      	bne.n	800aa6c <_vfiprintf_r+0x60>
 800aa68:	68b5      	ldr	r5, [r6, #8]
 800aa6a:	e7df      	b.n	800aa2c <_vfiprintf_r+0x20>
 800aa6c:	4b79      	ldr	r3, [pc, #484]	; (800ac54 <_vfiprintf_r+0x248>)
 800aa6e:	429d      	cmp	r5, r3
 800aa70:	bf08      	it	eq
 800aa72:	68f5      	ldreq	r5, [r6, #12]
 800aa74:	e7da      	b.n	800aa2c <_vfiprintf_r+0x20>
 800aa76:	89ab      	ldrh	r3, [r5, #12]
 800aa78:	0598      	lsls	r0, r3, #22
 800aa7a:	d4ed      	bmi.n	800aa58 <_vfiprintf_r+0x4c>
 800aa7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa7e:	f000 fd0a 	bl	800b496 <__retarget_lock_release_recursive>
 800aa82:	e7e9      	b.n	800aa58 <_vfiprintf_r+0x4c>
 800aa84:	2300      	movs	r3, #0
 800aa86:	9309      	str	r3, [sp, #36]	; 0x24
 800aa88:	2320      	movs	r3, #32
 800aa8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa92:	2330      	movs	r3, #48	; 0x30
 800aa94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac58 <_vfiprintf_r+0x24c>
 800aa98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa9c:	f04f 0901 	mov.w	r9, #1
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	469a      	mov	sl, r3
 800aaa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaa8:	b10a      	cbz	r2, 800aaae <_vfiprintf_r+0xa2>
 800aaaa:	2a25      	cmp	r2, #37	; 0x25
 800aaac:	d1f9      	bne.n	800aaa2 <_vfiprintf_r+0x96>
 800aaae:	ebba 0b04 	subs.w	fp, sl, r4
 800aab2:	d00b      	beq.n	800aacc <_vfiprintf_r+0xc0>
 800aab4:	465b      	mov	r3, fp
 800aab6:	4622      	mov	r2, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	4630      	mov	r0, r6
 800aabc:	f7ff ff93 	bl	800a9e6 <__sfputs_r>
 800aac0:	3001      	adds	r0, #1
 800aac2:	f000 80aa 	beq.w	800ac1a <_vfiprintf_r+0x20e>
 800aac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aac8:	445a      	add	r2, fp
 800aaca:	9209      	str	r2, [sp, #36]	; 0x24
 800aacc:	f89a 3000 	ldrb.w	r3, [sl]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 80a2 	beq.w	800ac1a <_vfiprintf_r+0x20e>
 800aad6:	2300      	movs	r3, #0
 800aad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aadc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aae0:	f10a 0a01 	add.w	sl, sl, #1
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	9307      	str	r3, [sp, #28]
 800aae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaec:	931a      	str	r3, [sp, #104]	; 0x68
 800aaee:	4654      	mov	r4, sl
 800aaf0:	2205      	movs	r2, #5
 800aaf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf6:	4858      	ldr	r0, [pc, #352]	; (800ac58 <_vfiprintf_r+0x24c>)
 800aaf8:	f7f5 fb6a 	bl	80001d0 <memchr>
 800aafc:	9a04      	ldr	r2, [sp, #16]
 800aafe:	b9d8      	cbnz	r0, 800ab38 <_vfiprintf_r+0x12c>
 800ab00:	06d1      	lsls	r1, r2, #27
 800ab02:	bf44      	itt	mi
 800ab04:	2320      	movmi	r3, #32
 800ab06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab0a:	0713      	lsls	r3, r2, #28
 800ab0c:	bf44      	itt	mi
 800ab0e:	232b      	movmi	r3, #43	; 0x2b
 800ab10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab14:	f89a 3000 	ldrb.w	r3, [sl]
 800ab18:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1a:	d015      	beq.n	800ab48 <_vfiprintf_r+0x13c>
 800ab1c:	9a07      	ldr	r2, [sp, #28]
 800ab1e:	4654      	mov	r4, sl
 800ab20:	2000      	movs	r0, #0
 800ab22:	f04f 0c0a 	mov.w	ip, #10
 800ab26:	4621      	mov	r1, r4
 800ab28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab2c:	3b30      	subs	r3, #48	; 0x30
 800ab2e:	2b09      	cmp	r3, #9
 800ab30:	d94e      	bls.n	800abd0 <_vfiprintf_r+0x1c4>
 800ab32:	b1b0      	cbz	r0, 800ab62 <_vfiprintf_r+0x156>
 800ab34:	9207      	str	r2, [sp, #28]
 800ab36:	e014      	b.n	800ab62 <_vfiprintf_r+0x156>
 800ab38:	eba0 0308 	sub.w	r3, r0, r8
 800ab3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	46a2      	mov	sl, r4
 800ab46:	e7d2      	b.n	800aaee <_vfiprintf_r+0xe2>
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	1d19      	adds	r1, r3, #4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	9103      	str	r1, [sp, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bfbb      	ittet	lt
 800ab54:	425b      	neglt	r3, r3
 800ab56:	f042 0202 	orrlt.w	r2, r2, #2
 800ab5a:	9307      	strge	r3, [sp, #28]
 800ab5c:	9307      	strlt	r3, [sp, #28]
 800ab5e:	bfb8      	it	lt
 800ab60:	9204      	strlt	r2, [sp, #16]
 800ab62:	7823      	ldrb	r3, [r4, #0]
 800ab64:	2b2e      	cmp	r3, #46	; 0x2e
 800ab66:	d10c      	bne.n	800ab82 <_vfiprintf_r+0x176>
 800ab68:	7863      	ldrb	r3, [r4, #1]
 800ab6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab6c:	d135      	bne.n	800abda <_vfiprintf_r+0x1ce>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	1d1a      	adds	r2, r3, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	9203      	str	r2, [sp, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfb8      	it	lt
 800ab7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab7e:	3402      	adds	r4, #2
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac68 <_vfiprintf_r+0x25c>
 800ab86:	7821      	ldrb	r1, [r4, #0]
 800ab88:	2203      	movs	r2, #3
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	f7f5 fb20 	bl	80001d0 <memchr>
 800ab90:	b140      	cbz	r0, 800aba4 <_vfiprintf_r+0x198>
 800ab92:	2340      	movs	r3, #64	; 0x40
 800ab94:	eba0 000a 	sub.w	r0, r0, sl
 800ab98:	fa03 f000 	lsl.w	r0, r3, r0
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	4303      	orrs	r3, r0
 800aba0:	3401      	adds	r4, #1
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba8:	482c      	ldr	r0, [pc, #176]	; (800ac5c <_vfiprintf_r+0x250>)
 800abaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abae:	2206      	movs	r2, #6
 800abb0:	f7f5 fb0e 	bl	80001d0 <memchr>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d03f      	beq.n	800ac38 <_vfiprintf_r+0x22c>
 800abb8:	4b29      	ldr	r3, [pc, #164]	; (800ac60 <_vfiprintf_r+0x254>)
 800abba:	bb1b      	cbnz	r3, 800ac04 <_vfiprintf_r+0x1f8>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	3307      	adds	r3, #7
 800abc0:	f023 0307 	bic.w	r3, r3, #7
 800abc4:	3308      	adds	r3, #8
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abca:	443b      	add	r3, r7
 800abcc:	9309      	str	r3, [sp, #36]	; 0x24
 800abce:	e767      	b.n	800aaa0 <_vfiprintf_r+0x94>
 800abd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abd4:	460c      	mov	r4, r1
 800abd6:	2001      	movs	r0, #1
 800abd8:	e7a5      	b.n	800ab26 <_vfiprintf_r+0x11a>
 800abda:	2300      	movs	r3, #0
 800abdc:	3401      	adds	r4, #1
 800abde:	9305      	str	r3, [sp, #20]
 800abe0:	4619      	mov	r1, r3
 800abe2:	f04f 0c0a 	mov.w	ip, #10
 800abe6:	4620      	mov	r0, r4
 800abe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abec:	3a30      	subs	r2, #48	; 0x30
 800abee:	2a09      	cmp	r2, #9
 800abf0:	d903      	bls.n	800abfa <_vfiprintf_r+0x1ee>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0c5      	beq.n	800ab82 <_vfiprintf_r+0x176>
 800abf6:	9105      	str	r1, [sp, #20]
 800abf8:	e7c3      	b.n	800ab82 <_vfiprintf_r+0x176>
 800abfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800abfe:	4604      	mov	r4, r0
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7f0      	b.n	800abe6 <_vfiprintf_r+0x1da>
 800ac04:	ab03      	add	r3, sp, #12
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	462a      	mov	r2, r5
 800ac0a:	4b16      	ldr	r3, [pc, #88]	; (800ac64 <_vfiprintf_r+0x258>)
 800ac0c:	a904      	add	r1, sp, #16
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f3af 8000 	nop.w
 800ac14:	4607      	mov	r7, r0
 800ac16:	1c78      	adds	r0, r7, #1
 800ac18:	d1d6      	bne.n	800abc8 <_vfiprintf_r+0x1bc>
 800ac1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac1c:	07d9      	lsls	r1, r3, #31
 800ac1e:	d405      	bmi.n	800ac2c <_vfiprintf_r+0x220>
 800ac20:	89ab      	ldrh	r3, [r5, #12]
 800ac22:	059a      	lsls	r2, r3, #22
 800ac24:	d402      	bmi.n	800ac2c <_vfiprintf_r+0x220>
 800ac26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac28:	f000 fc35 	bl	800b496 <__retarget_lock_release_recursive>
 800ac2c:	89ab      	ldrh	r3, [r5, #12]
 800ac2e:	065b      	lsls	r3, r3, #25
 800ac30:	f53f af12 	bmi.w	800aa58 <_vfiprintf_r+0x4c>
 800ac34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac36:	e711      	b.n	800aa5c <_vfiprintf_r+0x50>
 800ac38:	ab03      	add	r3, sp, #12
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <_vfiprintf_r+0x258>)
 800ac40:	a904      	add	r1, sp, #16
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 f880 	bl	800ad48 <_printf_i>
 800ac48:	e7e4      	b.n	800ac14 <_vfiprintf_r+0x208>
 800ac4a:	bf00      	nop
 800ac4c:	0800b974 	.word	0x0800b974
 800ac50:	0800b994 	.word	0x0800b994
 800ac54:	0800b954 	.word	0x0800b954
 800ac58:	0800b91e 	.word	0x0800b91e
 800ac5c:	0800b928 	.word	0x0800b928
 800ac60:	00000000 	.word	0x00000000
 800ac64:	0800a9e7 	.word	0x0800a9e7
 800ac68:	0800b924 	.word	0x0800b924

0800ac6c <_printf_common>:
 800ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac70:	4616      	mov	r6, r2
 800ac72:	4699      	mov	r9, r3
 800ac74:	688a      	ldr	r2, [r1, #8]
 800ac76:	690b      	ldr	r3, [r1, #16]
 800ac78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	bfb8      	it	lt
 800ac80:	4613      	movlt	r3, r2
 800ac82:	6033      	str	r3, [r6, #0]
 800ac84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac88:	4607      	mov	r7, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	b10a      	cbz	r2, 800ac92 <_printf_common+0x26>
 800ac8e:	3301      	adds	r3, #1
 800ac90:	6033      	str	r3, [r6, #0]
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	0699      	lsls	r1, r3, #26
 800ac96:	bf42      	ittt	mi
 800ac98:	6833      	ldrmi	r3, [r6, #0]
 800ac9a:	3302      	addmi	r3, #2
 800ac9c:	6033      	strmi	r3, [r6, #0]
 800ac9e:	6825      	ldr	r5, [r4, #0]
 800aca0:	f015 0506 	ands.w	r5, r5, #6
 800aca4:	d106      	bne.n	800acb4 <_printf_common+0x48>
 800aca6:	f104 0a19 	add.w	sl, r4, #25
 800acaa:	68e3      	ldr	r3, [r4, #12]
 800acac:	6832      	ldr	r2, [r6, #0]
 800acae:	1a9b      	subs	r3, r3, r2
 800acb0:	42ab      	cmp	r3, r5
 800acb2:	dc26      	bgt.n	800ad02 <_printf_common+0x96>
 800acb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acb8:	1e13      	subs	r3, r2, #0
 800acba:	6822      	ldr	r2, [r4, #0]
 800acbc:	bf18      	it	ne
 800acbe:	2301      	movne	r3, #1
 800acc0:	0692      	lsls	r2, r2, #26
 800acc2:	d42b      	bmi.n	800ad1c <_printf_common+0xb0>
 800acc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc8:	4649      	mov	r1, r9
 800acca:	4638      	mov	r0, r7
 800accc:	47c0      	blx	r8
 800acce:	3001      	adds	r0, #1
 800acd0:	d01e      	beq.n	800ad10 <_printf_common+0xa4>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	68e5      	ldr	r5, [r4, #12]
 800acd6:	6832      	ldr	r2, [r6, #0]
 800acd8:	f003 0306 	and.w	r3, r3, #6
 800acdc:	2b04      	cmp	r3, #4
 800acde:	bf08      	it	eq
 800ace0:	1aad      	subeq	r5, r5, r2
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	6922      	ldr	r2, [r4, #16]
 800ace6:	bf0c      	ite	eq
 800ace8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acec:	2500      	movne	r5, #0
 800acee:	4293      	cmp	r3, r2
 800acf0:	bfc4      	itt	gt
 800acf2:	1a9b      	subgt	r3, r3, r2
 800acf4:	18ed      	addgt	r5, r5, r3
 800acf6:	2600      	movs	r6, #0
 800acf8:	341a      	adds	r4, #26
 800acfa:	42b5      	cmp	r5, r6
 800acfc:	d11a      	bne.n	800ad34 <_printf_common+0xc8>
 800acfe:	2000      	movs	r0, #0
 800ad00:	e008      	b.n	800ad14 <_printf_common+0xa8>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4652      	mov	r2, sl
 800ad06:	4649      	mov	r1, r9
 800ad08:	4638      	mov	r0, r7
 800ad0a:	47c0      	blx	r8
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d103      	bne.n	800ad18 <_printf_common+0xac>
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad18:	3501      	adds	r5, #1
 800ad1a:	e7c6      	b.n	800acaa <_printf_common+0x3e>
 800ad1c:	18e1      	adds	r1, r4, r3
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	2030      	movs	r0, #48	; 0x30
 800ad22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad26:	4422      	add	r2, r4
 800ad28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad30:	3302      	adds	r3, #2
 800ad32:	e7c7      	b.n	800acc4 <_printf_common+0x58>
 800ad34:	2301      	movs	r3, #1
 800ad36:	4622      	mov	r2, r4
 800ad38:	4649      	mov	r1, r9
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	47c0      	blx	r8
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d0e6      	beq.n	800ad10 <_printf_common+0xa4>
 800ad42:	3601      	adds	r6, #1
 800ad44:	e7d9      	b.n	800acfa <_printf_common+0x8e>
	...

0800ad48 <_printf_i>:
 800ad48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad4c:	7e0f      	ldrb	r7, [r1, #24]
 800ad4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad50:	2f78      	cmp	r7, #120	; 0x78
 800ad52:	4691      	mov	r9, r2
 800ad54:	4680      	mov	r8, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	469a      	mov	sl, r3
 800ad5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad5e:	d807      	bhi.n	800ad70 <_printf_i+0x28>
 800ad60:	2f62      	cmp	r7, #98	; 0x62
 800ad62:	d80a      	bhi.n	800ad7a <_printf_i+0x32>
 800ad64:	2f00      	cmp	r7, #0
 800ad66:	f000 80d8 	beq.w	800af1a <_printf_i+0x1d2>
 800ad6a:	2f58      	cmp	r7, #88	; 0x58
 800ad6c:	f000 80a3 	beq.w	800aeb6 <_printf_i+0x16e>
 800ad70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad78:	e03a      	b.n	800adf0 <_printf_i+0xa8>
 800ad7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad7e:	2b15      	cmp	r3, #21
 800ad80:	d8f6      	bhi.n	800ad70 <_printf_i+0x28>
 800ad82:	a101      	add	r1, pc, #4	; (adr r1, 800ad88 <_printf_i+0x40>)
 800ad84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad88:	0800ade1 	.word	0x0800ade1
 800ad8c:	0800adf5 	.word	0x0800adf5
 800ad90:	0800ad71 	.word	0x0800ad71
 800ad94:	0800ad71 	.word	0x0800ad71
 800ad98:	0800ad71 	.word	0x0800ad71
 800ad9c:	0800ad71 	.word	0x0800ad71
 800ada0:	0800adf5 	.word	0x0800adf5
 800ada4:	0800ad71 	.word	0x0800ad71
 800ada8:	0800ad71 	.word	0x0800ad71
 800adac:	0800ad71 	.word	0x0800ad71
 800adb0:	0800ad71 	.word	0x0800ad71
 800adb4:	0800af01 	.word	0x0800af01
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800aee3 	.word	0x0800aee3
 800adc0:	0800ad71 	.word	0x0800ad71
 800adc4:	0800ad71 	.word	0x0800ad71
 800adc8:	0800af23 	.word	0x0800af23
 800adcc:	0800ad71 	.word	0x0800ad71
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ad71 	.word	0x0800ad71
 800add8:	0800ad71 	.word	0x0800ad71
 800addc:	0800aeeb 	.word	0x0800aeeb
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	1d1a      	adds	r2, r3, #4
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	602a      	str	r2, [r5, #0]
 800ade8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0a3      	b.n	800af3c <_printf_i+0x1f4>
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	6829      	ldr	r1, [r5, #0]
 800adf8:	0606      	lsls	r6, r0, #24
 800adfa:	f101 0304 	add.w	r3, r1, #4
 800adfe:	d50a      	bpl.n	800ae16 <_printf_i+0xce>
 800ae00:	680e      	ldr	r6, [r1, #0]
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	2e00      	cmp	r6, #0
 800ae06:	da03      	bge.n	800ae10 <_printf_i+0xc8>
 800ae08:	232d      	movs	r3, #45	; 0x2d
 800ae0a:	4276      	negs	r6, r6
 800ae0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae10:	485e      	ldr	r0, [pc, #376]	; (800af8c <_printf_i+0x244>)
 800ae12:	230a      	movs	r3, #10
 800ae14:	e019      	b.n	800ae4a <_printf_i+0x102>
 800ae16:	680e      	ldr	r6, [r1, #0]
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae1e:	bf18      	it	ne
 800ae20:	b236      	sxthne	r6, r6
 800ae22:	e7ef      	b.n	800ae04 <_printf_i+0xbc>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1d19      	adds	r1, r3, #4
 800ae2a:	6029      	str	r1, [r5, #0]
 800ae2c:	0601      	lsls	r1, r0, #24
 800ae2e:	d501      	bpl.n	800ae34 <_printf_i+0xec>
 800ae30:	681e      	ldr	r6, [r3, #0]
 800ae32:	e002      	b.n	800ae3a <_printf_i+0xf2>
 800ae34:	0646      	lsls	r6, r0, #25
 800ae36:	d5fb      	bpl.n	800ae30 <_printf_i+0xe8>
 800ae38:	881e      	ldrh	r6, [r3, #0]
 800ae3a:	4854      	ldr	r0, [pc, #336]	; (800af8c <_printf_i+0x244>)
 800ae3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae3e:	bf0c      	ite	eq
 800ae40:	2308      	moveq	r3, #8
 800ae42:	230a      	movne	r3, #10
 800ae44:	2100      	movs	r1, #0
 800ae46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae4a:	6865      	ldr	r5, [r4, #4]
 800ae4c:	60a5      	str	r5, [r4, #8]
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	bfa2      	ittt	ge
 800ae52:	6821      	ldrge	r1, [r4, #0]
 800ae54:	f021 0104 	bicge.w	r1, r1, #4
 800ae58:	6021      	strge	r1, [r4, #0]
 800ae5a:	b90e      	cbnz	r6, 800ae60 <_printf_i+0x118>
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	d04d      	beq.n	800aefc <_printf_i+0x1b4>
 800ae60:	4615      	mov	r5, r2
 800ae62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae66:	fb03 6711 	mls	r7, r3, r1, r6
 800ae6a:	5dc7      	ldrb	r7, [r0, r7]
 800ae6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae70:	4637      	mov	r7, r6
 800ae72:	42bb      	cmp	r3, r7
 800ae74:	460e      	mov	r6, r1
 800ae76:	d9f4      	bls.n	800ae62 <_printf_i+0x11a>
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d10b      	bne.n	800ae94 <_printf_i+0x14c>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	07de      	lsls	r6, r3, #31
 800ae80:	d508      	bpl.n	800ae94 <_printf_i+0x14c>
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	4299      	cmp	r1, r3
 800ae88:	bfde      	ittt	le
 800ae8a:	2330      	movle	r3, #48	; 0x30
 800ae8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae94:	1b52      	subs	r2, r2, r5
 800ae96:	6122      	str	r2, [r4, #16]
 800ae98:	f8cd a000 	str.w	sl, [sp]
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	aa03      	add	r2, sp, #12
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fee2 	bl	800ac6c <_printf_common>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d14c      	bne.n	800af46 <_printf_i+0x1fe>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb0:	b004      	add	sp, #16
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	4835      	ldr	r0, [pc, #212]	; (800af8c <_printf_i+0x244>)
 800aeb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aebc:	6829      	ldr	r1, [r5, #0]
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	f851 6b04 	ldr.w	r6, [r1], #4
 800aec4:	6029      	str	r1, [r5, #0]
 800aec6:	061d      	lsls	r5, r3, #24
 800aec8:	d514      	bpl.n	800aef4 <_printf_i+0x1ac>
 800aeca:	07df      	lsls	r7, r3, #31
 800aecc:	bf44      	itt	mi
 800aece:	f043 0320 	orrmi.w	r3, r3, #32
 800aed2:	6023      	strmi	r3, [r4, #0]
 800aed4:	b91e      	cbnz	r6, 800aede <_printf_i+0x196>
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	f023 0320 	bic.w	r3, r3, #32
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	2310      	movs	r3, #16
 800aee0:	e7b0      	b.n	800ae44 <_printf_i+0xfc>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	f043 0320 	orr.w	r3, r3, #32
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	2378      	movs	r3, #120	; 0x78
 800aeec:	4828      	ldr	r0, [pc, #160]	; (800af90 <_printf_i+0x248>)
 800aeee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aef2:	e7e3      	b.n	800aebc <_printf_i+0x174>
 800aef4:	0659      	lsls	r1, r3, #25
 800aef6:	bf48      	it	mi
 800aef8:	b2b6      	uxthmi	r6, r6
 800aefa:	e7e6      	b.n	800aeca <_printf_i+0x182>
 800aefc:	4615      	mov	r5, r2
 800aefe:	e7bb      	b.n	800ae78 <_printf_i+0x130>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	6826      	ldr	r6, [r4, #0]
 800af04:	6961      	ldr	r1, [r4, #20]
 800af06:	1d18      	adds	r0, r3, #4
 800af08:	6028      	str	r0, [r5, #0]
 800af0a:	0635      	lsls	r5, r6, #24
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	d501      	bpl.n	800af14 <_printf_i+0x1cc>
 800af10:	6019      	str	r1, [r3, #0]
 800af12:	e002      	b.n	800af1a <_printf_i+0x1d2>
 800af14:	0670      	lsls	r0, r6, #25
 800af16:	d5fb      	bpl.n	800af10 <_printf_i+0x1c8>
 800af18:	8019      	strh	r1, [r3, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	4615      	mov	r5, r2
 800af20:	e7ba      	b.n	800ae98 <_printf_i+0x150>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	1d1a      	adds	r2, r3, #4
 800af26:	602a      	str	r2, [r5, #0]
 800af28:	681d      	ldr	r5, [r3, #0]
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4628      	mov	r0, r5
 800af30:	f7f5 f94e 	bl	80001d0 <memchr>
 800af34:	b108      	cbz	r0, 800af3a <_printf_i+0x1f2>
 800af36:	1b40      	subs	r0, r0, r5
 800af38:	6060      	str	r0, [r4, #4]
 800af3a:	6863      	ldr	r3, [r4, #4]
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	2300      	movs	r3, #0
 800af40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af44:	e7a8      	b.n	800ae98 <_printf_i+0x150>
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	462a      	mov	r2, r5
 800af4a:	4649      	mov	r1, r9
 800af4c:	4640      	mov	r0, r8
 800af4e:	47d0      	blx	sl
 800af50:	3001      	adds	r0, #1
 800af52:	d0ab      	beq.n	800aeac <_printf_i+0x164>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	079b      	lsls	r3, r3, #30
 800af58:	d413      	bmi.n	800af82 <_printf_i+0x23a>
 800af5a:	68e0      	ldr	r0, [r4, #12]
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	4298      	cmp	r0, r3
 800af60:	bfb8      	it	lt
 800af62:	4618      	movlt	r0, r3
 800af64:	e7a4      	b.n	800aeb0 <_printf_i+0x168>
 800af66:	2301      	movs	r3, #1
 800af68:	4632      	mov	r2, r6
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	47d0      	blx	sl
 800af70:	3001      	adds	r0, #1
 800af72:	d09b      	beq.n	800aeac <_printf_i+0x164>
 800af74:	3501      	adds	r5, #1
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	9903      	ldr	r1, [sp, #12]
 800af7a:	1a5b      	subs	r3, r3, r1
 800af7c:	42ab      	cmp	r3, r5
 800af7e:	dcf2      	bgt.n	800af66 <_printf_i+0x21e>
 800af80:	e7eb      	b.n	800af5a <_printf_i+0x212>
 800af82:	2500      	movs	r5, #0
 800af84:	f104 0619 	add.w	r6, r4, #25
 800af88:	e7f5      	b.n	800af76 <_printf_i+0x22e>
 800af8a:	bf00      	nop
 800af8c:	0800b92f 	.word	0x0800b92f
 800af90:	0800b940 	.word	0x0800b940

0800af94 <__swbuf_r>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	460e      	mov	r6, r1
 800af98:	4614      	mov	r4, r2
 800af9a:	4605      	mov	r5, r0
 800af9c:	b118      	cbz	r0, 800afa6 <__swbuf_r+0x12>
 800af9e:	6983      	ldr	r3, [r0, #24]
 800afa0:	b90b      	cbnz	r3, 800afa6 <__swbuf_r+0x12>
 800afa2:	f000 f9d9 	bl	800b358 <__sinit>
 800afa6:	4b21      	ldr	r3, [pc, #132]	; (800b02c <__swbuf_r+0x98>)
 800afa8:	429c      	cmp	r4, r3
 800afaa:	d12b      	bne.n	800b004 <__swbuf_r+0x70>
 800afac:	686c      	ldr	r4, [r5, #4]
 800afae:	69a3      	ldr	r3, [r4, #24]
 800afb0:	60a3      	str	r3, [r4, #8]
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	071a      	lsls	r2, r3, #28
 800afb6:	d52f      	bpl.n	800b018 <__swbuf_r+0x84>
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	b36b      	cbz	r3, 800b018 <__swbuf_r+0x84>
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	6820      	ldr	r0, [r4, #0]
 800afc0:	1ac0      	subs	r0, r0, r3
 800afc2:	6963      	ldr	r3, [r4, #20]
 800afc4:	b2f6      	uxtb	r6, r6
 800afc6:	4283      	cmp	r3, r0
 800afc8:	4637      	mov	r7, r6
 800afca:	dc04      	bgt.n	800afd6 <__swbuf_r+0x42>
 800afcc:	4621      	mov	r1, r4
 800afce:	4628      	mov	r0, r5
 800afd0:	f000 f92e 	bl	800b230 <_fflush_r>
 800afd4:	bb30      	cbnz	r0, 800b024 <__swbuf_r+0x90>
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	3b01      	subs	r3, #1
 800afda:	60a3      	str	r3, [r4, #8]
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	6022      	str	r2, [r4, #0]
 800afe2:	701e      	strb	r6, [r3, #0]
 800afe4:	6963      	ldr	r3, [r4, #20]
 800afe6:	3001      	adds	r0, #1
 800afe8:	4283      	cmp	r3, r0
 800afea:	d004      	beq.n	800aff6 <__swbuf_r+0x62>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	07db      	lsls	r3, r3, #31
 800aff0:	d506      	bpl.n	800b000 <__swbuf_r+0x6c>
 800aff2:	2e0a      	cmp	r6, #10
 800aff4:	d104      	bne.n	800b000 <__swbuf_r+0x6c>
 800aff6:	4621      	mov	r1, r4
 800aff8:	4628      	mov	r0, r5
 800affa:	f000 f919 	bl	800b230 <_fflush_r>
 800affe:	b988      	cbnz	r0, 800b024 <__swbuf_r+0x90>
 800b000:	4638      	mov	r0, r7
 800b002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b004:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <__swbuf_r+0x9c>)
 800b006:	429c      	cmp	r4, r3
 800b008:	d101      	bne.n	800b00e <__swbuf_r+0x7a>
 800b00a:	68ac      	ldr	r4, [r5, #8]
 800b00c:	e7cf      	b.n	800afae <__swbuf_r+0x1a>
 800b00e:	4b09      	ldr	r3, [pc, #36]	; (800b034 <__swbuf_r+0xa0>)
 800b010:	429c      	cmp	r4, r3
 800b012:	bf08      	it	eq
 800b014:	68ec      	ldreq	r4, [r5, #12]
 800b016:	e7ca      	b.n	800afae <__swbuf_r+0x1a>
 800b018:	4621      	mov	r1, r4
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 f80c 	bl	800b038 <__swsetup_r>
 800b020:	2800      	cmp	r0, #0
 800b022:	d0cb      	beq.n	800afbc <__swbuf_r+0x28>
 800b024:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b028:	e7ea      	b.n	800b000 <__swbuf_r+0x6c>
 800b02a:	bf00      	nop
 800b02c:	0800b974 	.word	0x0800b974
 800b030:	0800b994 	.word	0x0800b994
 800b034:	0800b954 	.word	0x0800b954

0800b038 <__swsetup_r>:
 800b038:	4b32      	ldr	r3, [pc, #200]	; (800b104 <__swsetup_r+0xcc>)
 800b03a:	b570      	push	{r4, r5, r6, lr}
 800b03c:	681d      	ldr	r5, [r3, #0]
 800b03e:	4606      	mov	r6, r0
 800b040:	460c      	mov	r4, r1
 800b042:	b125      	cbz	r5, 800b04e <__swsetup_r+0x16>
 800b044:	69ab      	ldr	r3, [r5, #24]
 800b046:	b913      	cbnz	r3, 800b04e <__swsetup_r+0x16>
 800b048:	4628      	mov	r0, r5
 800b04a:	f000 f985 	bl	800b358 <__sinit>
 800b04e:	4b2e      	ldr	r3, [pc, #184]	; (800b108 <__swsetup_r+0xd0>)
 800b050:	429c      	cmp	r4, r3
 800b052:	d10f      	bne.n	800b074 <__swsetup_r+0x3c>
 800b054:	686c      	ldr	r4, [r5, #4]
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b05c:	0719      	lsls	r1, r3, #28
 800b05e:	d42c      	bmi.n	800b0ba <__swsetup_r+0x82>
 800b060:	06dd      	lsls	r5, r3, #27
 800b062:	d411      	bmi.n	800b088 <__swsetup_r+0x50>
 800b064:	2309      	movs	r3, #9
 800b066:	6033      	str	r3, [r6, #0]
 800b068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b072:	e03e      	b.n	800b0f2 <__swsetup_r+0xba>
 800b074:	4b25      	ldr	r3, [pc, #148]	; (800b10c <__swsetup_r+0xd4>)
 800b076:	429c      	cmp	r4, r3
 800b078:	d101      	bne.n	800b07e <__swsetup_r+0x46>
 800b07a:	68ac      	ldr	r4, [r5, #8]
 800b07c:	e7eb      	b.n	800b056 <__swsetup_r+0x1e>
 800b07e:	4b24      	ldr	r3, [pc, #144]	; (800b110 <__swsetup_r+0xd8>)
 800b080:	429c      	cmp	r4, r3
 800b082:	bf08      	it	eq
 800b084:	68ec      	ldreq	r4, [r5, #12]
 800b086:	e7e6      	b.n	800b056 <__swsetup_r+0x1e>
 800b088:	0758      	lsls	r0, r3, #29
 800b08a:	d512      	bpl.n	800b0b2 <__swsetup_r+0x7a>
 800b08c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b08e:	b141      	cbz	r1, 800b0a2 <__swsetup_r+0x6a>
 800b090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b094:	4299      	cmp	r1, r3
 800b096:	d002      	beq.n	800b09e <__swsetup_r+0x66>
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff fac9 	bl	800a630 <_free_r>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b0a2:	89a3      	ldrh	r3, [r4, #12]
 800b0a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	6063      	str	r3, [r4, #4]
 800b0ae:	6923      	ldr	r3, [r4, #16]
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	f043 0308 	orr.w	r3, r3, #8
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	b94b      	cbnz	r3, 800b0d2 <__swsetup_r+0x9a>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0c8:	d003      	beq.n	800b0d2 <__swsetup_r+0x9a>
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f000 fa09 	bl	800b4e4 <__smakebuf_r>
 800b0d2:	89a0      	ldrh	r0, [r4, #12]
 800b0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0d8:	f010 0301 	ands.w	r3, r0, #1
 800b0dc:	d00a      	beq.n	800b0f4 <__swsetup_r+0xbc>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60a3      	str	r3, [r4, #8]
 800b0e2:	6963      	ldr	r3, [r4, #20]
 800b0e4:	425b      	negs	r3, r3
 800b0e6:	61a3      	str	r3, [r4, #24]
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	b943      	cbnz	r3, 800b0fe <__swsetup_r+0xc6>
 800b0ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0f0:	d1ba      	bne.n	800b068 <__swsetup_r+0x30>
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	0781      	lsls	r1, r0, #30
 800b0f6:	bf58      	it	pl
 800b0f8:	6963      	ldrpl	r3, [r4, #20]
 800b0fa:	60a3      	str	r3, [r4, #8]
 800b0fc:	e7f4      	b.n	800b0e8 <__swsetup_r+0xb0>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e7f7      	b.n	800b0f2 <__swsetup_r+0xba>
 800b102:	bf00      	nop
 800b104:	20000020 	.word	0x20000020
 800b108:	0800b974 	.word	0x0800b974
 800b10c:	0800b994 	.word	0x0800b994
 800b110:	0800b954 	.word	0x0800b954

0800b114 <abort>:
 800b114:	b508      	push	{r3, lr}
 800b116:	2006      	movs	r0, #6
 800b118:	f000 fa4c 	bl	800b5b4 <raise>
 800b11c:	2001      	movs	r0, #1
 800b11e:	f7ff f955 	bl	800a3cc <_exit>
	...

0800b124 <__sflush_r>:
 800b124:	898a      	ldrh	r2, [r1, #12]
 800b126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12a:	4605      	mov	r5, r0
 800b12c:	0710      	lsls	r0, r2, #28
 800b12e:	460c      	mov	r4, r1
 800b130:	d458      	bmi.n	800b1e4 <__sflush_r+0xc0>
 800b132:	684b      	ldr	r3, [r1, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	dc05      	bgt.n	800b144 <__sflush_r+0x20>
 800b138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc02      	bgt.n	800b144 <__sflush_r+0x20>
 800b13e:	2000      	movs	r0, #0
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b146:	2e00      	cmp	r6, #0
 800b148:	d0f9      	beq.n	800b13e <__sflush_r+0x1a>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b150:	682f      	ldr	r7, [r5, #0]
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	d032      	beq.n	800b1bc <__sflush_r+0x98>
 800b156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	075a      	lsls	r2, r3, #29
 800b15c:	d505      	bpl.n	800b16a <__sflush_r+0x46>
 800b15e:	6863      	ldr	r3, [r4, #4]
 800b160:	1ac0      	subs	r0, r0, r3
 800b162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b164:	b10b      	cbz	r3, 800b16a <__sflush_r+0x46>
 800b166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b168:	1ac0      	subs	r0, r0, r3
 800b16a:	2300      	movs	r3, #0
 800b16c:	4602      	mov	r2, r0
 800b16e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b170:	6a21      	ldr	r1, [r4, #32]
 800b172:	4628      	mov	r0, r5
 800b174:	47b0      	blx	r6
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	d106      	bne.n	800b18a <__sflush_r+0x66>
 800b17c:	6829      	ldr	r1, [r5, #0]
 800b17e:	291d      	cmp	r1, #29
 800b180:	d82c      	bhi.n	800b1dc <__sflush_r+0xb8>
 800b182:	4a2a      	ldr	r2, [pc, #168]	; (800b22c <__sflush_r+0x108>)
 800b184:	40ca      	lsrs	r2, r1
 800b186:	07d6      	lsls	r6, r2, #31
 800b188:	d528      	bpl.n	800b1dc <__sflush_r+0xb8>
 800b18a:	2200      	movs	r2, #0
 800b18c:	6062      	str	r2, [r4, #4]
 800b18e:	04d9      	lsls	r1, r3, #19
 800b190:	6922      	ldr	r2, [r4, #16]
 800b192:	6022      	str	r2, [r4, #0]
 800b194:	d504      	bpl.n	800b1a0 <__sflush_r+0x7c>
 800b196:	1c42      	adds	r2, r0, #1
 800b198:	d101      	bne.n	800b19e <__sflush_r+0x7a>
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	b903      	cbnz	r3, 800b1a0 <__sflush_r+0x7c>
 800b19e:	6560      	str	r0, [r4, #84]	; 0x54
 800b1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1a2:	602f      	str	r7, [r5, #0]
 800b1a4:	2900      	cmp	r1, #0
 800b1a6:	d0ca      	beq.n	800b13e <__sflush_r+0x1a>
 800b1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ac:	4299      	cmp	r1, r3
 800b1ae:	d002      	beq.n	800b1b6 <__sflush_r+0x92>
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f7ff fa3d 	bl	800a630 <_free_r>
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	6360      	str	r0, [r4, #52]	; 0x34
 800b1ba:	e7c1      	b.n	800b140 <__sflush_r+0x1c>
 800b1bc:	6a21      	ldr	r1, [r4, #32]
 800b1be:	2301      	movs	r3, #1
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b0      	blx	r6
 800b1c4:	1c41      	adds	r1, r0, #1
 800b1c6:	d1c7      	bne.n	800b158 <__sflush_r+0x34>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0c4      	beq.n	800b158 <__sflush_r+0x34>
 800b1ce:	2b1d      	cmp	r3, #29
 800b1d0:	d001      	beq.n	800b1d6 <__sflush_r+0xb2>
 800b1d2:	2b16      	cmp	r3, #22
 800b1d4:	d101      	bne.n	800b1da <__sflush_r+0xb6>
 800b1d6:	602f      	str	r7, [r5, #0]
 800b1d8:	e7b1      	b.n	800b13e <__sflush_r+0x1a>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	e7ad      	b.n	800b140 <__sflush_r+0x1c>
 800b1e4:	690f      	ldr	r7, [r1, #16]
 800b1e6:	2f00      	cmp	r7, #0
 800b1e8:	d0a9      	beq.n	800b13e <__sflush_r+0x1a>
 800b1ea:	0793      	lsls	r3, r2, #30
 800b1ec:	680e      	ldr	r6, [r1, #0]
 800b1ee:	bf08      	it	eq
 800b1f0:	694b      	ldreq	r3, [r1, #20]
 800b1f2:	600f      	str	r7, [r1, #0]
 800b1f4:	bf18      	it	ne
 800b1f6:	2300      	movne	r3, #0
 800b1f8:	eba6 0807 	sub.w	r8, r6, r7
 800b1fc:	608b      	str	r3, [r1, #8]
 800b1fe:	f1b8 0f00 	cmp.w	r8, #0
 800b202:	dd9c      	ble.n	800b13e <__sflush_r+0x1a>
 800b204:	6a21      	ldr	r1, [r4, #32]
 800b206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b208:	4643      	mov	r3, r8
 800b20a:	463a      	mov	r2, r7
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b0      	blx	r6
 800b210:	2800      	cmp	r0, #0
 800b212:	dc06      	bgt.n	800b222 <__sflush_r+0xfe>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b220:	e78e      	b.n	800b140 <__sflush_r+0x1c>
 800b222:	4407      	add	r7, r0
 800b224:	eba8 0800 	sub.w	r8, r8, r0
 800b228:	e7e9      	b.n	800b1fe <__sflush_r+0xda>
 800b22a:	bf00      	nop
 800b22c:	20400001 	.word	0x20400001

0800b230 <_fflush_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	690b      	ldr	r3, [r1, #16]
 800b234:	4605      	mov	r5, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b913      	cbnz	r3, 800b240 <_fflush_r+0x10>
 800b23a:	2500      	movs	r5, #0
 800b23c:	4628      	mov	r0, r5
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	b118      	cbz	r0, 800b24a <_fflush_r+0x1a>
 800b242:	6983      	ldr	r3, [r0, #24]
 800b244:	b90b      	cbnz	r3, 800b24a <_fflush_r+0x1a>
 800b246:	f000 f887 	bl	800b358 <__sinit>
 800b24a:	4b14      	ldr	r3, [pc, #80]	; (800b29c <_fflush_r+0x6c>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	d11b      	bne.n	800b288 <_fflush_r+0x58>
 800b250:	686c      	ldr	r4, [r5, #4]
 800b252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0ef      	beq.n	800b23a <_fflush_r+0xa>
 800b25a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b25c:	07d0      	lsls	r0, r2, #31
 800b25e:	d404      	bmi.n	800b26a <_fflush_r+0x3a>
 800b260:	0599      	lsls	r1, r3, #22
 800b262:	d402      	bmi.n	800b26a <_fflush_r+0x3a>
 800b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b266:	f000 f915 	bl	800b494 <__retarget_lock_acquire_recursive>
 800b26a:	4628      	mov	r0, r5
 800b26c:	4621      	mov	r1, r4
 800b26e:	f7ff ff59 	bl	800b124 <__sflush_r>
 800b272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b274:	07da      	lsls	r2, r3, #31
 800b276:	4605      	mov	r5, r0
 800b278:	d4e0      	bmi.n	800b23c <_fflush_r+0xc>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	059b      	lsls	r3, r3, #22
 800b27e:	d4dd      	bmi.n	800b23c <_fflush_r+0xc>
 800b280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b282:	f000 f908 	bl	800b496 <__retarget_lock_release_recursive>
 800b286:	e7d9      	b.n	800b23c <_fflush_r+0xc>
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <_fflush_r+0x70>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d101      	bne.n	800b292 <_fflush_r+0x62>
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	e7df      	b.n	800b252 <_fflush_r+0x22>
 800b292:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <_fflush_r+0x74>)
 800b294:	429c      	cmp	r4, r3
 800b296:	bf08      	it	eq
 800b298:	68ec      	ldreq	r4, [r5, #12]
 800b29a:	e7da      	b.n	800b252 <_fflush_r+0x22>
 800b29c:	0800b974 	.word	0x0800b974
 800b2a0:	0800b994 	.word	0x0800b994
 800b2a4:	0800b954 	.word	0x0800b954

0800b2a8 <std>:
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2b6:	6083      	str	r3, [r0, #8]
 800b2b8:	8181      	strh	r1, [r0, #12]
 800b2ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b2bc:	81c2      	strh	r2, [r0, #14]
 800b2be:	6183      	str	r3, [r0, #24]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	2208      	movs	r2, #8
 800b2c4:	305c      	adds	r0, #92	; 0x5c
 800b2c6:	f7ff f9ab 	bl	800a620 <memset>
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <std+0x38>)
 800b2cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <std+0x3c>)
 800b2d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2d2:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <std+0x40>)
 800b2d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2d6:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <std+0x44>)
 800b2d8:	6224      	str	r4, [r4, #32]
 800b2da:	6323      	str	r3, [r4, #48]	; 0x30
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800b5ed 	.word	0x0800b5ed
 800b2e4:	0800b60f 	.word	0x0800b60f
 800b2e8:	0800b647 	.word	0x0800b647
 800b2ec:	0800b66b 	.word	0x0800b66b

0800b2f0 <_cleanup_r>:
 800b2f0:	4901      	ldr	r1, [pc, #4]	; (800b2f8 <_cleanup_r+0x8>)
 800b2f2:	f000 b8af 	b.w	800b454 <_fwalk_reent>
 800b2f6:	bf00      	nop
 800b2f8:	0800b231 	.word	0x0800b231

0800b2fc <__sfmoreglue>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	2268      	movs	r2, #104	; 0x68
 800b300:	1e4d      	subs	r5, r1, #1
 800b302:	4355      	muls	r5, r2
 800b304:	460e      	mov	r6, r1
 800b306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b30a:	f7ff f9fd 	bl	800a708 <_malloc_r>
 800b30e:	4604      	mov	r4, r0
 800b310:	b140      	cbz	r0, 800b324 <__sfmoreglue+0x28>
 800b312:	2100      	movs	r1, #0
 800b314:	e9c0 1600 	strd	r1, r6, [r0]
 800b318:	300c      	adds	r0, #12
 800b31a:	60a0      	str	r0, [r4, #8]
 800b31c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b320:	f7ff f97e 	bl	800a620 <memset>
 800b324:	4620      	mov	r0, r4
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__sfp_lock_acquire>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sfp_lock_acquire+0x8>)
 800b32a:	f000 b8b3 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	2000395d 	.word	0x2000395d

0800b334 <__sfp_lock_release>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sfp_lock_release+0x8>)
 800b336:	f000 b8ae 	b.w	800b496 <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	2000395d 	.word	0x2000395d

0800b340 <__sinit_lock_acquire>:
 800b340:	4801      	ldr	r0, [pc, #4]	; (800b348 <__sinit_lock_acquire+0x8>)
 800b342:	f000 b8a7 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	2000395e 	.word	0x2000395e

0800b34c <__sinit_lock_release>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__sinit_lock_release+0x8>)
 800b34e:	f000 b8a2 	b.w	800b496 <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	2000395e 	.word	0x2000395e

0800b358 <__sinit>:
 800b358:	b510      	push	{r4, lr}
 800b35a:	4604      	mov	r4, r0
 800b35c:	f7ff fff0 	bl	800b340 <__sinit_lock_acquire>
 800b360:	69a3      	ldr	r3, [r4, #24]
 800b362:	b11b      	cbz	r3, 800b36c <__sinit+0x14>
 800b364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b368:	f7ff bff0 	b.w	800b34c <__sinit_lock_release>
 800b36c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b370:	6523      	str	r3, [r4, #80]	; 0x50
 800b372:	4b13      	ldr	r3, [pc, #76]	; (800b3c0 <__sinit+0x68>)
 800b374:	4a13      	ldr	r2, [pc, #76]	; (800b3c4 <__sinit+0x6c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	62a2      	str	r2, [r4, #40]	; 0x28
 800b37a:	42a3      	cmp	r3, r4
 800b37c:	bf04      	itt	eq
 800b37e:	2301      	moveq	r3, #1
 800b380:	61a3      	streq	r3, [r4, #24]
 800b382:	4620      	mov	r0, r4
 800b384:	f000 f820 	bl	800b3c8 <__sfp>
 800b388:	6060      	str	r0, [r4, #4]
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f81c 	bl	800b3c8 <__sfp>
 800b390:	60a0      	str	r0, [r4, #8]
 800b392:	4620      	mov	r0, r4
 800b394:	f000 f818 	bl	800b3c8 <__sfp>
 800b398:	2200      	movs	r2, #0
 800b39a:	60e0      	str	r0, [r4, #12]
 800b39c:	2104      	movs	r1, #4
 800b39e:	6860      	ldr	r0, [r4, #4]
 800b3a0:	f7ff ff82 	bl	800b2a8 <std>
 800b3a4:	68a0      	ldr	r0, [r4, #8]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	2109      	movs	r1, #9
 800b3aa:	f7ff ff7d 	bl	800b2a8 <std>
 800b3ae:	68e0      	ldr	r0, [r4, #12]
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	2112      	movs	r1, #18
 800b3b4:	f7ff ff78 	bl	800b2a8 <std>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	61a3      	str	r3, [r4, #24]
 800b3bc:	e7d2      	b.n	800b364 <__sinit+0xc>
 800b3be:	bf00      	nop
 800b3c0:	0800b86c 	.word	0x0800b86c
 800b3c4:	0800b2f1 	.word	0x0800b2f1

0800b3c8 <__sfp>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	4607      	mov	r7, r0
 800b3cc:	f7ff ffac 	bl	800b328 <__sfp_lock_acquire>
 800b3d0:	4b1e      	ldr	r3, [pc, #120]	; (800b44c <__sfp+0x84>)
 800b3d2:	681e      	ldr	r6, [r3, #0]
 800b3d4:	69b3      	ldr	r3, [r6, #24]
 800b3d6:	b913      	cbnz	r3, 800b3de <__sfp+0x16>
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffbd 	bl	800b358 <__sinit>
 800b3de:	3648      	adds	r6, #72	; 0x48
 800b3e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	d503      	bpl.n	800b3f0 <__sfp+0x28>
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	b30b      	cbz	r3, 800b430 <__sfp+0x68>
 800b3ec:	6836      	ldr	r6, [r6, #0]
 800b3ee:	e7f7      	b.n	800b3e0 <__sfp+0x18>
 800b3f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3f4:	b9d5      	cbnz	r5, 800b42c <__sfp+0x64>
 800b3f6:	4b16      	ldr	r3, [pc, #88]	; (800b450 <__sfp+0x88>)
 800b3f8:	60e3      	str	r3, [r4, #12]
 800b3fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b400:	f000 f847 	bl	800b492 <__retarget_lock_init_recursive>
 800b404:	f7ff ff96 	bl	800b334 <__sfp_lock_release>
 800b408:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b40c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b410:	6025      	str	r5, [r4, #0]
 800b412:	61a5      	str	r5, [r4, #24]
 800b414:	2208      	movs	r2, #8
 800b416:	4629      	mov	r1, r5
 800b418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b41c:	f7ff f900 	bl	800a620 <memset>
 800b420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b428:	4620      	mov	r0, r4
 800b42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b42c:	3468      	adds	r4, #104	; 0x68
 800b42e:	e7d9      	b.n	800b3e4 <__sfp+0x1c>
 800b430:	2104      	movs	r1, #4
 800b432:	4638      	mov	r0, r7
 800b434:	f7ff ff62 	bl	800b2fc <__sfmoreglue>
 800b438:	4604      	mov	r4, r0
 800b43a:	6030      	str	r0, [r6, #0]
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d1d5      	bne.n	800b3ec <__sfp+0x24>
 800b440:	f7ff ff78 	bl	800b334 <__sfp_lock_release>
 800b444:	230c      	movs	r3, #12
 800b446:	603b      	str	r3, [r7, #0]
 800b448:	e7ee      	b.n	800b428 <__sfp+0x60>
 800b44a:	bf00      	nop
 800b44c:	0800b86c 	.word	0x0800b86c
 800b450:	ffff0001 	.word	0xffff0001

0800b454 <_fwalk_reent>:
 800b454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b458:	4606      	mov	r6, r0
 800b45a:	4688      	mov	r8, r1
 800b45c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b460:	2700      	movs	r7, #0
 800b462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b466:	f1b9 0901 	subs.w	r9, r9, #1
 800b46a:	d505      	bpl.n	800b478 <_fwalk_reent+0x24>
 800b46c:	6824      	ldr	r4, [r4, #0]
 800b46e:	2c00      	cmp	r4, #0
 800b470:	d1f7      	bne.n	800b462 <_fwalk_reent+0xe>
 800b472:	4638      	mov	r0, r7
 800b474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b478:	89ab      	ldrh	r3, [r5, #12]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d907      	bls.n	800b48e <_fwalk_reent+0x3a>
 800b47e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b482:	3301      	adds	r3, #1
 800b484:	d003      	beq.n	800b48e <_fwalk_reent+0x3a>
 800b486:	4629      	mov	r1, r5
 800b488:	4630      	mov	r0, r6
 800b48a:	47c0      	blx	r8
 800b48c:	4307      	orrs	r7, r0
 800b48e:	3568      	adds	r5, #104	; 0x68
 800b490:	e7e9      	b.n	800b466 <_fwalk_reent+0x12>

0800b492 <__retarget_lock_init_recursive>:
 800b492:	4770      	bx	lr

0800b494 <__retarget_lock_acquire_recursive>:
 800b494:	4770      	bx	lr

0800b496 <__retarget_lock_release_recursive>:
 800b496:	4770      	bx	lr

0800b498 <__swhatbuf_r>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	460e      	mov	r6, r1
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	b096      	sub	sp, #88	; 0x58
 800b4a4:	4614      	mov	r4, r2
 800b4a6:	461d      	mov	r5, r3
 800b4a8:	da08      	bge.n	800b4bc <__swhatbuf_r+0x24>
 800b4aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	602a      	str	r2, [r5, #0]
 800b4b2:	061a      	lsls	r2, r3, #24
 800b4b4:	d410      	bmi.n	800b4d8 <__swhatbuf_r+0x40>
 800b4b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ba:	e00e      	b.n	800b4da <__swhatbuf_r+0x42>
 800b4bc:	466a      	mov	r2, sp
 800b4be:	f000 f8fb 	bl	800b6b8 <_fstat_r>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	dbf1      	blt.n	800b4aa <__swhatbuf_r+0x12>
 800b4c6:	9a01      	ldr	r2, [sp, #4]
 800b4c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4d0:	425a      	negs	r2, r3
 800b4d2:	415a      	adcs	r2, r3
 800b4d4:	602a      	str	r2, [r5, #0]
 800b4d6:	e7ee      	b.n	800b4b6 <__swhatbuf_r+0x1e>
 800b4d8:	2340      	movs	r3, #64	; 0x40
 800b4da:	2000      	movs	r0, #0
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	b016      	add	sp, #88	; 0x58
 800b4e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b4e4 <__smakebuf_r>:
 800b4e4:	898b      	ldrh	r3, [r1, #12]
 800b4e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4e8:	079d      	lsls	r5, r3, #30
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	d507      	bpl.n	800b500 <__smakebuf_r+0x1c>
 800b4f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	6163      	str	r3, [r4, #20]
 800b4fc:	b002      	add	sp, #8
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	ab01      	add	r3, sp, #4
 800b502:	466a      	mov	r2, sp
 800b504:	f7ff ffc8 	bl	800b498 <__swhatbuf_r>
 800b508:	9900      	ldr	r1, [sp, #0]
 800b50a:	4605      	mov	r5, r0
 800b50c:	4630      	mov	r0, r6
 800b50e:	f7ff f8fb 	bl	800a708 <_malloc_r>
 800b512:	b948      	cbnz	r0, 800b528 <__smakebuf_r+0x44>
 800b514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b518:	059a      	lsls	r2, r3, #22
 800b51a:	d4ef      	bmi.n	800b4fc <__smakebuf_r+0x18>
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	f043 0302 	orr.w	r3, r3, #2
 800b524:	81a3      	strh	r3, [r4, #12]
 800b526:	e7e3      	b.n	800b4f0 <__smakebuf_r+0xc>
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <__smakebuf_r+0x7c>)
 800b52a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	6020      	str	r0, [r4, #0]
 800b530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b534:	81a3      	strh	r3, [r4, #12]
 800b536:	9b00      	ldr	r3, [sp, #0]
 800b538:	6163      	str	r3, [r4, #20]
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	6120      	str	r0, [r4, #16]
 800b53e:	b15b      	cbz	r3, 800b558 <__smakebuf_r+0x74>
 800b540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b544:	4630      	mov	r0, r6
 800b546:	f000 f8c9 	bl	800b6dc <_isatty_r>
 800b54a:	b128      	cbz	r0, 800b558 <__smakebuf_r+0x74>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	f043 0301 	orr.w	r3, r3, #1
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	89a0      	ldrh	r0, [r4, #12]
 800b55a:	4305      	orrs	r5, r0
 800b55c:	81a5      	strh	r5, [r4, #12]
 800b55e:	e7cd      	b.n	800b4fc <__smakebuf_r+0x18>
 800b560:	0800b2f1 	.word	0x0800b2f1

0800b564 <_raise_r>:
 800b564:	291f      	cmp	r1, #31
 800b566:	b538      	push	{r3, r4, r5, lr}
 800b568:	4604      	mov	r4, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	d904      	bls.n	800b578 <_raise_r+0x14>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b57a:	b112      	cbz	r2, 800b582 <_raise_r+0x1e>
 800b57c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b580:	b94b      	cbnz	r3, 800b596 <_raise_r+0x32>
 800b582:	4620      	mov	r0, r4
 800b584:	f000 f830 	bl	800b5e8 <_getpid_r>
 800b588:	462a      	mov	r2, r5
 800b58a:	4601      	mov	r1, r0
 800b58c:	4620      	mov	r0, r4
 800b58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b592:	f000 b817 	b.w	800b5c4 <_kill_r>
 800b596:	2b01      	cmp	r3, #1
 800b598:	d00a      	beq.n	800b5b0 <_raise_r+0x4c>
 800b59a:	1c59      	adds	r1, r3, #1
 800b59c:	d103      	bne.n	800b5a6 <_raise_r+0x42>
 800b59e:	2316      	movs	r3, #22
 800b5a0:	6003      	str	r3, [r0, #0]
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	e7e7      	b.n	800b576 <_raise_r+0x12>
 800b5a6:	2400      	movs	r4, #0
 800b5a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	4798      	blx	r3
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	e7e0      	b.n	800b576 <_raise_r+0x12>

0800b5b4 <raise>:
 800b5b4:	4b02      	ldr	r3, [pc, #8]	; (800b5c0 <raise+0xc>)
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	f7ff bfd3 	b.w	800b564 <_raise_r>
 800b5be:	bf00      	nop
 800b5c0:	20000020 	.word	0x20000020

0800b5c4 <_kill_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d07      	ldr	r5, [pc, #28]	; (800b5e4 <_kill_r+0x20>)
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	f7fe feeb 	bl	800a3ac <_kill>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	d102      	bne.n	800b5e0 <_kill_r+0x1c>
 800b5da:	682b      	ldr	r3, [r5, #0]
 800b5dc:	b103      	cbz	r3, 800b5e0 <_kill_r+0x1c>
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	bd38      	pop	{r3, r4, r5, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20003958 	.word	0x20003958

0800b5e8 <_getpid_r>:
 800b5e8:	f7fe bed8 	b.w	800a39c <_getpid>

0800b5ec <__sread>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f4:	f000 f894 	bl	800b720 <_read_r>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	bfab      	itete	ge
 800b5fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b600:	181b      	addge	r3, r3, r0
 800b602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b606:	bfac      	ite	ge
 800b608:	6563      	strge	r3, [r4, #84]	; 0x54
 800b60a:	81a3      	strhlt	r3, [r4, #12]
 800b60c:	bd10      	pop	{r4, pc}

0800b60e <__swrite>:
 800b60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b612:	461f      	mov	r7, r3
 800b614:	898b      	ldrh	r3, [r1, #12]
 800b616:	05db      	lsls	r3, r3, #23
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	4616      	mov	r6, r2
 800b61e:	d505      	bpl.n	800b62c <__swrite+0x1e>
 800b620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b624:	2302      	movs	r3, #2
 800b626:	2200      	movs	r2, #0
 800b628:	f000 f868 	bl	800b6fc <_lseek_r>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	4632      	mov	r2, r6
 800b63a:	463b      	mov	r3, r7
 800b63c:	4628      	mov	r0, r5
 800b63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b642:	f000 b817 	b.w	800b674 <_write_r>

0800b646 <__sseek>:
 800b646:	b510      	push	{r4, lr}
 800b648:	460c      	mov	r4, r1
 800b64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64e:	f000 f855 	bl	800b6fc <_lseek_r>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	bf15      	itete	ne
 800b658:	6560      	strne	r0, [r4, #84]	; 0x54
 800b65a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b65e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b662:	81a3      	strheq	r3, [r4, #12]
 800b664:	bf18      	it	ne
 800b666:	81a3      	strhne	r3, [r4, #12]
 800b668:	bd10      	pop	{r4, pc}

0800b66a <__sclose>:
 800b66a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b66e:	f000 b813 	b.w	800b698 <_close_r>
	...

0800b674 <_write_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	; (800b694 <_write_r+0x20>)
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f7fe fec9 	bl	800a41a <_write>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_write_r+0x1e>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_write_r+0x1e>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20003958 	.word	0x20003958

0800b698 <_close_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4d06      	ldr	r5, [pc, #24]	; (800b6b4 <_close_r+0x1c>)
 800b69c:	2300      	movs	r3, #0
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	f7fe fed5 	bl	800a452 <_close>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d102      	bne.n	800b6b2 <_close_r+0x1a>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b103      	cbz	r3, 800b6b2 <_close_r+0x1a>
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	20003958 	.word	0x20003958

0800b6b8 <_fstat_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d07      	ldr	r5, [pc, #28]	; (800b6d8 <_fstat_r+0x20>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	f7fe fed0 	bl	800a46a <_fstat>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	d102      	bne.n	800b6d4 <_fstat_r+0x1c>
 800b6ce:	682b      	ldr	r3, [r5, #0]
 800b6d0:	b103      	cbz	r3, 800b6d4 <_fstat_r+0x1c>
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	bd38      	pop	{r3, r4, r5, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20003958 	.word	0x20003958

0800b6dc <_isatty_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	4d06      	ldr	r5, [pc, #24]	; (800b6f8 <_isatty_r+0x1c>)
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	f7fe fecf 	bl	800a48a <_isatty>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_isatty_r+0x1a>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_isatty_r+0x1a>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	20003958 	.word	0x20003958

0800b6fc <_lseek_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_lseek_r+0x20>)
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	2200      	movs	r2, #0
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7fe fec8 	bl	800a4a0 <_lseek>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_lseek_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_lseek_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	20003958 	.word	0x20003958

0800b720 <_read_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	; (800b740 <_read_r+0x20>)
 800b724:	4604      	mov	r4, r0
 800b726:	4608      	mov	r0, r1
 800b728:	4611      	mov	r1, r2
 800b72a:	2200      	movs	r2, #0
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	f7fe fe56 	bl	800a3e0 <_read>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_read_r+0x1e>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_read_r+0x1e>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	20003958 	.word	0x20003958

0800b744 <_gettimeofday>:
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <_gettimeofday+0xc>)
 800b746:	2258      	movs	r2, #88	; 0x58
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b74e:	4770      	bx	lr
 800b750:	20003958 	.word	0x20003958

0800b754 <_init>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr

0800b760 <_fini>:
 800b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b762:	bf00      	nop
 800b764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b766:	bc08      	pop	{r3}
 800b768:	469e      	mov	lr, r3
 800b76a:	4770      	bx	lr
