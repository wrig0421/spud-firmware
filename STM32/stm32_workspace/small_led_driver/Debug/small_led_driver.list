
small_led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004500  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080046cc  080046cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046cc  080046cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000074  08004748  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004748  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011583  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002456  00000000  00000000  00031627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00033a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000348e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220d0  00000000  00000000  00035628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011be8  00000000  00000000  000576f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15f6  00000000  00000000  000692e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a8d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  0013a92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000074 	.word	0x20000074
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004674 	.word	0x08004674

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000078 	.word	0x20000078
 80001c8:	08004674 	.word	0x08004674

080001cc <ws2812_convert_strip_num_to_strip_bit>:
extern TIM_HandleTypeDef htim2;
extern volatile int datasentflag;


static strip_bit_e ws2812_convert_strip_num_to_strip_bit(strip_num_e strip_num)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	3301      	adds	r3, #1
 80001da:	b2db      	uxtb	r3, r3
}
 80001dc:	4618      	mov	r0, r3
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr

080001e8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(strip_bit_e strip_bit)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	b2db      	uxtb	r3, r3
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <animate_led_get_strip_size>:

static uint16_t animate_led_get_strip_size(const strip_bit_e strip_bit)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b01      	cmp	r3, #1
 8000216:	d103      	bne.n	8000220 <animate_led_get_strip_size+0x1c>
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <animate_led_get_strip_size+0x3c>)
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	81fb      	strh	r3, [r7, #14]
 800021e:	e009      	b.n	8000234 <animate_led_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffd2 	bl	80001cc <ws2812_convert_strip_num_to_strip_bit>
 8000228:	4603      	mov	r3, r0
 800022a:	461a      	mov	r2, r3
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <animate_led_get_strip_size+0x40>)
 800022e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000232:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8000234:	89fb      	ldrh	r3, [r7, #14]
}
 8000236:	4618      	mov	r0, r3
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000094 	.word	0x20000094
 8000244:	20000000 	.word	0x20000000

08000248 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, uint16_t led_num, color_t red, color_t green, color_t blue)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	4604      	mov	r4, r0
 8000250:	4608      	mov	r0, r1
 8000252:	4611      	mov	r1, r2
 8000254:	461a      	mov	r2, r3
 8000256:	4623      	mov	r3, r4
 8000258:	71fb      	strb	r3, [r7, #7]
 800025a:	4603      	mov	r3, r0
 800025c:	80bb      	strh	r3, [r7, #4]
 800025e:	460b      	mov	r3, r1
 8000260:	71bb      	strb	r3, [r7, #6]
 8000262:	4613      	mov	r3, r2
 8000264:	70fb      	strb	r3, [r7, #3]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffbd 	bl	80001e8 <ws2812_convert_strip_bit_to_strip_num>
 800026e:	4603      	mov	r3, r0
 8000270:	73fb      	strb	r3, [r7, #15]
	(gp_ws28128b_strip[strip_num] + led_num)->red = red;
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	4a12      	ldr	r2, [pc, #72]	; (80002c0 <ws2812b_set_led+0x78>)
 8000276:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800027a:	88ba      	ldrh	r2, [r7, #4]
 800027c:	4613      	mov	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	4413      	add	r3, r2
 8000282:	440b      	add	r3, r1
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	701a      	strb	r2, [r3, #0]
	(gp_ws28128b_strip[strip_num] + led_num)->green = green;
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <ws2812b_set_led+0x78>)
 800028c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000290:	88ba      	ldrh	r2, [r7, #4]
 8000292:	4613      	mov	r3, r2
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	4413      	add	r3, r2
 8000298:	440b      	add	r3, r1
 800029a:	78fa      	ldrb	r2, [r7, #3]
 800029c:	705a      	strb	r2, [r3, #1]
	(gp_ws28128b_strip[strip_num] + led_num)->blue = blue;
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <ws2812b_set_led+0x78>)
 80002a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80002a6:	88ba      	ldrh	r2, [r7, #4]
 80002a8:	4613      	mov	r3, r2
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	4413      	add	r3, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80002b4:	709a      	strb	r2, [r3, #2]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd90      	pop	{r4, r7, pc}
 80002be:	bf00      	nop
 80002c0:	200000c4 	.word	0x200000c4

080002c4 <ws2812b_fill_pwm_buffer>:


void ws2812b_fill_pwm_buffer(const strip_bit_e strip_bit)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	// fill the pwm data here  
	uint16_t strip_size = animate_led_get_strip_size(strip_bit);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff97 	bl	8000204 <animate_led_get_strip_size>
 80002d6:	4603      	mov	r3, r0
 80002d8:	823b      	strh	r3, [r7, #16]
	uint32_t color = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff81 	bl	80001e8 <ws2812_convert_strip_bit_to_strip_num>
 80002e6:	4603      	mov	r3, r0
 80002e8:	72fb      	strb	r3, [r7, #11]
	if (g_pwm_data_ping) gp_pwm_data_fill = gp_pwm_data_ping;
 80002ea:	4b4b      	ldr	r3, [pc, #300]	; (8000418 <ws2812b_fill_pwm_buffer+0x154>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d004      	beq.n	80002fc <ws2812b_fill_pwm_buffer+0x38>
 80002f2:	4b4a      	ldr	r3, [pc, #296]	; (800041c <ws2812b_fill_pwm_buffer+0x158>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a4a      	ldr	r2, [pc, #296]	; (8000420 <ws2812b_fill_pwm_buffer+0x15c>)
 80002f8:	6013      	str	r3, [r2, #0]
 80002fa:	e003      	b.n	8000304 <ws2812b_fill_pwm_buffer+0x40>
	else gp_pwm_data_fill = gp_pwm_data_pong;
 80002fc:	4b49      	ldr	r3, [pc, #292]	; (8000424 <ws2812b_fill_pwm_buffer+0x160>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a47      	ldr	r2, [pc, #284]	; (8000420 <ws2812b_fill_pwm_buffer+0x15c>)
 8000302:	6013      	str	r3, [r2, #0]
	for (uint16_t iii = 0; iii < strip_size; iii++)
 8000304:	2300      	movs	r3, #0
 8000306:	82fb      	strh	r3, [r7, #22]
 8000308:	e04a      	b.n	80003a0 <ws2812b_fill_pwm_buffer+0xdc>
	{
		color = (((gp_ws28128b_strip[strip_num] + iii)->green) << 16) | (((gp_ws28128b_strip[strip_num] + iii)->red) << 8) | (((gp_ws28128b_strip[strip_num] + iii)->blue));
 800030a:	7afb      	ldrb	r3, [r7, #11]
 800030c:	4a46      	ldr	r2, [pc, #280]	; (8000428 <ws2812b_fill_pwm_buffer+0x164>)
 800030e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000312:	8afa      	ldrh	r2, [r7, #22]
 8000314:	4613      	mov	r3, r2
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	4413      	add	r3, r2
 800031a:	440b      	add	r3, r1
 800031c:	785b      	ldrb	r3, [r3, #1]
 800031e:	0419      	lsls	r1, r3, #16
 8000320:	7afb      	ldrb	r3, [r7, #11]
 8000322:	4a41      	ldr	r2, [pc, #260]	; (8000428 <ws2812b_fill_pwm_buffer+0x164>)
 8000324:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000328:	8afa      	ldrh	r2, [r7, #22]
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	4403      	add	r3, r0
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	021b      	lsls	r3, r3, #8
 8000336:	4319      	orrs	r1, r3
 8000338:	7afb      	ldrb	r3, [r7, #11]
 800033a:	4a3b      	ldr	r2, [pc, #236]	; (8000428 <ws2812b_fill_pwm_buffer+0x164>)
 800033c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000340:	8afa      	ldrh	r2, [r7, #22]
 8000342:	4613      	mov	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	4413      	add	r3, r2
 8000348:	4403      	add	r3, r0
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	430b      	orrs	r3, r1
 800034e:	60fb      	str	r3, [r7, #12]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000350:	2300      	movs	r3, #0
 8000352:	757b      	strb	r3, [r7, #21]
 8000354:	e01e      	b.n	8000394 <ws2812b_fill_pwm_buffer+0xd0>
		{
			gp_pwm_data_fill[(iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8000356:	7d7b      	ldrb	r3, [r7, #21]
 8000358:	f1c3 0317 	rsb	r3, r3, #23
 800035c:	2201      	movs	r2, #1
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	461a      	mov	r2, r3
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	4013      	ands	r3, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <ws2812b_fill_pwm_buffer+0xac>
 800036c:	2028      	movs	r0, #40	; 0x28
 800036e:	e000      	b.n	8000372 <ws2812b_fill_pwm_buffer+0xae>
 8000370:	2014      	movs	r0, #20
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <ws2812b_fill_pwm_buffer+0x15c>)
 8000374:	6819      	ldr	r1, [r3, #0]
 8000376:	8afa      	ldrh	r2, [r7, #22]
 8000378:	4613      	mov	r3, r2
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	4413      	add	r3, r2
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	461a      	mov	r2, r3
 8000382:	7d7b      	ldrb	r3, [r7, #21]
 8000384:	4413      	add	r3, r2
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	440b      	add	r3, r1
 800038a:	4602      	mov	r2, r0
 800038c:	801a      	strh	r2, [r3, #0]
		for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 800038e:	7d7b      	ldrb	r3, [r7, #21]
 8000390:	3301      	adds	r3, #1
 8000392:	757b      	strb	r3, [r7, #21]
 8000394:	7d7b      	ldrb	r3, [r7, #21]
 8000396:	2b17      	cmp	r3, #23
 8000398:	d9dd      	bls.n	8000356 <ws2812b_fill_pwm_buffer+0x92>
	for (uint16_t iii = 0; iii < strip_size; iii++)
 800039a:	8afb      	ldrh	r3, [r7, #22]
 800039c:	3301      	adds	r3, #1
 800039e:	82fb      	strh	r3, [r7, #22]
 80003a0:	8afa      	ldrh	r2, [r7, #22]
 80003a2:	8a3b      	ldrh	r3, [r7, #16]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d3b0      	bcc.n	800030a <ws2812b_fill_pwm_buffer+0x46>
		}
	}
	for (uint16_t iii = 0; iii < 3000; iii++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	827b      	strh	r3, [r7, #18]
 80003ac:	e010      	b.n	80003d0 <ws2812b_fill_pwm_buffer+0x10c>
	{
		gp_pwm_data_fill[(strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + iii] = 0;
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <ws2812b_fill_pwm_buffer+0x15c>)
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	8a3a      	ldrh	r2, [r7, #16]
 80003b4:	4613      	mov	r3, r2
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	4413      	add	r3, r2
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	461a      	mov	r2, r3
 80003be:	8a7b      	ldrh	r3, [r7, #18]
 80003c0:	4413      	add	r3, r2
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	440b      	add	r3, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	801a      	strh	r2, [r3, #0]
	for (uint16_t iii = 0; iii < 3000; iii++)
 80003ca:	8a7b      	ldrh	r3, [r7, #18]
 80003cc:	3301      	adds	r3, #1
 80003ce:	827b      	strh	r3, [r7, #18]
 80003d0:	8a7b      	ldrh	r3, [r7, #18]
 80003d2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d9e9      	bls.n	80003ae <ws2812b_fill_pwm_buffer+0xea>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)gp_pwm_data_fill, (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + 3000);
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <ws2812b_fill_pwm_buffer+0x15c>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	8a3b      	ldrh	r3, [r7, #16]
 80003e0:	4619      	mov	r1, r3
 80003e2:	0049      	lsls	r1, r1, #1
 80003e4:	440b      	add	r3, r1
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	480e      	ldr	r0, [pc, #56]	; (800042c <ws2812b_fill_pwm_buffer+0x168>)
 80003f4:	f002 f9cc 	bl	8002790 <HAL_TIM_PWM_Start_DMA>
	datasentflag = 0;
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <ws2812b_fill_pwm_buffer+0x16c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
	while (!datasentflag);//{HAL_Delay(1);};
 80003fe:	bf00      	nop
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <ws2812b_fill_pwm_buffer+0x16c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0fb      	beq.n	8000400 <ws2812b_fill_pwm_buffer+0x13c>
	datasentflag = 0;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <ws2812b_fill_pwm_buffer+0x16c>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000096 	.word	0x20000096
 800041c:	200000a8 	.word	0x200000a8
 8000420:	200000cc 	.word	0x200000cc
 8000424:	200000c8 	.word	0x200000c8
 8000428:	200000c4 	.word	0x200000c4
 800042c:	20000140 	.word	0x20000140
 8000430:	20000098 	.word	0x20000098

08000434 <ws2812b_init>:
	// call TIM PWM DMA to reset.
}


void ws2812b_init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 800043a:	4b28      	ldr	r3, [pc, #160]	; (80004dc <ws2812b_init+0xa8>)
 800043c:	4a28      	ldr	r2, [pc, #160]	; (80004e0 <ws2812b_init+0xac>)
 800043e:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000440:	2301      	movs	r3, #1
 8000442:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++)
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	e00f      	b.n	800046a <ws2812b_init+0x36>
	{
		g_all_strip_mask |= 1 << iii;
 800044a:	2201      	movs	r2, #1
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	b21a      	sxth	r2, r3
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <ws2812b_init+0xb0>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	b21b      	sxth	r3, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	b21b      	sxth	r3, r3
 800045e:	b29a      	uxth	r2, r3
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <ws2812b_init+0xb0>)
 8000462:	801a      	strh	r2, [r3, #0]
	for (int iii = 0; iii < NUM_STRIPS; iii++)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3301      	adds	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	ddec      	ble.n	800044a <ws2812b_init+0x16>
	}
	
	switch (num_strips)
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d10d      	bne.n	8000492 <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8000476:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <ws2812b_init+0xb4>)
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	3307      	adds	r3, #7
 800047c:	b29a      	uxth	r2, r3
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <ws2812b_init+0xb4>)
 8000480:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <ws2812b_init+0xb8>)
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	2b06      	cmp	r3, #6
 8000488:	d802      	bhi.n	8000490 <ws2812b_init+0x5c>
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <ws2812b_init+0xb8>)
 800048c:	2207      	movs	r2, #7
 800048e:	801a      	strh	r2, [r3, #0]
		break;
 8000490:	bf00      	nop
	}
	gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + 3000);
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <ws2812b_init+0xb8>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	461a      	mov	r2, r3
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 f85d 	bl	8004564 <malloc>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <ws2812b_init+0xbc>)
 80004b0:	601a      	str	r2, [r3, #0]
	gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + 3000);
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <ws2812b_init+0xb8>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	4613      	mov	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	4413      	add	r3, r2
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80004c4:	4618      	mov	r0, r3
 80004c6:	f004 f84d 	bl	8004564 <malloc>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <ws2812b_init+0xc0>)
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000c4 	.word	0x200000c4
 80004e0:	200000ac 	.word	0x200000ac
 80004e4:	20000092 	.word	0x20000092
 80004e8:	20000090 	.word	0x20000090
 80004ec:	20000094 	.word	0x20000094
 80004f0:	200000a8 	.word	0x200000a8
 80004f4:	200000c8 	.word	0x200000c8

080004f8 <ws2812b_show>:

void ws2812b_show(const strip_mask_t strip_mask)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8000502:	2300      	movs	r3, #0
 8000504:	73fb      	strb	r3, [r7, #15]
 8000506:	e010      	b.n	800052a <ws2812b_show+0x32>
	{
		if ((1 << iii) & strip_mask)
 8000508:	88fa      	ldrh	r2, [r7, #6]
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	fa42 f303 	asr.w	r3, r2, r3
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d005      	beq.n	8000524 <ws2812b_show+0x2c>
		{
			ws2812b_fill_pwm_buffer(iii + 1); // iii = strip num!
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	3301      	adds	r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fed0 	bl	80002c4 <ws2812b_fill_pwm_buffer>
	for (uint8_t iii = 0; iii < STRIP_BIT_NUM_STRIPS; iii++)
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	3301      	adds	r3, #1
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0eb      	beq.n	8000508 <ws2812b_show+0x10>
	}




}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f961 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f80e 	bl	800056c <HAL_InitTick>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	e001      	b.n	8000560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800055c:	f003 fe28 	bl	80041b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000560:	79fb      	ldrb	r3, [r7, #7]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_InitTick+0x6c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d023      	beq.n	80005c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <HAL_InitTick+0x70>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_InitTick+0x6c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f96d 	bl	8000876 <HAL_SYSTICK_Config>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d10f      	bne.n	80005c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d809      	bhi.n	80005bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 f937 	bl	8000822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_InitTick+0x74>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e007      	b.n	80005cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e004      	b.n	80005cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e001      	b.n	80005cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000008 	.word	0x20000008
 80005dc:	2000000c 	.word	0x2000000c
 80005e0:	20000004 	.word	0x20000004

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000008 	.word	0x20000008
 8000608:	200000d0 	.word	0x200000d0

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200000d0 	.word	0x200000d0

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_Delay+0x44>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8f7      	bhi.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000008 	.word	0x20000008

0800066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <__NVIC_EnableIRQ+0x38>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ff8e 	bl	800070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff29 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000834:	f7ff ff3e 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 8000838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff ff8e 	bl	8000760 <NVIC_EncodePriority>
 8000844:	4602      	mov	r2, r0
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff5d 	bl	800070c <__NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff31 	bl	80006d0 <__NVIC_EnableIRQ>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ffa2 	bl	80007c8 <SysTick_Config>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e098      	b.n	80009d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <HAL_DMA_Init+0x150>)
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d80f      	bhi.n	80008ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <HAL_DMA_Init+0x154>)
 80008b6:	4413      	add	r3, r2
 80008b8:	4a4b      	ldr	r2, [pc, #300]	; (80009e8 <HAL_DMA_Init+0x158>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	009a      	lsls	r2, r3, #2
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a48      	ldr	r2, [pc, #288]	; (80009ec <HAL_DMA_Init+0x15c>)
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
 80008cc:	e00e      	b.n	80008ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <HAL_DMA_Init+0x160>)
 80008d6:	4413      	add	r3, r2
 80008d8:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <HAL_DMA_Init+0x158>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	009a      	lsls	r2, r3, #2
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a42      	ldr	r2, [pc, #264]	; (80009f4 <HAL_DMA_Init+0x164>)
 80008ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2202      	movs	r2, #2
 80008f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000906:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800091c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4313      	orrs	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000946:	d039      	beq.n	80009bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <HAL_DMA_Init+0x15c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d11a      	bne.n	8000988 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <HAL_DMA_Init+0x168>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f003 031c 	and.w	r3, r3, #28
 800095e:	210f      	movs	r1, #15
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	4924      	ldr	r1, [pc, #144]	; (80009f8 <HAL_DMA_Init+0x168>)
 8000968:	4013      	ands	r3, r2
 800096a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <HAL_DMA_Init+0x168>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6859      	ldr	r1, [r3, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000978:	f003 031c 	and.w	r3, r3, #28
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	491d      	ldr	r1, [pc, #116]	; (80009f8 <HAL_DMA_Init+0x168>)
 8000982:	4313      	orrs	r3, r2
 8000984:	600b      	str	r3, [r1, #0]
 8000986:	e019      	b.n	80009bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_DMA_Init+0x16c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	f003 031c 	and.w	r3, r3, #28
 8000994:	210f      	movs	r1, #15
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	4917      	ldr	r1, [pc, #92]	; (80009fc <HAL_DMA_Init+0x16c>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_DMA_Init+0x16c>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6859      	ldr	r1, [r3, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f003 031c 	and.w	r3, r3, #28
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	4911      	ldr	r1, [pc, #68]	; (80009fc <HAL_DMA_Init+0x16c>)
 80009b8:	4313      	orrs	r3, r2
 80009ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40020407 	.word	0x40020407
 80009e4:	bffdfff8 	.word	0xbffdfff8
 80009e8:	cccccccd 	.word	0xcccccccd
 80009ec:	40020000 	.word	0x40020000
 80009f0:	bffdfbf8 	.word	0xbffdfbf8
 80009f4:	40020400 	.word	0x40020400
 80009f8:	400200a8 	.word	0x400200a8
 80009fc:	400204a8 	.word	0x400204a8

08000a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d101      	bne.n	8000a20 <HAL_DMA_Start_IT+0x20>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e04b      	b.n	8000ab8 <HAL_DMA_Start_IT+0xb8>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d13a      	bne.n	8000aaa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2202      	movs	r2, #2
 8000a38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 0201 	bic.w	r2, r2, #1
 8000a50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f000 f921 	bl	8000ca0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d008      	beq.n	8000a78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 020e 	orr.w	r2, r2, #14
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e00f      	b.n	8000a98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0204 	bic.w	r2, r2, #4
 8000a86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 020a 	orr.w	r2, r2, #10
 8000a96:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e005      	b.n	8000ab6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d005      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2204      	movs	r2, #4
 8000adc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e029      	b.n	8000b38 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 020e 	bic.w	r2, r2, #14
 8000af2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 0201 	bic.w	r2, r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f003 021c 	and.w	r2, r3, #28
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	4798      	blx	r3
    }
  }
  return status;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f003 031c 	and.w	r3, r3, #28
 8000b62:	2204      	movs	r2, #4
 8000b64:	409a      	lsls	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d026      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x7a>
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d021      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d107      	bne.n	8000b96 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0204 	bic.w	r2, r2, #4
 8000b94:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f003 021c 	and.w	r2, r3, #28
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d071      	beq.n	8000c96 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000bba:	e06c      	b.n	8000c96 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	f003 031c 	and.w	r3, r3, #28
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02e      	beq.n	8000c2e <HAL_DMA_IRQHandler+0xec>
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d029      	beq.n	8000c2e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10b      	bne.n	8000c00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 020a 	bic.w	r2, r2, #10
 8000bf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f003 021c 	and.w	r2, r3, #28
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d038      	beq.n	8000c96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c2c:	e033      	b.n	8000c96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f003 031c 	and.w	r3, r3, #28
 8000c36:	2208      	movs	r2, #8
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d02a      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x156>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d025      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 020e 	bic.w	r2, r2, #14
 8000c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	f003 021c 	and.w	r2, r3, #28
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d004      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
}
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f003 021c 	and.w	r2, r3, #28
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b10      	cmp	r3, #16
 8000cd0:	d108      	bne.n	8000ce4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ce2:	e007      	b.n	8000cf4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	60da      	str	r2, [r3, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e154      	b.n	8000fba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8146 	beq.w	8000fb4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d005      	beq.n	8000d40 <HAL_GPIO_Init+0x40>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	f003 0201 	and.w	r2, r3, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d017      	beq.n	8000dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d123      	bne.n	8000e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	6939      	ldr	r1, [r7, #16]
 8000e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0203 	and.w	r2, r3, #3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 80a0 	beq.w	8000fb4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	4b58      	ldr	r3, [pc, #352]	; (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e78:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e8c:	4a53      	ldr	r2, [pc, #332]	; (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eb6:	d019      	beq.n	8000eec <HAL_GPIO_Init+0x1ec>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <HAL_GPIO_Init+0x2e0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d013      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e8>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <HAL_GPIO_Init+0x2e4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a47      	ldr	r2, [pc, #284]	; (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e0>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a46      	ldr	r2, [pc, #280]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d101      	bne.n	8000edc <HAL_GPIO_Init+0x1dc>
 8000ed8:	2304      	movs	r3, #4
 8000eda:	e008      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000edc:	2307      	movs	r3, #7
 8000ede:	e006      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e004      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e002      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000eec:	2300      	movs	r3, #0
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000efe:	4937      	ldr	r1, [pc, #220]	; (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f30:	4a2f      	ldr	r2, [pc, #188]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f84:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f47f aea3 	bne.w	8000d10 <HAL_GPIO_Init+0x10>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	48000c00 	.word	0x48000c00
 8000fec:	48001000 	.word	0x48001000
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001010:	e002      	b.n	8001018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40007000 	.word	0x40007000

08001044 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_PWR_ConfigPVD+0xb8>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f023 020e 	bic.w	r2, r3, #14
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4928      	ldr	r1, [pc, #160]	; (80010fc <HAL_PWR_ConfigPVD+0xb8>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a27      	ldr	r2, [pc, #156]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a24      	ldr	r2, [pc, #144]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 8001070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001074:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 800107c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001080:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d005      	beq.n	80010d6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_PWR_ConfigPVD+0xbc>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40007000 	.word	0x40007000
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_PWR_EnablePVD+0x1c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_PWR_EnablePVD+0x1c>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6053      	str	r3, [r2, #4]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_PWREx_GetVoltageRange+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114e:	d130      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115c:	d038      	beq.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2232      	movs	r2, #50	; 0x32
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	3301      	adds	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001184:	e002      	b.n	800118c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3b01      	subs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001198:	d102      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f2      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ac:	d110      	bne.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e00f      	b.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011be:	d007      	beq.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40007000 	.word	0x40007000
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	431bde83 	.word	0x431bde83

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e3fe      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fe:	4ba1      	ldr	r3, [pc, #644]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001208:	4b9e      	ldr	r3, [pc, #632]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80e4 	beq.w	80013e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_RCC_OscConfig+0x4a>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b0c      	cmp	r3, #12
 800122a:	f040 808b 	bne.w	8001344 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 8087 	bne.w	8001344 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001236:	4b93      	ldr	r3, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x62>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e3d6      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1a      	ldr	r2, [r3, #32]
 8001252:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_RCC_OscConfig+0x7c>
 800125e:	4b89      	ldr	r3, [pc, #548]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001266:	e005      	b.n	8001274 <HAL_RCC_OscConfig+0x88>
 8001268:	4b86      	ldr	r3, [pc, #536]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800126a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001274:	4293      	cmp	r3, r2
 8001276:	d223      	bcs.n	80012c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fd53 	bl	8001d28 <RCC_SetFlashLatencyFromMSIRange>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e3b7      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128c:	4b7d      	ldr	r3, [pc, #500]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a7c      	ldr	r2, [pc, #496]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4977      	ldr	r1, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	4972      	ldr	r1, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
 80012be:	e025      	b.n	800130c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c0:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	496a      	ldr	r1, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	4965      	ldr	r1, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fd13 	bl	8001d28 <RCC_SetFlashLatencyFromMSIRange>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e377      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800130c:	f000 fc80 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	495a      	ldr	r1, [pc, #360]	; (8001488 <HAL_RCC_OscConfig+0x29c>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	4a58      	ldr	r2, [pc, #352]	; (800148c <HAL_RCC_OscConfig+0x2a0>)
 800132a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <HAL_RCC_OscConfig+0x2a4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f91b 	bl	800056c <HAL_InitTick>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d052      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	e35b      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d032      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001358:	f7ff f958 	bl	800060c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001360:	f7ff f954 	bl	800060c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e344      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a40      	ldr	r2, [pc, #256]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	493b      	ldr	r1, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	4936      	ldr	r1, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e01a      	b.n	80013e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a33      	ldr	r2, [pc, #204]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013be:	f7ff f925 	bl	800060c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c6:	f7ff f921 	bl	800060c <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e311      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1da>
 80013e4:	e000      	b.n	80013e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d074      	beq.n	80014de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x21a>
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d10e      	bne.n	800141e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d064      	beq.n	80014dc <HAL_RCC_OscConfig+0x2f0>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d160      	bne.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e2ee      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x24a>
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a15      	ldr	r2, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e01d      	b.n	8001472 <HAL_RCC_OscConfig+0x286>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800143e:	d10c      	bne.n	800145a <HAL_RCC_OscConfig+0x26e>
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e00b      	b.n	8001472 <HAL_RCC_OscConfig+0x286>
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_RCC_OscConfig+0x298>)
 800146c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001470:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff f8c7 	bl	800060c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001480:	e011      	b.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	0800468c 	.word	0x0800468c
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff f8ba 	bl	800060c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e2aa      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	4baf      	ldr	r3, [pc, #700]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x2a8>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff f8aa 	bl	800060c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff f8a6 	bl	800060c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e296      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	4ba5      	ldr	r3, [pc, #660]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x2d0>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d060      	beq.n	80015ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x310>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d119      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d116      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x328>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e273      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b93      	ldr	r3, [pc, #588]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4990      	ldr	r1, [pc, #576]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	e040      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d023      	beq.n	800157a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001532:	4b8c      	ldr	r3, [pc, #560]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a8b      	ldr	r2, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff f865 	bl	800060c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff f861 	bl	800060c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e251      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	4b82      	ldr	r3, [pc, #520]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b7f      	ldr	r3, [pc, #508]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	497c      	ldr	r1, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e018      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b7a      	ldr	r3, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a79      	ldr	r2, [pc, #484]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff f841 	bl	800060c <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff f83d 	bl	800060c <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e22d      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	4b70      	ldr	r3, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03c      	beq.n	8001632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01c      	beq.n	80015fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c6:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff f81c 	bl	800060c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff f818 	bl	800060c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e208      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80015ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ef      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3ec>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7fe ffff 	bl	800060c <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7fe fffb 	bl	800060c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1eb      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ef      	bne.n	8001612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001644:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	4b44      	ldr	r3, [pc, #272]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	4a43      	ldr	r2, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	6593      	str	r3, [r2, #88]	; 0x58
 800165c:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001668:	2301      	movs	r3, #1
 800166a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCC_OscConfig+0x57c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d118      	bne.n	80016aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_RCC_OscConfig+0x57c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3a      	ldr	r2, [pc, #232]	; (8001768 <HAL_RCC_OscConfig+0x57c>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001684:	f7fe ffc2 	bl	800060c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168c:	f7fe ffbe 	bl	800060c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1ae      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_OscConfig+0x57c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4d8>
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	4a2a      	ldr	r2, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c2:	e024      	b.n	800170e <HAL_RCC_OscConfig+0x522>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d110      	bne.n	80016ee <HAL_RCC_OscConfig+0x502>
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	4a24      	ldr	r2, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a20      	ldr	r2, [pc, #128]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	e00f      	b.n	800170e <HAL_RCC_OscConfig+0x522>
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7fe ff79 	bl	800060c <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7fe ff75 	bl	800060c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e163      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x578>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0ed      	beq.n	800171e <HAL_RCC_OscConfig+0x532>
 8001742:	e01a      	b.n	800177a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7fe ff62 	bl	800060c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800174a:	e00f      	b.n	800176c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7fe ff5e 	bl	800060c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d906      	bls.n	800176c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e14c      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4ba5      	ldr	r3, [pc, #660]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1e8      	bne.n	800174c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a9f      	ldr	r2, [pc, #636]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01c      	beq.n	80017da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a0:	4b98      	ldr	r3, [pc, #608]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80017a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a6:	4a97      	ldr	r2, [pc, #604]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7fe ff2c 	bl	800060c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7fe ff28 	bl	800060c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e118      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80017cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0ef      	beq.n	80017b8 <HAL_RCC_OscConfig+0x5cc>
 80017d8:	e01b      	b.n	8001812 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017da:	4b8a      	ldr	r3, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e0:	4a88      	ldr	r2, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7fe ff0f 	bl	800060c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7fe ff0b 	bl	800060c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0fb      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	4b7f      	ldr	r3, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ef      	bne.n	80017f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80ef 	beq.w	80019fa <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 80c5 	bne.w	80019b0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001826:	4b77      	ldr	r3, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d12c      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	3b01      	subs	r3, #1
 8001846:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d123      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d11b      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d113      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d109      	bne.n	8001894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d067      	beq.n	8001964 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d062      	beq.n	8001960 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800189a:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0a8      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a55      	ldr	r2, [pc, #340]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80018b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b6:	f7fe fea9 	bl	800060c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe fea5 	bl	800060c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e095      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x81c>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ec:	3a01      	subs	r2, #1
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018f6:	0212      	lsls	r2, r2, #8
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018fe:	0852      	lsrs	r2, r2, #1
 8001900:	3a01      	subs	r2, #1
 8001902:	0552      	lsls	r2, r2, #21
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	3a01      	subs	r2, #1
 800190e:	0652      	lsls	r2, r2, #25
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001916:	06d2      	lsls	r2, r2, #27
 8001918:	430a      	orrs	r2, r1
 800191a:	493a      	ldr	r1, [pc, #232]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 800191c:	4313      	orrs	r3, r2
 800191e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001938:	f7fe fe68 	bl	800060c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7fe fe64 	bl	800060c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e054      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195e:	e04c      	b.n	80019fa <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e04b      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d144      	bne.n	80019fa <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001988:	f7fe fe40 	bl	800060c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7fe fe3c 	bl	800060c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e02c      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x7a4>
 80019ae:	e024      	b.n	80019fa <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d01f      	beq.n	80019f6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80019bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7fe fe23 	bl	800060c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7fe fe1f 	bl	800060c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4905      	ldr	r1, [pc, #20]	; (8001a04 <HAL_RCC_OscConfig+0x818>)
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_RCC_OscConfig+0x820>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e001      	b.n	80019fa <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	019d808c 	.word	0x019d808c
 8001a0c:	feeefffc 	.word	0xfeeefffc

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0e7      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d910      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0207 	bic.w	r2, r3, #7
 8001a3a:	4970      	ldr	r1, [pc, #448]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b6e      	ldr	r3, [pc, #440]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cf      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d010      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d908      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4960      	ldr	r1, [pc, #384]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d04c      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d121      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0a6      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aae:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e09a      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e08e      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e086      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4943      	ldr	r1, [pc, #268]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af8:	f7fe fd88 	bl	800060c <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7fe fd84 	bl	800060c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e06e      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d010      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d208      	bcs.n	8001b56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	492b      	ldr	r1, [pc, #172]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d210      	bcs.n	8001b86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	4923      	ldr	r1, [pc, #140]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e036      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4918      	ldr	r1, [pc, #96]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4910      	ldr	r1, [pc, #64]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc4:	f000 f824 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	490b      	ldr	r1, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x1f4>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001be2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1fc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcbf 	bl	800056c <HAL_InitTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	0800468c 	.word	0x0800468c
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c28:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x34>
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d121      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d11e      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e005      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c6c:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	e004      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d134      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d003      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0xac>
 8001cb4:	e005      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb8:	617b      	str	r3, [r7, #20]
      break;
 8001cba:	e005      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cbe:	617b      	str	r3, [r7, #20]
      break;
 8001cc0:	e002      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	617b      	str	r3, [r7, #20]
      break;
 8001cc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	fb02 f203 	mul.w	r2, r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	0e5b      	lsrs	r3, r3, #25
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d08:	69bb      	ldr	r3, [r7, #24]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	0800469c 	.word	0x0800469c
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	02dc6c00 	.word	0x02dc6c00

08001d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d40:	f7ff f9f0 	bl	8001124 <HAL_PWREx_GetVoltageRange>
 8001d44:	6178      	str	r0, [r7, #20]
 8001d46:	e014      	b.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6593      	str	r3, [r2, #88]	; 0x58
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d60:	f7ff f9e0 	bl	8001124 <HAL_PWREx_GetVoltageRange>
 8001d64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d78:	d10b      	bne.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b80      	cmp	r3, #128	; 0x80
 8001d7e:	d919      	bls.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2ba0      	cmp	r3, #160	; 0xa0
 8001d84:	d902      	bls.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d86:	2302      	movs	r3, #2
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e013      	b.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e010      	b.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d902      	bls.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d98:	2303      	movs	r3, #3
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e00a      	b.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d102      	bne.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da4:	2302      	movs	r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e004      	b.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b70      	cmp	r3, #112	; 0x70
 8001dae:	d101      	bne.n	8001db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db0:	2301      	movs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 0207 	bic.w	r2, r3, #7
 8001dbc:	4909      	ldr	r1, [pc, #36]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df0:	2300      	movs	r3, #0
 8001df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df4:	2300      	movs	r3, #0
 8001df6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d031      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e0c:	d01a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e12:	d814      	bhi.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e1c:	d10f      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e2a:	e00c      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f9f0 	bl	8002218 <RCCEx_PLLSAI1_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e3c:	e003      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	74fb      	strb	r3, [r7, #19]
      break;
 8001e42:	e000      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e4c:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	494e      	ldr	r1, [pc, #312]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e62:	e001      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 809e 	beq.w	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	4a3f      	ldr	r2, [pc, #252]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fba8 	bl	800060c <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ebe:	e009      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7fe fba4 	bl	800060c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d902      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ef      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d15a      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01e      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d019      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f2e:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d016      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe fb64 	bl	800060c <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	e00b      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7fe fb60 	bl	800060c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d902      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	74fb      	strb	r3, [r7, #19]
            break;
 8001f5e:	e006      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ec      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4904      	ldr	r1, [pc, #16]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
 8001f90:	e006      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa0:	7c7b      	ldrb	r3, [r7, #17]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b9b      	ldr	r3, [pc, #620]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a9a      	ldr	r2, [pc, #616]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fbe:	4b95      	ldr	r3, [pc, #596]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	f023 0203 	bic.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4991      	ldr	r1, [pc, #580]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f023 020c 	bic.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	4989      	ldr	r1, [pc, #548]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002002:	4b84      	ldr	r3, [pc, #528]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002008:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	4980      	ldr	r1, [pc, #512]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002024:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	4978      	ldr	r1, [pc, #480]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	496f      	ldr	r1, [pc, #444]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4967      	ldr	r1, [pc, #412]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800208a:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	495e      	ldr	r1, [pc, #376]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	4956      	ldr	r1, [pc, #344]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ce:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	494d      	ldr	r1, [pc, #308]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d028      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020f0:	4b48      	ldr	r3, [pc, #288]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fe:	4945      	ldr	r1, [pc, #276]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210e:	d106      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800211a:	60d3      	str	r3, [r2, #12]
 800211c:	e011      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002126:	d10c      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f872 	bl	8002218 <RCCEx_PLLSAI1_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	492d      	ldr	r1, [pc, #180]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800216c:	d106      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002178:	60d3      	str	r3, [r2, #12]
 800217a:	e011      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f843 	bl	8002218 <RCCEx_PLLSAI1_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	4916      	ldr	r1, [pc, #88]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	2102      	movs	r1, #2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f820 	bl	8002218 <RCCEx_PLLSAI1_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	4904      	ldr	r1, [pc, #16]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002208:	7cbb      	ldrb	r3, [r7, #18]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002226:	4b74      	ldr	r3, [pc, #464]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d018      	beq.n	8002264 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002232:	4b71      	ldr	r3, [pc, #452]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d10d      	bne.n	800225e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
       ||
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800224a:	4b6b      	ldr	r3, [pc, #428]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
       ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d047      	beq.n	80022ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e044      	b.n	80022ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d018      	beq.n	800229e <RCCEx_PLLSAI1_Config+0x86>
 800226c:	2b03      	cmp	r3, #3
 800226e:	d825      	bhi.n	80022bc <RCCEx_PLLSAI1_Config+0xa4>
 8002270:	2b01      	cmp	r3, #1
 8002272:	d002      	beq.n	800227a <RCCEx_PLLSAI1_Config+0x62>
 8002274:	2b02      	cmp	r3, #2
 8002276:	d009      	beq.n	800228c <RCCEx_PLLSAI1_Config+0x74>
 8002278:	e020      	b.n	80022bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800227a:	4b5f      	ldr	r3, [pc, #380]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11d      	bne.n	80022c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228a:	e01a      	b.n	80022c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800228c:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800229c:	e013      	b.n	80022c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800229e:	4b56      	ldr	r3, [pc, #344]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022aa:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022ba:	e006      	b.n	80022ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e004      	b.n	80022cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022c2:	bf00      	nop
 80022c4:	e002      	b.n	80022cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022d2:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6819      	ldr	r1, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	430b      	orrs	r3, r1
 80022e8:	4943      	ldr	r1, [pc, #268]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d17c      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022f4:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a3f      	ldr	r2, [pc, #252]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002300:	f7fe f984 	bl	800060c <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002306:	e009      	b.n	800231c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002308:	f7fe f980 	bl	800060c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d902      	bls.n	800231c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	73fb      	strb	r3, [r7, #15]
        break;
 800231a:	e005      	b.n	8002328 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ef      	bne.n	8002308 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d15f      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d110      	bne.n	8002356 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800233c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6892      	ldr	r2, [r2, #8]
 8002344:	0211      	lsls	r1, r2, #8
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	06d2      	lsls	r2, r2, #27
 800234c:	430a      	orrs	r2, r1
 800234e:	492a      	ldr	r1, [pc, #168]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	610b      	str	r3, [r1, #16]
 8002354:	e027      	b.n	80023a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d112      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800235c:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002364:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6892      	ldr	r2, [r2, #8]
 800236c:	0211      	lsls	r1, r2, #8
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6912      	ldr	r2, [r2, #16]
 8002372:	0852      	lsrs	r2, r2, #1
 8002374:	3a01      	subs	r2, #1
 8002376:	0552      	lsls	r2, r2, #21
 8002378:	430a      	orrs	r2, r1
 800237a:	491f      	ldr	r1, [pc, #124]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	610b      	str	r3, [r1, #16]
 8002380:	e011      	b.n	80023a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800238a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	0211      	lsls	r1, r2, #8
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6952      	ldr	r2, [r2, #20]
 8002398:	0852      	lsrs	r2, r2, #1
 800239a:	3a01      	subs	r2, #1
 800239c:	0652      	lsls	r2, r2, #25
 800239e:	430a      	orrs	r2, r1
 80023a0:	4915      	ldr	r1, [pc, #84]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe f92b 	bl	800060c <HAL_GetTick>
 80023b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023b8:	e009      	b.n	80023ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023ba:	f7fe f927 	bl	800060c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d902      	bls.n	80023ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	73fb      	strb	r3, [r7, #15]
          break;
 80023cc:	e005      	b.n	80023da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0ef      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06c      	beq.n	80024e8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 fef6 	bl	8004214 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	22ca      	movs	r2, #202	; 0xca
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2253      	movs	r2, #83	; 0x53
 800243e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f87c 	bl	800253e <RTC_EnterInitMode>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d14b      	bne.n	80024e8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800245e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002462:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6899      	ldr	r1, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	041a      	lsls	r2, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f87f 	bl	80025a4 <RTC_ExitInitMode>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d11b      	bne.n	80024e8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0203 	bic.w	r2, r2, #3
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002508:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800250a:	f7fe f87f 	bl	800060c <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002510:	e009      	b.n	8002526 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002512:	f7fe f87b 	bl	800060c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002520:	d901      	bls.n	8002526 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e007      	b.n	8002536 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d120      	bne.n	800259a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002562:	f7fe f853 	bl	800060c <HAL_GetTick>
 8002566:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002568:	e00d      	b.n	8002586 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800256a:	f7fe f84f 	bl	800060c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002578:	d905      	bls.n	8002586 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <RTC_EnterInitMode+0x5c>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d1e7      	bne.n	800256a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <RTC_ExitInitMode+0x78>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <RTC_ExitInitMode+0x78>)
 80025b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <RTC_ExitInitMode+0x78>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff92 	bl	80024f2 <HAL_RTC_WaitForSynchro>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01e      	beq.n	8002612 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e017      	b.n	8002612 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <RTC_ExitInitMode+0x78>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <RTC_ExitInitMode+0x78>)
 80025e8:	f023 0320 	bic.w	r3, r3, #32
 80025ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff7f 	bl	80024f2 <HAL_RTC_WaitForSynchro>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <RTC_ExitInitMode+0x78>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <RTC_ExitInitMode+0x78>)
 800260c:	f043 0320 	orr.w	r3, r3, #32
 8002610:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40002800 	.word	0x40002800

08002620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e049      	b.n	80026c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f001 fe00 	bl	800424c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fe38 	bl	80032d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e049      	b.n	8002774 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f841 	bl	800277c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fde1 	bl	80032d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_TIM_PWM_Start_DMA+0x2c>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e03c      	b.n	8002836 <HAL_TIM_PWM_Start_DMA+0xa6>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d109      	bne.n	80027d6 <HAL_TIM_PWM_Start_DMA+0x46>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e02f      	b.n	8002836 <HAL_TIM_PWM_Start_DMA+0xa6>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d109      	bne.n	80027f0 <HAL_TIM_PWM_Start_DMA+0x60>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e022      	b.n	8002836 <HAL_TIM_PWM_Start_DMA+0xa6>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d109      	bne.n	800280a <HAL_TIM_PWM_Start_DMA+0x7a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e015      	b.n	8002836 <HAL_TIM_PWM_Start_DMA+0xa6>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b10      	cmp	r3, #16
 800280e:	d109      	bne.n	8002824 <HAL_TIM_PWM_Start_DMA+0x94>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e008      	b.n	8002836 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	e18d      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e03c      	b.n	80028d2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d109      	bne.n	8002872 <HAL_TIM_PWM_Start_DMA+0xe2>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	e02f      	b.n	80028d2 <HAL_TIM_PWM_Start_DMA+0x142>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d109      	bne.n	800288c <HAL_TIM_PWM_Start_DMA+0xfc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e022      	b.n	80028d2 <HAL_TIM_PWM_Start_DMA+0x142>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d109      	bne.n	80028a6 <HAL_TIM_PWM_Start_DMA+0x116>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e015      	b.n	80028d2 <HAL_TIM_PWM_Start_DMA+0x142>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d109      	bne.n	80028c0 <HAL_TIM_PWM_Start_DMA+0x130>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e008      	b.n	80028d2 <HAL_TIM_PWM_Start_DMA+0x142>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d034      	beq.n	8002940 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x152>
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e139      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start_DMA+0x166>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	e026      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d104      	bne.n	8002906 <HAL_TIM_PWM_Start_DMA+0x176>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002904:	e01e      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d104      	bne.n	8002916 <HAL_TIM_PWM_Start_DMA+0x186>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002914:	e016      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b0c      	cmp	r3, #12
 800291a:	d104      	bne.n	8002926 <HAL_TIM_PWM_Start_DMA+0x196>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002924:	e00e      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b10      	cmp	r3, #16
 800292a:	d104      	bne.n	8002936 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002934:	e006      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293e:	e001      	b.n	8002944 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e10a      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b0c      	cmp	r3, #12
 8002948:	f200 80ae 	bhi.w	8002aa8 <HAL_TIM_PWM_Start_DMA+0x318>
 800294c:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	08002989 	.word	0x08002989
 8002958:	08002aa9 	.word	0x08002aa9
 800295c:	08002aa9 	.word	0x08002aa9
 8002960:	08002aa9 	.word	0x08002aa9
 8002964:	080029d1 	.word	0x080029d1
 8002968:	08002aa9 	.word	0x08002aa9
 800296c:	08002aa9 	.word	0x08002aa9
 8002970:	08002aa9 	.word	0x08002aa9
 8002974:	08002a19 	.word	0x08002a19
 8002978:	08002aa9 	.word	0x08002aa9
 800297c:	08002aa9 	.word	0x08002aa9
 8002980:	08002aa9 	.word	0x08002aa9
 8002984:	08002a61 	.word	0x08002a61
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	4a75      	ldr	r2, [pc, #468]	; (8002b64 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	4a74      	ldr	r2, [pc, #464]	; (8002b68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002996:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4a73      	ldr	r2, [pc, #460]	; (8002b6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800299e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3334      	adds	r3, #52	; 0x34
 80029ac:	461a      	mov	r2, r3
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	f7fe f826 	bl	8000a00 <HAL_DMA_Start_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0cd      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	60da      	str	r2, [r3, #12]
      break;
 80029ce:	e06e      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	4a62      	ldr	r2, [pc, #392]	; (8002b68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80029de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3338      	adds	r3, #56	; 0x38
 80029f4:	461a      	mov	r2, r3
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	f7fe f802 	bl	8000a00 <HAL_DMA_Start_IT>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0a9      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a14:	60da      	str	r2, [r3, #12]
      break;
 8002a16:	e04a      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4a50      	ldr	r2, [pc, #320]	; (8002b68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	333c      	adds	r3, #60	; 0x3c
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	f7fd ffde 	bl	8000a00 <HAL_DMA_Start_IT>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e085      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5c:	60da      	str	r2, [r3, #12]
      break;
 8002a5e:	e026      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a3e      	ldr	r2, [pc, #248]	; (8002b68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4a3d      	ldr	r2, [pc, #244]	; (8002b6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3340      	adds	r3, #64	; 0x40
 8002a84:	461a      	mov	r2, r3
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	f7fd ffba 	bl	8000a00 <HAL_DMA_Start_IT>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e061      	b.n	8002b5a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aa4:	60da      	str	r2, [r3, #12]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8002aac:	bf00      	nop
  }

  if (status == HAL_OK)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d151      	bne.n	8002b58 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 ff85 	bl	80039cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIM_PWM_Start_DMA+0x350>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_PWM_Start_DMA+0x350>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIM_PWM_Start_DMA+0x354>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_TIM_PWM_Start_DMA+0x356>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x388>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x388>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d115      	bne.n	8002b44 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d015      	beq.n	8002b56 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d011      	beq.n	8002b56 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	e008      	b.n	8002b56 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e000      	b.n	8002b58 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b56:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	080031c5 	.word	0x080031c5
 8002b68:	0800326d 	.word	0x0800326d
 8002b6c:	08003133 	.word	0x08003133
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	00010007 	.word	0x00010007

08002b80 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d855      	bhi.n	8002c40 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002c41 	.word	0x08002c41
 8002ba4:	08002c41 	.word	0x08002c41
 8002ba8:	08002c41 	.word	0x08002c41
 8002bac:	08002bed 	.word	0x08002bed
 8002bb0:	08002c41 	.word	0x08002c41
 8002bb4:	08002c41 	.word	0x08002c41
 8002bb8:	08002c41 	.word	0x08002c41
 8002bbc:	08002c09 	.word	0x08002c09
 8002bc0:	08002c41 	.word	0x08002c41
 8002bc4:	08002c41 	.word	0x08002c41
 8002bc8:	08002c41 	.word	0x08002c41
 8002bcc:	08002c25 	.word	0x08002c25
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd ff6b 	bl	8000ac0 <HAL_DMA_Abort_IT>
      break;
 8002bea:	e02c      	b.n	8002c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd ff5d 	bl	8000ac0 <HAL_DMA_Abort_IT>
      break;
 8002c06:	e01e      	b.n	8002c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd ff4f 	bl	8000ac0 <HAL_DMA_Abort_IT>
      break;
 8002c22:	e010      	b.n	8002c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd ff41 	bl	8000ac0 <HAL_DMA_Abort_IT>
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d176      	bne.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 feb9 	bl	80039cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a36      	ldr	r2, [pc, #216]	; (8002d4c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_TIM_PWM_Stop_DMA+0x132>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	f240 4344 	movw	r3, #1092	; 0x444
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d107      	bne.n	8002cb2 <HAL_TIM_PWM_Stop_DMA+0x132>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	f240 4344 	movw	r3, #1092	; 0x444
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	e023      	b.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Stop_DMA+0x182>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d00:	e01b      	b.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_PWM_Stop_DMA+0x192>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	e013      	b.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d20:	e00b      	b.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d30:	e003      	b.n	8002d3a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40014400 	.word	0x40014400

08002d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0ff      	b.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b14      	cmp	r3, #20
 8002d7a:	f200 80f0 	bhi.w	8002f5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002f5f 	.word	0x08002f5f
 8002d8c:	08002f5f 	.word	0x08002f5f
 8002d90:	08002f5f 	.word	0x08002f5f
 8002d94:	08002e19 	.word	0x08002e19
 8002d98:	08002f5f 	.word	0x08002f5f
 8002d9c:	08002f5f 	.word	0x08002f5f
 8002da0:	08002f5f 	.word	0x08002f5f
 8002da4:	08002e5b 	.word	0x08002e5b
 8002da8:	08002f5f 	.word	0x08002f5f
 8002dac:	08002f5f 	.word	0x08002f5f
 8002db0:	08002f5f 	.word	0x08002f5f
 8002db4:	08002e9b 	.word	0x08002e9b
 8002db8:	08002f5f 	.word	0x08002f5f
 8002dbc:	08002f5f 	.word	0x08002f5f
 8002dc0:	08002f5f 	.word	0x08002f5f
 8002dc4:	08002edd 	.word	0x08002edd
 8002dc8:	08002f5f 	.word	0x08002f5f
 8002dcc:	08002f5f 	.word	0x08002f5f
 8002dd0:	08002f5f 	.word	0x08002f5f
 8002dd4:	08002f1d 	.word	0x08002f1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fadc 	bl	800339c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0208 	orr.w	r2, r2, #8
 8002df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0204 	bic.w	r2, r2, #4
 8002e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6999      	ldr	r1, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	619a      	str	r2, [r3, #24]
      break;
 8002e16:	e0a5      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fb38 	bl	8003494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
      break;
 8002e58:	e084      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fb91 	bl	8003588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0208 	orr.w	r2, r2, #8
 8002e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0204 	bic.w	r2, r2, #4
 8002e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69d9      	ldr	r1, [r3, #28]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	61da      	str	r2, [r3, #28]
      break;
 8002e98:	e064      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fbe9 	bl	8003678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	021a      	lsls	r2, r3, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	61da      	str	r2, [r3, #28]
      break;
 8002eda:	e043      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fc26 	bl	8003734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f1a:	e023      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fc5e 	bl	80037e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	021a      	lsls	r2, r3, #8
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
      break;
 8002f62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop

08002f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_ConfigClockSource+0x1c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0b6      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x18a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d03e      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xd8>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	f200 8087 	bhi.w	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fde:	f000 8086 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x176>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d87f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002fe8:	2b70      	cmp	r3, #112	; 0x70
 8002fea:	d01a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xaa>
 8002fec:	2b70      	cmp	r3, #112	; 0x70
 8002fee:	d87b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d050      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x11e>
 8002ff4:	2b60      	cmp	r3, #96	; 0x60
 8002ff6:	d877      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d03c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xfe>
 8002ffc:	2b50      	cmp	r3, #80	; 0x50
 8002ffe:	d873      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d058      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x13e>
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d86f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d064      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 800300c:	2b30      	cmp	r3, #48	; 0x30
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d867      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d05a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15e>
 8003020:	e062      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f000 fcab 	bl	800398c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e04f      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f000 fc94 	bl	800398c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	461a      	mov	r2, r3
 8003084:	f000 fc08 	bl	8003898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	; 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fc61 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 8003094:	e02c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 fc27 	bl	80038f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	; 0x60
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fc51 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fbe8 	bl	8003898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fc41 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f000 fc38 	bl	8003956 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e003      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d107      	bne.n	800315a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003158:	e02a      	b.n	80031b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2202      	movs	r2, #2
 8003168:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003172:	e01d      	b.n	80031b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d107      	bne.n	800318e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2204      	movs	r2, #4
 8003182:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800318c:	e010      	b.n	80031b0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2208      	movs	r2, #8
 800319c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a6:	e003      	b.n	80031b0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7ff ffb4 	bl	800311e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d10b      	bne.n	80031f4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d136      	bne.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f2:	e031      	b.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d10b      	bne.n	8003216 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2202      	movs	r2, #2
 8003202:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d125      	bne.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	e020      	b.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d10b      	bne.n	8003238 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2204      	movs	r2, #4
 8003224:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003236:	e00f      	b.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d10a      	bne.n	8003258 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2208      	movs	r2, #8
 8003246:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fcbb 	bl	8003bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	d103      	bne.n	800328c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	771a      	strb	r2, [r3, #28]
 800328a:	e019      	b.n	80032c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d103      	bne.n	800329e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2202      	movs	r2, #2
 800329a:	771a      	strb	r2, [r3, #28]
 800329c:	e010      	b.n	80032c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d103      	bne.n	80032b0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2204      	movs	r2, #4
 80032ac:	771a      	strb	r2, [r3, #28]
 80032ae:	e007      	b.n	80032c0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d102      	bne.n	80032c0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2208      	movs	r2, #8
 80032be:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff ff22 	bl	800310a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <TIM_Base_SetConfig+0xbc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x20>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <TIM_Base_SetConfig+0xbc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_Base_SetConfig+0x52>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d007      	beq.n	8003326 <TIM_Base_SetConfig+0x52>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <TIM_Base_SetConfig+0xc0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_Base_SetConfig+0x52>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <TIM_Base_SetConfig+0xc4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <TIM_Base_SetConfig+0xbc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_Base_SetConfig+0xa0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <TIM_Base_SetConfig+0xc0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0xa0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <TIM_Base_SetConfig+0xc4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d103      	bne.n	800337c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	615a      	str	r2, [r3, #20]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400

0800339c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a24      	ldr	r2, [pc, #144]	; (8003488 <TIM_OC1_SetConfig+0xec>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <TIM_OC1_SetConfig+0x70>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <TIM_OC1_SetConfig+0xf0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC1_SetConfig+0x70>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a22      	ldr	r2, [pc, #136]	; (8003490 <TIM_OC1_SetConfig+0xf4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10c      	bne.n	8003426 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0308 	bic.w	r3, r3, #8
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a17      	ldr	r2, [pc, #92]	; (8003488 <TIM_OC1_SetConfig+0xec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_OC1_SetConfig+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a16      	ldr	r2, [pc, #88]	; (800348c <TIM_OC1_SetConfig+0xf0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d003      	beq.n	800343e <TIM_OC1_SetConfig+0xa2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <TIM_OC1_SetConfig+0xf4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400

08003494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0210 	bic.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0320 	bic.w	r3, r3, #32
 80034e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <TIM_OC2_SetConfig+0xe8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10d      	bne.n	8003514 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <TIM_OC2_SetConfig+0xe8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_OC2_SetConfig+0x98>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <TIM_OC2_SetConfig+0xec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC2_SetConfig+0x98>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <TIM_OC2_SetConfig+0xf0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d113      	bne.n	8003554 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400

08003588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a21      	ldr	r2, [pc, #132]	; (800366c <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10d      	bne.n	8003606 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a18      	ldr	r2, [pc, #96]	; (800366c <TIM_OC3_SetConfig+0xe4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_OC3_SetConfig+0x96>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a17      	ldr	r2, [pc, #92]	; (8003670 <TIM_OC3_SetConfig+0xe8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_OC3_SetConfig+0x96>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a16      	ldr	r2, [pc, #88]	; (8003674 <TIM_OC3_SetConfig+0xec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d113      	bne.n	8003646 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	621a      	str	r2, [r3, #32]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400

08003678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a14      	ldr	r2, [pc, #80]	; (8003728 <TIM_OC4_SetConfig+0xb0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC4_SetConfig+0x74>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <TIM_OC4_SetConfig+0xb4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC4_SetConfig+0x74>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <TIM_OC4_SetConfig+0xb8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40014000 	.word	0x40014000
 8003730:	40014400 	.word	0x40014400

08003734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <TIM_OC5_SetConfig+0xa4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_OC5_SetConfig+0x6a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a12      	ldr	r2, [pc, #72]	; (80037dc <TIM_OC5_SetConfig+0xa8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_OC5_SetConfig+0x6a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a11      	ldr	r2, [pc, #68]	; (80037e0 <TIM_OC5_SetConfig+0xac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d109      	bne.n	80037b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400

080037e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800382a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	051b      	lsls	r3, r3, #20
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <TIM_OC6_SetConfig+0xa8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <TIM_OC6_SetConfig+0x6c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <TIM_OC6_SetConfig+0xac>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_OC6_SetConfig+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a12      	ldr	r2, [pc, #72]	; (8003894 <TIM_OC6_SetConfig+0xb0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400

08003898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 030a 	bic.w	r3, r3, #10
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b087      	sub	sp, #28
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0210 	bic.w	r2, r3, #16
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	031b      	lsls	r3, r3, #12
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	f043 0307 	orr.w	r3, r3, #7
 8003978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	021a      	lsls	r2, r3, #8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1a      	ldr	r2, [r3, #32]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e04f      	b.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a21      	ldr	r2, [pc, #132]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40014000 	.word	0x40014000

08003ae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e060      	b.n	8003bc2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d115      	bne.n	8003bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00

08003bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4808      	ldr	r0, [pc, #32]	; (8003c00 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003be0:	f7fe ffce 	bl	8002b80 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003be4:	2100      	movs	r1, #0
 8003be6:	4806      	ldr	r0, [pc, #24]	; (8003c00 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8003be8:	f7fe ffca 	bl	8002b80 <HAL_TIM_PWM_Stop_DMA>

	datasentflag=1;
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
	g_dma_done_flag = true;
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	701a      	strb	r2, [r3, #0]
    //HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin, GPIO_PIN_RESET);

}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000140 	.word	0x20000140
 8003c04:	20000098 	.word	0x20000098
 8003c08:	20000097 	.word	0x20000097

08003c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c12:	f7fc fc92 	bl	800053a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003c16:	f000 f88d 	bl	8003d34 <SystemClock_Config>
  ws2812b_init();
 8003c1a:	f7fc fc0b 	bl	8000434 <ws2812b_init>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c1e:	f000 fa31 	bl	8004084 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c22:	f000 fa11 	bl	8004048 <MX_DMA_Init>
  MX_RTC_Init();
 8003c26:	f000 f8ef 	bl	8003e08 <MX_RTC_Init>
  MX_TIM2_Init();
 8003c2a:	f000 f9c1 	bl	8003fb0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003c2e:	f000 f913 	bl	8003e58 <MX_TIM1_Init>
  HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin, GPIO_PIN_SET);
 8003c32:	2201      	movs	r2, #1
 8003c34:	2101      	movs	r1, #1
 8003c36:	483d      	ldr	r0, [pc, #244]	; (8003d2c <main+0x120>)
 8003c38:	f7fd f9dc 	bl	8000ff4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	483c      	ldr	r0, [pc, #240]	; (8003d30 <main+0x124>)
 8003c40:	f7fe ff9e 	bl	8002b80 <HAL_TIM_PWM_Stop_DMA>

  HAL_Delay(1000);
 8003c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c48:	f7fc fcec 	bl	8000624 <HAL_Delay>

	for(int i = 0; i < STRIP_1_LENGTH; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e00b      	b.n	8003c6a <main+0x5e>
	{
		ws2812b_set_led(1, i, 0, 0, 0);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	b299      	uxth	r1, r3
 8003c56:	2300      	movs	r3, #0
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f7fc faf2 	bl	8000248 <ws2812b_set_led>
	for(int i = 0; i < STRIP_1_LENGTH; i++)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3301      	adds	r3, #1
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	ddf0      	ble.n	8003c52 <main+0x46>
	}
	ws2812b_show(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f7fc fc41 	bl	80004f8 <ws2812b_show>
	while (1)
	{
		ws2812b_set_led(1, 0, 255, 0, 0);
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7fc fae1 	bl	8000248 <ws2812b_set_led>
		ws2812b_set_led(1, 1, 0, 255, 0);
 8003c86:	2300      	movs	r3, #0
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	23ff      	movs	r3, #255	; 0xff
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2101      	movs	r1, #1
 8003c90:	2001      	movs	r0, #1
 8003c92:	f7fc fad9 	bl	8000248 <ws2812b_set_led>
		ws2812b_set_led(1, 2, 0, 0, 255);
 8003c96:	23ff      	movs	r3, #255	; 0xff
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7fc fad1 	bl	8000248 <ws2812b_set_led>
		ws2812b_show(1);
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f7fc fc26 	bl	80004f8 <ws2812b_show>
		HAL_Delay(100);
 8003cac:	2064      	movs	r0, #100	; 0x64
 8003cae:	f7fc fcb9 	bl	8000624 <HAL_Delay>
		ws2812b_set_led(1, 0, 0, 255, 0);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	23ff      	movs	r3, #255	; 0xff
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f7fc fac3 	bl	8000248 <ws2812b_set_led>
		ws2812b_set_led(1, 1, 0, 0, 255);
 8003cc2:	23ff      	movs	r3, #255	; 0xff
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2101      	movs	r1, #1
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7fc fabb 	bl	8000248 <ws2812b_set_led>
		ws2812b_set_led(1, 2, 255, 0, 0);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	22ff      	movs	r2, #255	; 0xff
 8003cda:	2102      	movs	r1, #2
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f7fc fab3 	bl	8000248 <ws2812b_set_led>
		ws2812b_show(1);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fc fc08 	bl	80004f8 <ws2812b_show>
		HAL_Delay(100);
 8003ce8:	2064      	movs	r0, #100	; 0x64
 8003cea:	f7fc fc9b 	bl	8000624 <HAL_Delay>
		ws2812b_set_led(1, 0, 0, 0, 255);
 8003cee:	23ff      	movs	r3, #255	; 0xff
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7fc faa5 	bl	8000248 <ws2812b_set_led>
		ws2812b_set_led(1, 1, 255, 0, 0);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2300      	movs	r3, #0
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	2101      	movs	r1, #1
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f7fc fa9d 	bl	8000248 <ws2812b_set_led>
		ws2812b_set_led(1, 2, 0, 255, 0);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	23ff      	movs	r3, #255	; 0xff
 8003d14:	2200      	movs	r2, #0
 8003d16:	2102      	movs	r1, #2
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7fc fa95 	bl	8000248 <ws2812b_set_led>
		ws2812b_show(1);
 8003d1e:	2001      	movs	r0, #1
 8003d20:	f7fc fbea 	bl	80004f8 <ws2812b_show>
		HAL_Delay(100);
 8003d24:	2064      	movs	r0, #100	; 0x64
 8003d26:	f7fc fc7d 	bl	8000624 <HAL_Delay>
		ws2812b_set_led(1, 0, 255, 0, 0);
 8003d2a:	e7a4      	b.n	8003c76 <main+0x6a>
 8003d2c:	48000400 	.word	0x48000400
 8003d30:	20000140 	.word	0x20000140

08003d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b0ae      	sub	sp, #184	; 0xb8
 8003d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d3e:	2244      	movs	r2, #68	; 0x44
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fc16 	bl	8004574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	225c      	movs	r2, #92	; 0x5c
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fc08 	bl	8004574 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003d64:	f7fd f95e 	bl	8001024 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <SystemClock_Config+0xd0>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <SystemClock_Config+0xd0>)
 8003d70:	f023 0318 	bic.w	r3, r3, #24
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003d78:	2305      	movs	r3, #5
 8003d7a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d80:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003d82:	2301      	movs	r3, #1
 8003d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fd fa2b 	bl	80011ec <HAL_RCC_OscConfig>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <SystemClock_Config+0x6c>
  {
      Error_Handler();
 8003d9c:	f000 fa02 	bl	80041a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003da0:	230f      	movs	r3, #15
 8003da2:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003da4:	2302      	movs	r3, #2
 8003da6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da8:	2300      	movs	r3, #0
 8003daa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dac:	2300      	movs	r3, #0
 8003dae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003db0:	2300      	movs	r3, #0
 8003db2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003db4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd fe28 	bl	8001a10 <HAL_RCC_ClockConfig>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003dc6:	f000 f9ed 	bl	80041a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe f805 	bl	8001de8 <HAL_RCCEx_PeriphCLKConfig>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003de4:	f000 f9de 	bl	80041a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003de8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003dec:	f7fd f9a8 	bl	8001140 <HAL_PWREx_ControlVoltageScaling>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003df6:	f000 f9d5 	bl	80041a4 <Error_Handler>
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	37b8      	adds	r7, #184	; 0xb8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000

08003e08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e0e:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <MX_RTC_Init+0x4c>)
 8003e10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e1a:	227f      	movs	r2, #127	; 0x7f
 8003e1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e3c:	4804      	ldr	r0, [pc, #16]	; (8003e50 <MX_RTC_Init+0x48>)
 8003e3e:	f7fe fadd 	bl	80023fc <HAL_RTC_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003e48:	f000 f9ac 	bl	80041a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	2000011c 	.word	0x2000011c
 8003e54:	40002800 	.word	0x40002800

08003e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b09a      	sub	sp, #104	; 0x68
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
 8003e88:	615a      	str	r2, [r3, #20]
 8003e8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	222c      	movs	r2, #44	; 0x2c
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb6e 	bl	8004574 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003e9a:	4a44      	ldr	r2, [pc, #272]	; (8003fac <MX_TIM1_Init+0x154>)
 8003e9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e9e:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60-1;
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003eac:	223b      	movs	r2, #59	; 0x3b
 8003eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ebc:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ec2:	4839      	ldr	r0, [pc, #228]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003ec4:	f7fe fbac 	bl	8002620 <HAL_TIM_Base_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003ece:	f000 f969 	bl	80041a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ed8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003edc:	4619      	mov	r1, r3
 8003ede:	4832      	ldr	r0, [pc, #200]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003ee0:	f7ff f84a 	bl	8002f78 <HAL_TIM_ConfigClockSource>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003eea:	f000 f95b 	bl	80041a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003eee:	482e      	ldr	r0, [pc, #184]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003ef0:	f7fe fbed 	bl	80026ce <HAL_TIM_PWM_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003efa:	f000 f953 	bl	80041a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4825      	ldr	r0, [pc, #148]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003f12:	f7ff fd81 	bl	8003a18 <HAL_TIMEx_MasterConfigSynchronization>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003f1c:	f000 f942 	bl	80041a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f20:	2360      	movs	r3, #96	; 0x60
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f40:	2200      	movs	r2, #0
 8003f42:	4619      	mov	r1, r3
 8003f44:	4818      	ldr	r0, [pc, #96]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003f46:	f7fe ff03 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003f50:	f000 f928 	bl	80041a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4807      	ldr	r0, [pc, #28]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003f8a:	f7ff fdab 	bl	8003ae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003f94:	f000 f906 	bl	80041a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f98:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <MX_TIM1_Init+0x150>)
 8003f9a:	f000 f9db 	bl	8004354 <HAL_TIM_MspPostInit>

}
 8003f9e:	bf00      	nop
 8003fa0:	3768      	adds	r7, #104	; 0x68
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000140 	.word	0x20000140
 8003fac:	40012c00 	.word	0x40012c00

08003fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb6:	f107 0310 	add.w	r3, r7, #16
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <MX_TIM2_Init+0x94>)
 8003fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <MX_TIM2_Init+0x94>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <MX_TIM2_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 54+27;
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <MX_TIM2_Init+0x94>)
 8003fe4:	2251      	movs	r2, #81	; 0x51
 8003fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <MX_TIM2_Init+0x94>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <MX_TIM2_Init+0x94>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ff4:	4813      	ldr	r0, [pc, #76]	; (8004044 <MX_TIM2_Init+0x94>)
 8003ff6:	f7fe fb13 	bl	8002620 <HAL_TIM_Base_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004000:	f000 f8d0 	bl	80041a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800400a:	f107 0310 	add.w	r3, r7, #16
 800400e:	4619      	mov	r1, r3
 8004010:	480c      	ldr	r0, [pc, #48]	; (8004044 <MX_TIM2_Init+0x94>)
 8004012:	f7fe ffb1 	bl	8002f78 <HAL_TIM_ConfigClockSource>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800401c:	f000 f8c2 	bl	80041a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4805      	ldr	r0, [pc, #20]	; (8004044 <MX_TIM2_Init+0x94>)
 800402e:	f7ff fcf3 	bl	8003a18 <HAL_TIMEx_MasterConfigSynchronization>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004038:	f000 f8b4 	bl	80041a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000018c 	.word	0x2000018c

08004048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <MX_DMA_Init+0x38>)
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <MX_DMA_Init+0x38>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6493      	str	r3, [r2, #72]	; 0x48
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <MX_DMA_Init+0x38>)
 800405c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	200c      	movs	r0, #12
 800406c:	f7fc fbd9 	bl	8000822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004070:	200c      	movs	r0, #12
 8004072:	f7fc fbf2 	bl	800085a <HAL_NVIC_EnableIRQ>

}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000

08004084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <MX_GPIO_Init+0x114>)
 800409c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409e:	4a3e      	ldr	r2, [pc, #248]	; (8004198 <MX_GPIO_Init+0x114>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040a6:	4b3c      	ldr	r3, [pc, #240]	; (8004198 <MX_GPIO_Init+0x114>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <MX_GPIO_Init+0x114>)
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	4a38      	ldr	r2, [pc, #224]	; (8004198 <MX_GPIO_Init+0x114>)
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <MX_GPIO_Init+0x114>)
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ca:	4b33      	ldr	r3, [pc, #204]	; (8004198 <MX_GPIO_Init+0x114>)
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	4a32      	ldr	r2, [pc, #200]	; (8004198 <MX_GPIO_Init+0x114>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <MX_GPIO_Init+0x114>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <MX_GPIO_Init+0x114>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <MX_GPIO_Init+0x114>)
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ee:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <MX_GPIO_Init+0x114>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_2_Pin|GPIO_3_Pin|LED_OUT_1_Pin|LED_OUT_2_Pin, GPIO_PIN_RESET);
 80040fa:	2200      	movs	r2, #0
 80040fc:	210f      	movs	r1, #15
 80040fe:	4827      	ldr	r0, [pc, #156]	; (800419c <MX_GPIO_Init+0x118>)
 8004100:	f7fc ff78 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEVEL_SHIFTER_EN_Pin|GPIO_0_Pin, GPIO_PIN_RESET);
 8004104:	2200      	movs	r2, #0
 8004106:	f240 1101 	movw	r1, #257	; 0x101
 800410a:	4825      	ldr	r0, [pc, #148]	; (80041a0 <MX_GPIO_Init+0x11c>)
 800410c:	f7fc ff72 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_3_Pin LED_OUT_1_Pin LED_OUT_2_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_3_Pin|LED_OUT_1_Pin|LED_OUT_2_Pin;
 8004110:	230f      	movs	r3, #15
 8004112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004114:	2301      	movs	r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4619      	mov	r1, r3
 8004126:	481d      	ldr	r0, [pc, #116]	; (800419c <MX_GPIO_Init+0x118>)
 8004128:	f7fc fdea 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM15_CH1_Pin */
  GPIO_InitStruct.Pin = TIM15_CH1_Pin;
 800412c:	2308      	movs	r3, #8
 800412e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	2302      	movs	r3, #2
 8004132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004138:	2300      	movs	r3, #0
 800413a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800413c:	230e      	movs	r3, #14
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM15_CH1_GPIO_Port, &GPIO_InitStruct);
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	4619      	mov	r1, r3
 8004146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800414a:	f7fc fdd9 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM16_CH1_Pin */
  GPIO_InitStruct.Pin = TIM16_CH1_Pin;
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800415e:	230e      	movs	r3, #14
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM16_CH1_GPIO_Port, &GPIO_InitStruct);
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	4619      	mov	r1, r3
 8004168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416c:	f7fc fdc8 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEVEL_SHIFTER_EN_Pin GPIO_0_Pin */
  GPIO_InitStruct.Pin = LEVEL_SHIFTER_EN_Pin|GPIO_0_Pin;
 8004170:	f240 1301 	movw	r3, #257	; 0x101
 8004174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004182:	f107 0314 	add.w	r3, r7, #20
 8004186:	4619      	mov	r1, r3
 8004188:	4805      	ldr	r0, [pc, #20]	; (80041a0 <MX_GPIO_Init+0x11c>)
 800418a:	f7fc fdb9 	bl	8000d00 <HAL_GPIO_Init>

}
 800418e:	bf00      	nop
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	48000800 	.word	0x48000800
 80041a0:	48000400 	.word	0x48000400

080041a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041a8:	b672      	cpsid	i
}
 80041aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ac:	e7fe      	b.n	80041ac <Error_Handler+0x8>
	...

080041b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <HAL_MspInit+0x60>)
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <HAL_MspInit+0x60>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6613      	str	r3, [r2, #96]	; 0x60
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_MspInit+0x60>)
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_MspInit+0x60>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <HAL_MspInit+0x60>)
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6593      	str	r3, [r2, #88]	; 0x58
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_MspInit+0x60>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80041f8:	f107 0308 	add.w	r3, r7, #8
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc ff21 	bl	8001044 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8004202:	f7fc ff7f 	bl	8001104 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000

08004214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_RTC_MspInit+0x30>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d107      	bne.n	8004236 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_RTC_MspInit+0x34>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	4a06      	ldr	r2, [pc, #24]	; (8004248 <HAL_RTC_MspInit+0x34>)
 800422e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40002800 	.word	0x40002800
 8004248:	40021000 	.word	0x40021000

0800424c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a36      	ldr	r2, [pc, #216]	; (8004344 <HAL_TIM_Base_MspInit+0xf8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d138      	bne.n	80042e0 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	4a35      	ldr	r2, [pc, #212]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 8004274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004278:	6613      	str	r3, [r2, #96]	; 0x60
 800427a:	4b33      	ldr	r3, [pc, #204]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 8004288:	4a31      	ldr	r2, [pc, #196]	; (8004350 <HAL_TIM_Base_MspInit+0x104>)
 800428a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800428c:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 800428e:	2207      	movs	r2, #7
 8004290:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004292:	4b2e      	ldr	r3, [pc, #184]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 8004294:	2210      	movs	r2, #16
 8004296:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004298:	4b2c      	ldr	r3, [pc, #176]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042a4:	4b29      	ldr	r3, [pc, #164]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042aa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042b2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042bc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80042c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80042c2:	4822      	ldr	r0, [pc, #136]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042c4:	f7fc fae4 	bl	8000890 <HAL_DMA_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80042ce:	f7ff ff69 	bl	80041a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_TIM_Base_MspInit+0x100>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80042de:	e02d      	b.n	800433c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e8:	d128      	bne.n	800433c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	4a10      	ldr	r2, [pc, #64]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <HAL_TIM_Base_MspInit+0xfc>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM2_CH2_Pin;
 800431a:	2302      	movs	r3, #2
 800431c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800432a:	2301      	movs	r3, #1
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	4619      	mov	r1, r3
 8004334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004338:	f7fc fce2 	bl	8000d00 <HAL_GPIO_Init>
}
 800433c:	bf00      	nop
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40021000 	.word	0x40021000
 800434c:	200000d4 	.word	0x200000d4
 8004350:	4002001c 	.word	0x4002001c

08004354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a12      	ldr	r2, [pc, #72]	; (80043bc <HAL_TIM_MspPostInit+0x68>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d11d      	bne.n	80043b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_TIM_MspPostInit+0x6c>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <HAL_TIM_MspPostInit+0x6c>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_TIM_MspPostInit+0x6c>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin;
 800438e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004392:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM1_CH1_GPIO_Port, &GPIO_InitStruct);
 80043a4:	f107 030c 	add.w	r3, r7, #12
 80043a8:	4619      	mov	r1, r3
 80043aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ae:	f7fc fca7 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40021000 	.word	0x40021000

080043c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043c8:	e7fe      	b.n	80043c8 <NMI_Handler+0x4>

080043ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ce:	e7fe      	b.n	80043ce <HardFault_Handler+0x4>

080043d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <MemManage_Handler+0x4>

080043d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043da:	e7fe      	b.n	80043da <BusFault_Handler+0x4>

080043dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e0:	e7fe      	b.n	80043e0 <UsageFault_Handler+0x4>

080043e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043fe:	b480      	push	{r7}
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004410:	f7fc f8e8 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}

08004418 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800441c:	4802      	ldr	r0, [pc, #8]	; (8004428 <DMA1_Channel2_IRQHandler+0x10>)
 800441e:	f7fc fb90 	bl	8000b42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200000d4 	.word	0x200000d4

0800442c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004434:	4a14      	ldr	r2, [pc, #80]	; (8004488 <_sbrk+0x5c>)
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <_sbrk+0x60>)
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004440:	4b13      	ldr	r3, [pc, #76]	; (8004490 <_sbrk+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004448:	4b11      	ldr	r3, [pc, #68]	; (8004490 <_sbrk+0x64>)
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <_sbrk+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <_sbrk+0x64>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d207      	bcs.n	800446c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800445c:	f000 f858 	bl	8004510 <__errno>
 8004460:	4603      	mov	r3, r0
 8004462:	220c      	movs	r2, #12
 8004464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e009      	b.n	8004480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <_sbrk+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <_sbrk+0x64>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <_sbrk+0x64>)
 800447c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20010000 	.word	0x20010000
 800448c:	00000400 	.word	0x00000400
 8004490:	2000009c 	.word	0x2000009c
 8004494:	200001e8 	.word	0x200001e8

08004498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <SystemInit+0x20>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <SystemInit+0x20>)
 80044a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044c0:	f7ff ffea 	bl	8004498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044c4:	480c      	ldr	r0, [pc, #48]	; (80044f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80044c6:	490d      	ldr	r1, [pc, #52]	; (80044fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80044c8:	4a0d      	ldr	r2, [pc, #52]	; (8004500 <LoopForever+0xe>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044cc:	e002      	b.n	80044d4 <LoopCopyDataInit>

080044ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044d2:	3304      	adds	r3, #4

080044d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044d8:	d3f9      	bcc.n	80044ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044dc:	4c0a      	ldr	r4, [pc, #40]	; (8004508 <LoopForever+0x16>)
  movs r3, #0
 80044de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044e0:	e001      	b.n	80044e6 <LoopFillZerobss>

080044e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044e4:	3204      	adds	r2, #4

080044e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044e8:	d3fb      	bcc.n	80044e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ea:	f000 f817 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044ee:	f7ff fb8d 	bl	8003c0c <main>

080044f2 <LoopForever>:

LoopForever:
    b LoopForever
 80044f2:	e7fe      	b.n	80044f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80044f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004500:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8004504:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004508:	200001e8 	.word	0x200001e8

0800450c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800450c:	e7fe      	b.n	800450c <ADC1_IRQHandler>
	...

08004510 <__errno>:
 8004510:	4b01      	ldr	r3, [pc, #4]	; (8004518 <__errno+0x8>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000010 	.word	0x20000010

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4d0d      	ldr	r5, [pc, #52]	; (8004554 <__libc_init_array+0x38>)
 8004520:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	2600      	movs	r6, #0
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	4d0b      	ldr	r5, [pc, #44]	; (800455c <__libc_init_array+0x40>)
 800452e:	4c0c      	ldr	r4, [pc, #48]	; (8004560 <__libc_init_array+0x44>)
 8004530:	f000 f8a0 	bl	8004674 <_init>
 8004534:	1b64      	subs	r4, r4, r5
 8004536:	10a4      	asrs	r4, r4, #2
 8004538:	2600      	movs	r6, #0
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f855 3b04 	ldr.w	r3, [r5], #4
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f855 3b04 	ldr.w	r3, [r5], #4
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	080046cc 	.word	0x080046cc
 8004558:	080046cc 	.word	0x080046cc
 800455c:	080046cc 	.word	0x080046cc
 8004560:	080046d0 	.word	0x080046d0

08004564 <malloc>:
 8004564:	4b02      	ldr	r3, [pc, #8]	; (8004570 <malloc+0xc>)
 8004566:	4601      	mov	r1, r0
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	f000 b80b 	b.w	8004584 <_malloc_r>
 800456e:	bf00      	nop
 8004570:	20000010 	.word	0x20000010

08004574 <memset>:
 8004574:	4402      	add	r2, r0
 8004576:	4603      	mov	r3, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	d100      	bne.n	800457e <memset+0xa>
 800457c:	4770      	bx	lr
 800457e:	f803 1b01 	strb.w	r1, [r3], #1
 8004582:	e7f9      	b.n	8004578 <memset+0x4>

08004584 <_malloc_r>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	1ccd      	adds	r5, r1, #3
 8004588:	f025 0503 	bic.w	r5, r5, #3
 800458c:	3508      	adds	r5, #8
 800458e:	2d0c      	cmp	r5, #12
 8004590:	bf38      	it	cc
 8004592:	250c      	movcc	r5, #12
 8004594:	2d00      	cmp	r5, #0
 8004596:	4606      	mov	r6, r0
 8004598:	db01      	blt.n	800459e <_malloc_r+0x1a>
 800459a:	42a9      	cmp	r1, r5
 800459c:	d903      	bls.n	80045a6 <_malloc_r+0x22>
 800459e:	230c      	movs	r3, #12
 80045a0:	6033      	str	r3, [r6, #0]
 80045a2:	2000      	movs	r0, #0
 80045a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a6:	f000 f857 	bl	8004658 <__malloc_lock>
 80045aa:	4921      	ldr	r1, [pc, #132]	; (8004630 <_malloc_r+0xac>)
 80045ac:	680a      	ldr	r2, [r1, #0]
 80045ae:	4614      	mov	r4, r2
 80045b0:	b99c      	cbnz	r4, 80045da <_malloc_r+0x56>
 80045b2:	4f20      	ldr	r7, [pc, #128]	; (8004634 <_malloc_r+0xb0>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b923      	cbnz	r3, 80045c2 <_malloc_r+0x3e>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 f83c 	bl	8004638 <_sbrk_r>
 80045c0:	6038      	str	r0, [r7, #0]
 80045c2:	4629      	mov	r1, r5
 80045c4:	4630      	mov	r0, r6
 80045c6:	f000 f837 	bl	8004638 <_sbrk_r>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	d123      	bne.n	8004616 <_malloc_r+0x92>
 80045ce:	230c      	movs	r3, #12
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	4630      	mov	r0, r6
 80045d4:	f000 f846 	bl	8004664 <__malloc_unlock>
 80045d8:	e7e3      	b.n	80045a2 <_malloc_r+0x1e>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	1b5b      	subs	r3, r3, r5
 80045de:	d417      	bmi.n	8004610 <_malloc_r+0x8c>
 80045e0:	2b0b      	cmp	r3, #11
 80045e2:	d903      	bls.n	80045ec <_malloc_r+0x68>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	441c      	add	r4, r3
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	e004      	b.n	80045f6 <_malloc_r+0x72>
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	42a2      	cmp	r2, r4
 80045f0:	bf0c      	ite	eq
 80045f2:	600b      	streq	r3, [r1, #0]
 80045f4:	6053      	strne	r3, [r2, #4]
 80045f6:	4630      	mov	r0, r6
 80045f8:	f000 f834 	bl	8004664 <__malloc_unlock>
 80045fc:	f104 000b 	add.w	r0, r4, #11
 8004600:	1d23      	adds	r3, r4, #4
 8004602:	f020 0007 	bic.w	r0, r0, #7
 8004606:	1ac2      	subs	r2, r0, r3
 8004608:	d0cc      	beq.n	80045a4 <_malloc_r+0x20>
 800460a:	1a1b      	subs	r3, r3, r0
 800460c:	50a3      	str	r3, [r4, r2]
 800460e:	e7c9      	b.n	80045a4 <_malloc_r+0x20>
 8004610:	4622      	mov	r2, r4
 8004612:	6864      	ldr	r4, [r4, #4]
 8004614:	e7cc      	b.n	80045b0 <_malloc_r+0x2c>
 8004616:	1cc4      	adds	r4, r0, #3
 8004618:	f024 0403 	bic.w	r4, r4, #3
 800461c:	42a0      	cmp	r0, r4
 800461e:	d0e3      	beq.n	80045e8 <_malloc_r+0x64>
 8004620:	1a21      	subs	r1, r4, r0
 8004622:	4630      	mov	r0, r6
 8004624:	f000 f808 	bl	8004638 <_sbrk_r>
 8004628:	3001      	adds	r0, #1
 800462a:	d1dd      	bne.n	80045e8 <_malloc_r+0x64>
 800462c:	e7cf      	b.n	80045ce <_malloc_r+0x4a>
 800462e:	bf00      	nop
 8004630:	200000a0 	.word	0x200000a0
 8004634:	200000a4 	.word	0x200000a4

08004638 <_sbrk_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4d06      	ldr	r5, [pc, #24]	; (8004654 <_sbrk_r+0x1c>)
 800463c:	2300      	movs	r3, #0
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7ff fef2 	bl	800442c <_sbrk>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d102      	bne.n	8004652 <_sbrk_r+0x1a>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	b103      	cbz	r3, 8004652 <_sbrk_r+0x1a>
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	bd38      	pop	{r3, r4, r5, pc}
 8004654:	200001d8 	.word	0x200001d8

08004658 <__malloc_lock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_lock+0x8>)
 800465a:	f000 b809 	b.w	8004670 <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	200001e0 	.word	0x200001e0

08004664 <__malloc_unlock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_unlock+0x8>)
 8004666:	f000 b804 	b.w	8004672 <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	200001e0 	.word	0x200001e0

08004670 <__retarget_lock_acquire_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_release_recursive>:
 8004672:	4770      	bx	lr

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
